1
00:00:00,182 --> 00:00:02,932
（空灵音乐） 

2
00:00:04,920 --> 00:00:06,520
-[旁白]斯坦福大学

3
00:00:08,720 --> 00:00:10,820
-[讲师]我们回来了，第九讲， 

4
00:00:10,820 --> 00:00:15,820
斯坦福CS193p，2020年春季。 

5
00:00:16,320 --> 00:00:19,580
今天我们要谈论一个非常重要的话题， 

6
00:00:19,580 --> 00:00:21,110
属性包装器。 

7
00:00:21,110 --> 00:00:24,816
我们终于要了解@State之类的东西

8
00:00:24,816 --> 00:00:29,220
和@Published确实在后台进行。 

9
00:00:29,220 --> 00:00:30,620
然后我们要谈论出版商

10
00:00:30,620 --> 00:00:33,060
因为，当我们开始谈论@Published时

11
00:00:33,060 --> 00:00:35,740
它会很快导致另一个话题， 

12
00:00:35,740 --> 00:00:38,270
另一个非常重要的话题

13
00:00:38,270 --> 00:00:40,530
但是，我只有一点时间

14
00:00:40,530 --> 00:00:41,900
今天说说

15
00:00:41,900 --> 00:00:44,640
我们将在本季度晚些时候再谈论它， 

16
00:00:44,640 --> 00:00:47,410
今天就来概述。 

17
00:00:47,410 --> 00:00:49,870
然后，我们将深入演示，向我展示

18
00:00:49,870 --> 00:00:51,670
关于发布商的很多东西

19
00:00:51,670 --> 00:00:54,390
再说说@Binding 

20
00:00:54,390 --> 00:00:56,970
这是您将要了解的新的属性包装器

21
00:00:56,970 --> 00:00:58,003
在这些幻灯片中。 

22
00:00:59,070 --> 00:01:01,110
因此，让我们谈谈属性包装器。 

23
00:01:01,110 --> 00:01:03,679
这些就是您所看到的@Somethings， 

24
00:01:03,679 --> 00:01:06,200
@ State，@ Publisher。 

25
00:01:06,200 --> 00:01:09,180
原来这东西实际上是一个结构

26
00:01:09,180 --> 00:01:11,580
那结构里面有代码

27
00:01:11,580 --> 00:01:14,150
应用某种模板行为

28
00:01:14,150 --> 00:01:17,630
他们包装的所有var。 

29
00:01:17,630 --> 00:01:19,080
我们已经知道其中一些行为， 

30
00:01:19,080 --> 00:01:22,310
像@State一样，它使var驻留在堆中， 

31
00:01:22,310 --> 00:01:24,040
正确，使其在视图中可写

32
00:01:24,040 --> 00:01:26,870
否则将无法写入。 

33
00:01:26,870 --> 00:01:30,580
我们知道@Published发布var的更改

34
00:01:30,580 --> 00:01:32,980
导致视图重绘，诸如此类。 

35
00:01:32,980 --> 00:01:36,170
@ObservedObject也是一样，观察我们的ViewModel 

36
00:01:36,170 --> 00:01:39,510
当它改变时，会使我们的视图重绘。 

37
00:01:39,510 --> 00:01:42,090
属性包装器是Swift语言的一项功能

38
00:01:42,090 --> 00:01:45,890
加上一些语法糖来制作这些结构

39
00:01:45,890 --> 00:01:48,490
在您的代码中非常容易使用。 

40
00:01:48,490 --> 00:01:51,210
那么让我们来谈谈这种语法糖

41
00:01:51,210 --> 00:01:53,429
为此，我们将使用此示例， 

42
00:01:53,429 --> 00:01:57,280
@已发布的EmojiArt类型的v​​ar emoji 

43
00:01:57,280 --> 00:02:01,433
等于EmojiArt（），在我们的EmojiArt演示中有此内容。 

44
00:02:02,410 --> 00:02:04,410
这里到底发生了什么？ 

45
00:02:04,410 --> 00:02:06,200
就像我说的，这行代码

46
00:02:06,200 --> 00:02:11,120
真正在创建一个结构，该结构是什么类型？ 

47
00:02:11,120 --> 00:02:14,220
类型为已发布。 

48
00:02:14,220 --> 00:02:17,600
这就是这种结构的类型。 

49
00:02:17,600 --> 00:02:21,030
在这个结构中有一个非常重要的变量

50
00:02:21,030 --> 00:02:22,717
称为其wrappedValue。 

51
00:02:23,650 --> 00:02:26,640
现在，这个wrapdValue变量的类型

52
00:02:26,640 --> 00:02:29,380
对于大多数房地产包装

53
00:02:29,380 --> 00:02:32,350
是包装的var类型，即emojiArt内容， 

54
00:02:32,350 --> 00:02:34,040
这是EmojiArt类型的

55
00:02:34,040 --> 00:02:36,540
太棒了，里面有包装好的值

56
00:02:36,540 --> 00:02:39,020
这是一个表情符号艺术。 

57
00:02:39,020 --> 00:02:42,070
Swift，当您执行@Published时， 

58
00:02:42,070 --> 00:02:44,140
它建立了这些结构之一

59
00:02:44,140 --> 00:02:46,990
并提供几个var给您。 

60
00:02:46,990 --> 00:02:49,850
第一个是_emojiArt。 

61
00:02:49,850 --> 00:02:53,090
现在我们还没有看到这个，但是它在那里。 

62
00:02:53,090 --> 00:02:58,090
_emojiArt是已发布类型，基本上是该类型

63
00:02:58,370 --> 00:03:01,790
我们在这里讨论的这个结构。 

64
00:03:01,790 --> 00:03:06,070
通过创建一个发布结构来初始化它

65
00:03:06,070 --> 00:03:09,540
并将该wrappedValue设置为您初始化的任何内容

66
00:03:09,540 --> 00:03:11,360
您要包装的var。 

67
00:03:11,360 --> 00:03:12,650
好吧，emojiArt，在那边， 

68
00:03:12,650 --> 00:03:15,370
我们将其初始化为空的EmojiArt， 

69
00:03:15,370 --> 00:03:18,150
所以我们的发布结构被初始化

70
00:03:18,150 --> 00:03:20,350
那里那个wrappedValue。 

71
00:03:20,350 --> 00:03:22,170
这很有意义。 

72
00:03:22,170 --> 00:03:24,340
现在我们实际上并没有访问这个紫色

73
00:03:24,340 --> 00:03:28,027
_emojiArt经常出现，但是在那里

74
00:03:28,027 --> 00:03:30,960
我们确实可以访问下一个变量

75
00:03:30,960 --> 00:03:33,020
看起来就像我们要包装的东西， 

76
00:03:33,020 --> 00:03:36,130
它在那里闪烁，var emojiArt， 

77
00:03:36,130 --> 00:03:40,200
但是事实证明这是一个计算属性。 

78
00:03:40,200 --> 00:03:44,020
从概念上讲，它得到了wrappedValue 

79
00:03:44,020 --> 00:03:46,370
超出_emojiArt的设置

80
00:03:46,370 --> 00:03:49,690
通过设置_emojiArt的wrappedValue。 

81
00:03:49,690 --> 00:03:52,450
因此，从概念上讲，这实际上就是这里正在发生的事情。 

82
00:03:52,450 --> 00:03:53,900
现在，不仅如此。 

83
00:03:53,900 --> 00:03:55,940
当然，这个发布只是一个结构

84
00:03:55,940 --> 00:03:58,020
我们可以使用wrapperValue做很多不同的事情

85
00:03:58,020 --> 00:04:01,570
但这基本上是正在发生的事情。 

86
00:04:01,570 --> 00:04:03,140
但是等等，还有更多。 

87
00:04:03,140 --> 00:04:05,870
该结构中还有另一个变量

88
00:04:05,870 --> 00:04:07,927
称为projectedValue。 

89
00:04:09,660 --> 00:04:11,650
您访问此projectedValue 

90
00:04:11,650 --> 00:04:14,693
还有另一个语法糖变种$ emojiArt。 

91
00:04:15,600 --> 00:04:18,060
所以我们有_emojiArt，那就是结构， 

92
00:04:18,060 --> 00:04:20,500
我们面前没有东西emojiArt， 

93
00:04:20,500 --> 00:04:24,470
通过计算属性获取wrapValue， 

94
00:04:24,470 --> 00:04:26,210
那么你有$ emojiArt 

95
00:04:26,210 --> 00:04:28,283
正在访问此projectedValue。 

96
00:04:29,340 --> 00:04:31,760
那么，这是什么projectedValue？ 

97
00:04:31,760 --> 00:04:34,200
好吧，这完全取决于属性包装器。 

98
00:04:34,200 --> 00:04:37,510
所以每个属性包装器都有一个不同的projectedValue 

99
00:04:37,510 --> 00:04:39,500
那完全是它的决定。 

100
00:04:39,500 --> 00:04:42,490
例如，@ Published，那个结构， 

101
00:04:42,490 --> 00:04:45,960
它选择让其projectedValue为发布者

102
00:04:45,960 --> 00:04:49,593
发布包装的值，并且永不失败。 

103
00:04:50,450 --> 00:04:54,330
这就是Publisher <EmojiArt，Never>的含义， 

104
00:04:54,330 --> 00:04:58,970
这意味着发布商会定期发布价值

105
00:04:58,970 --> 00:05:01,740
这是一个emojiArt，永远不会失败。 

106
00:05:01,740 --> 00:05:04,220
现在，当然，它会定期发出的值

107
00:05:04,220 --> 00:05:07,350
包装的价值，表情符号艺术发生变化的任何时间

108
00:05:07,350 --> 00:05:09,380
它发布了更改。 

109
00:05:09,380 --> 00:05:10,960
我们稍后再讨论发布者

110
00:05:10,960 --> 00:05:12,510
这对您来说更有意义， 

111
00:05:12,510 --> 00:05:14,810
但这是projectedValue 

112
00:05:14,810 --> 00:05:18,350
@Published属性包装器。 

113
00:05:18,350 --> 00:05:20,400
每个人都会有不同的类型

114
00:05:20,400 --> 00:05:21,900
所以我们必须经历

115
00:05:21,900 --> 00:05:25,403
并逐案讨论这些内容。 

116
00:05:26,280 --> 00:05:27,910
但是首先让我们谈谈为什么

117
00:05:27,910 --> 00:05:29,430
这个属性包装器的东西。 

118
00:05:29,430 --> 00:05:30,773
有什么意义呢？ 

119
00:05:30,773 --> 00:05:33,990
好吧，重点是包装器结构

120
00:05:33,990 --> 00:05:36,360
像发布，可以做点什么

121
00:05:36,360 --> 00:05:39,283
获取或设置wrapdValue时。 

122
00:05:40,170 --> 00:05:41,900
它可以参与其中。 

123
00:05:41,900 --> 00:05:44,520
例如，@ Published，它有什么作用

124
00:05:44,520 --> 00:05:46,340
何时设置其wrapdValue？ 

125
00:05:46,340 --> 00:05:48,300
好吧，它出版了， 

126
00:05:48,300 --> 00:05:51,060
通过它的小$ emojiArt Publisher。 

127
00:05:51,060 --> 00:05:55,730
不仅如此，@ Published还会导致objectWillChange.send 

128
00:05:55,730 --> 00:05:58,960
发生在它所在的ObservableObject中。 

129
00:05:58,960 --> 00:06:02,160
因此，它正在参与设置并获得

130
00:06:02,160 --> 00:06:05,743
var的属性，而这正是属性包装器的作用。 

131
00:06:06,950 --> 00:06:09,870
因此，让我们看看所采取的行动

132
00:06:09,870 --> 00:06:13,190
以及每个属性包装器的projectedValue 

133
00:06:13,190 --> 00:06:14,023
我们知道。 

134
00:06:15,927 --> 00:06:19,920
@State，我们已经在视图中多次看到了。 

135
00:06:19,920 --> 00:06:24,750
@State的wrappedValue实际上是任何东西， 

136
00:06:24,750 --> 00:06:27,840
任何var，可能都是值类型。 

137
00:06:27,840 --> 00:06:30,940
它做什么，它存储wrapdValue 

138
00:06:30,940 --> 00:06:32,520
在堆里。 

139
00:06:32,520 --> 00:06:34,060
这样就可以改变它

140
00:06:34,060 --> 00:06:35,550
因为通常我们的视图是只读的， 

141
00:06:35,550 --> 00:06:36,990
我们无法更改它们，但是如果它们存在于堆中

142
00:06:36,990 --> 00:06:38,710
我们可以在那改变它。 

143
00:06:38,710 --> 00:06:40,370
它也使视图无效

144
00:06:40,370 --> 00:06:43,090
每当wrapValue更改时。 

145
00:06:43,090 --> 00:06:46,570
现在它的projectedValue是多少，它的美元符号是什么？ 

146
00:06:46,570 --> 00:06:50,430
它不是发布者，称为绑定。 

147
00:06:50,430 --> 00:06:53,340
我们将在这里的几张幻灯片中讨论所有关于绑定的内容

148
00:06:53,340 --> 00:06:55,340
但是绑定本质上是一种方式

149
00:06:55,340 --> 00:06:58,830
将一个变量连接到另一个变量。 

150
00:06:58,830 --> 00:07:02,470
所以拿一个国家的美元价值

151
00:07:02,470 --> 00:07:04,840
让我们有一个可以使用的对象

152
00:07:04,840 --> 00:07:08,350
绑定到堆中的该值。 

153
00:07:08,350 --> 00:07:10,833
因此，我们将在一秒钟内看到Binding的含义。 

154
00:07:11,920 --> 00:07:14,470
下一个是ObservedObject。 

155
00:07:14,470 --> 00:07:16,920
ObservedObject的包装值是多少？ 

156
00:07:16,920 --> 00:07:20,490
它实现了ObservableObject协议， 

157
00:07:20,490 --> 00:07:22,550
基本上是ViewModels。 

158
00:07:22,550 --> 00:07:25,800
@ObservedObject结构做什么？ 

159
00:07:25,800 --> 00:07:27,610
好吧，它使视图无效

160
00:07:27,610 --> 00:07:29,850
每当包装的值或ViewModel 

161
00:07:29,850 --> 00:07:32,220
没有objectWillChange.send。 

162
00:07:32,220 --> 00:07:34,200
每当发生这种情况时，它都会重绘视图。 

163
00:07:34,200 --> 00:07:36,420
那就是ObservedObject所做的。 

164
00:07:36,420 --> 00:07:39,450
现在它的projectedValue是什么，它的美元符号是什么？ 

165
00:07:39,450 --> 00:07:42,880
它也是一个绑定，一个绑定到ViewModel的变量

166
00:07:44,170 --> 00:07:45,760
这真的很酷。 

167
00:07:45,760 --> 00:07:48,800
因此您可以在视图中绑定变量

168
00:07:48,800 --> 00:07:51,350
到ViewModel中的变量

169
00:07:51,350 --> 00:07:54,233
因此，如果其中一个发生更改，则另一个将被更新。 

170
00:07:55,170 --> 00:07:57,040
绑定本身又如何呢？ 

171
00:07:57,040 --> 00:07:59,480
所以我们还没有看到@Binding， 

172
00:07:59,480 --> 00:08:00,803
这是一个属性包装器。 

173
00:08:01,720 --> 00:08:05,070
@Binding的wrappedValue是一个值

174
00:08:05,070 --> 00:08:07,920
这与其他地方的其他事物有关。 

175
00:08:07,920 --> 00:08:11,340
就像它绑定到ViewModel的var一样， 

176
00:08:11,340 --> 00:08:15,000
它绑定到其他视图中的@State。 

177
00:08:15,000 --> 00:08:18,675
@Binding结构获取值并设置值

178
00:08:18,675 --> 00:08:20,230
通过获取和设置包装值

179
00:08:20,230 --> 00:08:22,250
这另一件事的价值。 

180
00:08:22,250 --> 00:08:23,883
这也会使视图无效。 

181
00:08:24,870 --> 00:08:28,720
那么，绑定的projectedValue是什么？ 

182
00:08:28,720 --> 00:08:33,010
它是自我，本质上是Binding本身。 

183
00:08:33,010 --> 00:08:36,540
如果您获得绑定的var的$， 

184
00:08:36,540 --> 00:08:39,200
您将获得绑定本身。 

185
00:08:39,200 --> 00:08:41,690
或者您可以认为它是对

186
00:08:41,690 --> 00:08:43,890
绑定所绑定的值， 

187
00:08:43,890 --> 00:08:45,583
但这本质上是自我。 

188
00:08:46,710 --> 00:08:49,410
让我们更多地讨论这些绑定，因为这是全新的。 

189
00:08:49,410 --> 00:08:50,720
我们在哪里使用绑定？ 

190
00:08:50,720 --> 00:08:52,730
我们到处都使用它们。 

191
00:08:52,730 --> 00:08:54,150
而且我什至不去浏览这个列表， 

192
00:08:54,150 --> 00:08:56,490
太详尽了，有很多东西

193
00:08:56,490 --> 00:08:59,100
我们用于绑定。 

194
00:08:59,100 --> 00:09:01,900
但我要说说为什么我们有绑定

195
00:09:01,900 --> 00:09:04,730
为什么我们用它们来做所有这些事情。 

196
00:09:04,730 --> 00:09:08,530
绑定是最重要的事情之一

197
00:09:08,530 --> 00:09:12,200
在SwiftUI的MVVM反应式UI结构中， 

198
00:09:12,200 --> 00:09:15,677
这是关于获得数据真相的唯一来源。 

199
00:09:15,677 --> 00:09:18,500
这是如此重要。 

200
00:09:18,500 --> 00:09:21,830
如果我们的模型中有数据，则它希望存在于我们的模型中， 

201
00:09:21,830 --> 00:09:25,560
我们不希望它在视图中重复出现，对吗？ 

202
00:09:25,560 --> 00:09:29,080
如果我们在一个视图中有信息，则在@State中

203
00:09:29,080 --> 00:09:31,627
我们在@View的另一个View中有信息， 

204
00:09:31,627 --> 00:09:34,100
如果这是相同的信息， 

205
00:09:34,100 --> 00:09:35,720
他们应该互相绑定

206
00:09:35,720 --> 00:09:39,170
而不是其中一个试图复制另一个

207
00:09:39,170 --> 00:09:41,150
而且，真相是哪一个？ 

208
00:09:41,150 --> 00:09:42,340
不能说。 

209
00:09:42,340 --> 00:09:44,890
所以绑定是关于创建变量的

210
00:09:44,890 --> 00:09:46,690
将事物连接在一起

211
00:09:46,690 --> 00:09:49,870
这样只有一个地方有真实的事实

212
00:09:49,870 --> 00:09:52,570
以及我们是否在谈论模型中的真相

213
00:09:52,570 --> 00:09:55,467
还是我们只是在观点中谈论真理

214
00:09:55,467 --> 00:09:58,080
因为我们的视图中可能有临时状态， 

215
00:09:58,080 --> 00:10:00,280
我们知道@State可以做到这一点， 

216
00:10:00,280 --> 00:10:03,133
我们也只想要一个真理来源。 

217
00:10:05,500 --> 00:10:08,250
所以，让我们告诉你我的意思

218
00:10:08,250 --> 00:10:11,640
当我说观点之间的真理来源时。 

219
00:10:11,640 --> 00:10:14,865
所以在这里我有一个View MyView 

220
00:10:14,865 --> 00:10:17,090
它有一些@States，一些String， 

221
00:10:17,090 --> 00:10:19,870
myString被调用，初始化为“ Hello”。 

222
00:10:19,870 --> 00:10:20,960
然后我有另一种观点， 

223
00:10:20,960 --> 00:10:23,840
完全不同的View在底部，OtherView， 

224
00:10:23,840 --> 00:10:26,400
它有一个var sharedText， 

225
00:10:26,400 --> 00:10:29,590
它的主体只是显示sharedText是文本， 

226
00:10:29,590 --> 00:10:33,300
但是该变量用@Binding包裹。 

227
00:10:33,300 --> 00:10:37,400
因此，在MyView的上方，它的主体中使用了OtherView 

228
00:10:37,400 --> 00:10:39,080
当然，当它创建OtherView时

229
00:10:39,080 --> 00:10:42,010
它必须初始化所有未初始化的变量

230
00:10:42,010 --> 00:10:45,750
在OtherView中，第一个是var sharedText。 

231
00:10:45,750 --> 00:10:47,970
那sharedText的类型是什么？ 

232
00:10:47,970 --> 00:10:50,920
这是对字符串的绑定。 

233
00:10:50,920 --> 00:10:54,210
那么我该如何将绑定传递给字符串？ 

234
00:10:54,210 --> 00:10:57,610
我要使用@State的$。 

235
00:10:57,610 --> 00:11:00,760
我告诉你@State的$给你绑定

236
00:11:00,760 --> 00:11:02,260
达到该州的价值。 

237
00:11:02,260 --> 00:11:04,880
所以如果我说$ myString，我有一个绑定， 

238
00:11:04,880 --> 00:11:09,321
大写B绑定到该字符串myString。 

239
00:11:09,321 --> 00:11:13,250
现在，OtherView有该字符串，MyView有该字符串， 

240
00:11:13,250 --> 00:11:16,360
但事实的根源是MyView的版本

241
00:11:16,360 --> 00:11:17,920
他们中的任何一个都可以更改它。 

242
00:11:17,920 --> 00:11:20,370
OtherView可以更改sharedText 

243
00:11:20,370 --> 00:11:23,180
那会改变MyView中的myString， 

244
00:11:23,180 --> 00:11:25,460
当然，MyView可以更改MyString 

245
00:11:25,460 --> 00:11:27,990
它将显示在OtherView中。 

246
00:11:27,990 --> 00:11:29,680
所以没有，你不复制

247
00:11:29,680 --> 00:11:33,290
创建OtherView时，实际上是将其绑定到它。 

248
00:11:33,290 --> 00:11:35,400
我们今天将在演示中看到这一点。 

249
00:11:35,400 --> 00:11:39,810
这是了解数据流如何工作的基础

250
00:11:39,810 --> 00:11:42,650
在Swift中是要了解我们想要单一的真理来源

251
00:11:42,650 --> 00:11:44,823
我们一定会做到这一点。 

252
00:11:45,920 --> 00:11:47,210
您还可以绑定其他东西。 

253
00:11:47,210 --> 00:11:50,300
您可以通过执行Binding.constant绑定到常量值

254
00:11:50,300 --> 00:11:51,810
并提供价值。 

255
00:11:51,810 --> 00:11:55,690
您甚至可以计算Binding的值， 

256
00:11:55,690 --> 00:11:57,420
换句话说，执行关闭

257
00:11:57,420 --> 00:11:59,037
当您尝试获取绑定的值时

258
00:11:59,037 --> 00:12:01,500
然后在尝试设置另一个关闭时执行它。 

259
00:12:01,500 --> 00:12:04,400
这感觉很像计算属性。 

260
00:12:04,400 --> 00:12:06,550
这是一个高级主题，您无需这样做

261
00:12:06,550 --> 00:12:09,080
在这堂课上，但我只想让你理解

262
00:12:09,080 --> 00:12:11,870
绑定是如何工作的，只是在连接

263
00:12:11,870 --> 00:12:15,060
一些数据，这些数据也可能是闭包， 

264
00:12:15,060 --> 00:12:18,850
就像计算出的var的数据是闭包一样。 

265
00:12:18,850 --> 00:12:21,100
让我们谈谈另一个属性包装器。 

266
00:12:21,100 --> 00:12:23,470
我们知道@State，我们知道@ObservedObject， 

267
00:12:23,470 --> 00:12:25,360
现在我们知道了@Binding。 

268
00:12:25,360 --> 00:12:27,950
这是另一个@EnvironmentObject。 

269
00:12:29,179 --> 00:12:34,050
@EnvironmentObject与@ObservedObject几乎相同

270
00:12:34,960 --> 00:12:38,740
但您将ViewModel传递给View 

271
00:12:38,740 --> 00:12:40,470
以某种不同的方式。 

272
00:12:40,470 --> 00:12:43,520
我们知道，当我们有一个View并有一个ViewModel时， 

273
00:12:43,520 --> 00:12:46,063
我们有一个var，它是一个@ObservedObject， 

274
00:12:47,110 --> 00:12:50,880
我们通常通过将其传递给View来对其进行初始化

275
00:12:50,880 --> 00:12:52,530
当我们创建视图时。 

276
00:12:52,530 --> 00:12:54,960
我们已经通过EmojiArt文档做到了这一点， 

277
00:12:54,960 --> 00:12:56,020
我们在记忆中做到了

278
00:12:56,020 --> 00:12:59,300
我们实际上称它为viewModel，有点傻， 

279
00:12:59,300 --> 00:13:01,260
但这就是我们的做法。 

280
00:13:01,260 --> 00:13:04,710
所以@EnvironmentObject在做同样的事情， 

281
00:13:04,710 --> 00:13:07,490
它在您的视图中持有您的ViewModel 

282
00:13:07,490 --> 00:13:10,440
但是您通过调用此函数.environmentObject来传递它

283
00:13:11,810 --> 00:13:15,200
在视图上以ViewModel作为参数。 

284
00:13:15,200 --> 00:13:17,800
因此，您实质上是在设置ViewModel 

285
00:13:17,800 --> 00:13:21,383
如果想这样的话，可以使用ViewModifier。 

286
00:13:22,510 --> 00:13:23,850
现在这两者有什么区别？ 

287
00:13:23,850 --> 00:13:25,460
他们为什么有这两种不同的方式

288
00:13:25,460 --> 00:13:27,690
完全一样吗？ 

289
00:13:27,690 --> 00:13:30,780
好吧，EnvironmentObjects具有这个非常酷的功能

290
00:13:30,780 --> 00:13:34,250
那就是你体内所有的视野， 

291
00:13:34,250 --> 00:13:36,700
如果您有一个EnvironmentObject， 

292
00:13:36,700 --> 00:13:38,970
他们也都得到那个EnvironmentObject 

293
00:13:38,970 --> 00:13:41,850
无需说.environmentObject。 

294
00:13:41,850 --> 00:13:45,132
类似于，如果我们有.foregroundColor 

295
00:13:45,132 --> 00:13:47,010
在ZStack上，就像

296
00:13:47,010 --> 00:13:48,330
我们正在呼叫.foregroundColor 

297
00:13:48,330 --> 00:13:50,794
在ZStack内部的每件事上。 

298
00:13:50,794 --> 00:13:51,720
事实并非如此

299
00:13:51,720 --> 00:13:53,450
但是有点像

300
00:13:53,450 --> 00:13:54,720
这里也是一样。 

301
00:13:54,720 --> 00:13:56,740
如果视图中有EnvironmentObject 

302
00:13:56,740 --> 00:13:58,380
就像这个身体中的所有视图

303
00:13:58,380 --> 00:14:01,070
那里有.environmentObject。 

304
00:14:01,070 --> 00:14:04,930
有一个明显的例外，那就是模式视图

305
00:14:04,930 --> 00:14:08,300
我们稍后再讨论模态视图

306
00:14:08,300 --> 00:14:10,970
我不知道下一堂课还是下一堂课， 

307
00:14:10,970 --> 00:14:13,580
但是这类视图，弹出窗口，警报， 

308
00:14:13,580 --> 00:14:15,720
这样的事情，他们不会自动

309
00:14:15,720 --> 00:14:17,873
获取传递给他们的EnvironmentObject。 

310
00:14:18,950 --> 00:14:22,339
对EnvironmentObject的另一个轻微限制

311
00:14:22,339 --> 00:14:25,710
是您只能有一个EnvironmentObject包装器

312
00:14:25,710 --> 00:14:30,710
每个视图中ViewModel的每种类型。 

313
00:14:31,010 --> 00:14:34,110
没有很大的限制，但您不能

314
00:14:34,110 --> 00:14:36,220
同一视图中的两个@EnvironmentObjects 

315
00:14:36,220 --> 00:14:40,550
都是记住ViewModels。 

316
00:14:40,550 --> 00:14:42,220
我们可以有一个是Memorize的ViewModel， 

317
00:14:42,220 --> 00:14:43,750
一个就是EmojiArt ViewModel 

318
00:14:43,750 --> 00:14:45,420
但他们不可能完全一样。 

319
00:14:45,420 --> 00:14:47,790
那里的限制很小。 

320
00:14:47,790 --> 00:14:50,620
因此，让我们对EnvironmentObject进行相同的处理

321
00:14:50,620 --> 00:14:51,660
我们给了其他的。 

322
00:14:51,660 --> 00:14:53,110
它的wrappedValue是什么？ 

323
00:14:53,110 --> 00:14:57,260
与ObservedObject相同，就是任何ObservableObject， 

324
00:14:57,260 --> 00:14:59,850
但是它是通过.environmentObject获得的

325
00:14:59,850 --> 00:15:02,320
而不是作为var传递。 

326
00:15:02,320 --> 00:15:05,320
这个EnvironmentObject结构如何工作？ 

327
00:15:05,320 --> 00:15:08,110
当wrapdValue值使View失效时

328
00:15:08,110 --> 00:15:09,600
没有objectWillChange.send 

329
00:15:09,600 --> 00:15:11,910
与ObservedObject完全相同。 

330
00:15:11,910 --> 00:15:13,660
它的预计价值是多少？ 

331
00:15:13,660 --> 00:15:15,370
同样，与ObservedObject一样， 

332
00:15:15,370 --> 00:15:18,880
您可以使用$获得ViewModel的变量。 

333
00:15:20,710 --> 00:15:24,370
另外一个属性包装器称为@Environment。 

334
00:15:24,370 --> 00:15:27,389
这与EnvironmentObject无关。 

335
00:15:27,389 --> 00:15:28,620
这是完全不同的事情。 

336
00:15:28,620 --> 00:15:29,910
清除您的想法。 

337
00:15:29,910 --> 00:15:32,920
他们有相同的第一个词，但它们是不同的东西。 

338
00:15:32,920 --> 00:15:36,310
那么准备好迎接完全不同的事情了吗？ 

339
00:15:36,310 --> 00:15:39,410
首先，我必须向您解释属性包装器

340
00:15:39,410 --> 00:15:42,377
甚至可以包含比包装值更多的变量

341
00:15:42,377 --> 00:15:43,820
和projectedValue。 

342
00:15:43,820 --> 00:15:46,580
现在，如果您有更多属性，则可能需要设置它们

343
00:15:46,580 --> 00:15:50,442
就像我们在其他结构中未设置var 

344
00:15:50,442 --> 00:15:51,290
我们可能有同样的事情。 

345
00:15:51,290 --> 00:15:53,490
那么，您如何传递呢？ 

346
00:15:53,490 --> 00:15:56,410
好了，当您创建属性包装器时

347
00:15:56,410 --> 00:16:01,410
像@Environment一样，在括号中放入变量。 

348
00:16:01,920 --> 00:16:04,740
现在，就像其他任何结构一样， 

349
00:16:04,740 --> 00:16:07,060
您可以摆脱参数上的标签

350
00:16:07,060 --> 00:16:10,140
这是完全有可能的，环境可以做到这一点。 

351
00:16:10,140 --> 00:16:11,900
所以环境接受了这一论点， 

352
00:16:11,900 --> 00:16:14,730
现在，那里的论点是你要给它

353
00:16:14,730 --> 00:16:17,350
它会使用以下命令设置其内部变量之一

354
00:16:17,350 --> 00:16:22,350
是进入EnvironmentValues结构的关键路径。 

355
00:16:23,020 --> 00:16:26,030
因此，您只是要查找EnvironmentValues 

356
00:16:26,030 --> 00:16:30,810
在文档中，您将看到一长串的清单

357
00:16:30,810 --> 00:16:33,670
您可以了解有关您的环境的信息。 

358
00:16:33,670 --> 00:16:36,660
例如，这里我使用关键路径.colorScheme 

359
00:16:38,031 --> 00:16:39,170
等等EnvironmentValues.colorScheme 

360
00:16:40,780 --> 00:16:43,870
是当前的亮模式还是暗模式

361
00:16:43,870 --> 00:16:47,393
本质上就是您所运行的环境。 

362
00:16:48,550 --> 00:16:51,729
现在，请注意那里的配色方案， 

363
00:16:51,729 --> 00:16:54,400
@Environment colorScheme，上面写着var colorScheme， 

364
00:16:54,400 --> 00:16:56,040
它没有说类型。 

365
00:16:56,040 --> 00:16:58,180
那里没有冒号。 

366
00:16:58,180 --> 00:17:00,610
完全可以用于属性包装器

367
00:17:00,610 --> 00:17:04,490
在内部设置wrapdValue的类型。 

368
00:17:04,490 --> 00:17:06,170
这就是环境所做的

369
00:17:06,170 --> 00:17:09,220
并在那里设置var的类型， 

370
00:17:09,220 --> 00:17:13,480
这种情况下的colorScheme，不管是什么类型

371
00:17:13,480 --> 00:17:16,240
传递给它的关键路径。 

372
00:17:16,240 --> 00:17:19,180
例如，环境值中的colorScheme 

373
00:17:19,180 --> 00:17:22,940
是ColorScheme类型，大写C，大写S， 

374
00:17:22,940 --> 00:17:25,637
这是一个枚举，该枚举只有两个值， 

375
00:17:25,637 --> 00:17:27,570
.dark和.light。 

376
00:17:27,570 --> 00:17:29,310
这只是告诉您是否处于暗模式

377
00:17:29,310 --> 00:17:30,719
或灯光模式。 

378
00:17:30,719 --> 00:17:32,130
因此，这真的很棒，因为绘制视图时

379
00:17:32,130 --> 00:17:34,540
您可以知道您所处的模式。 

380
00:17:34,540 --> 00:17:36,500
然后还有许多其他事情。 

381
00:17:36,500 --> 00:17:39,030
这一切都与EnvironmentValues结构有关。 

382
00:17:39,030 --> 00:17:42,020
去那里看看，你甚至可以

383
00:17:42,020 --> 00:17:44,550
你自己的，我们不会谈论如何做的， 

384
00:17:44,550 --> 00:17:46,770
使用扩展名是可能的

385
00:17:46,770 --> 00:17:50,600
将环境值添加到EnvironmentValues。 

386
00:17:50,600 --> 00:17:51,960
再次相同的待遇， 

387
00:17:51,960 --> 00:17:54,330
环境的包装价值是多少？ 

388
00:17:54,330 --> 00:17:58,300
它是EnvironmentValues中某些var的值。 

389
00:17:58,300 --> 00:18:01,050
环境做什么，那个结构做什么

390
00:18:01,050 --> 00:18:02,250
当你得到和设置？ 

391
00:18:02,250 --> 00:18:05,200
它在EnvironmentValues中设置并获取该值。 

392
00:18:05,200 --> 00:18:07,300
它的projectedValue是多少？ 

393
00:18:07,300 --> 00:18:08,560
没有。 

394
00:18:08,560 --> 00:18:12,750
允许属性包装器没有projectedValue 

395
00:18:12,750 --> 00:18:15,583
@Environment确实没有projectedValue。 

396
00:18:19,040 --> 00:18:20,650
发布者。 

397
00:18:20,650 --> 00:18:24,290
因此，再说一次，发布者，非常深刻的话题，有很多话要说。 

398
00:18:24,290 --> 00:18:25,970
我们不会花所有的时间

399
00:18:25,970 --> 00:18:26,820
我们今天要谈。 

400
00:18:26,820 --> 00:18:28,430
我要给你点光疗

401
00:18:28,430 --> 00:18:30,720
概述，以便您有个好主意

402
00:18:30,720 --> 00:18:32,713
通常，这是全部有关的内容。 

403
00:18:34,010 --> 00:18:36,580
因此Publisher在概念上非常简单。 

404
00:18:36,580 --> 00:18:40,250
它的声明看起来像这样。 

405
00:18:40,250 --> 00:18:43,360
具有两个无关位的发布商，蓝色的输出， 

406
00:18:43,360 --> 00:18:45,140
红色在那里失败。 

407
00:18:45,140 --> 00:18:47,480
输出只是某种类型

408
00:18:47,480 --> 00:18:50,330
该发布者定期发出的信息。 

409
00:18:50,330 --> 00:18:53,680
它将其发布到世界各地。 

410
00:18:53,680 --> 00:18:57,650
而失败是结构或信息的类型

411
00:18:57,650 --> 00:19:01,420
它给出了是否应该发布失败的信息

412
00:19:01,420 --> 00:19:02,640
无论出于什么原因。 

413
00:19:02,640 --> 00:19:04,400
也许是通过网络发布内容

414
00:19:04,400 --> 00:19:05,900
网络连接中断

415
00:19:05,900 --> 00:19:09,510
例如，它必须失败并告诉您发生了什么。 

416
00:19:09,510 --> 00:19:12,730
常见的失败是永不失败， 

417
00:19:12,730 --> 00:19:14,680
您会看到绿色永不在那里。 

418
00:19:14,680 --> 00:19:17,580
那失败意味着我永远不会失败， 

419
00:19:17,580 --> 00:19:20,810
我发布了我的价值观，啦啦啦，我正在发布它们

420
00:19:20,810 --> 00:19:23,020
我永远不会失败，没有错

421
00:19:23,020 --> 00:19:24,790
那会导致我失败。 

422
00:19:24,790 --> 00:19:27,660
这是相当常见的故障模式。 

423
00:19:27,660 --> 00:19:28,493
我们可以与发布者一起做什么？ 

424
00:19:28,493 --> 00:19:30,440
我们有一个发布商，我们知道它已发布

425
00:19:30,440 --> 00:19:32,540
某种类型的东西，它可能会失败

426
00:19:32,540 --> 00:19:35,530
如果出现某种故障，我们该怎么办？ 

427
00:19:35,530 --> 00:19:38,270
好吧，我们与发布商合作的第一件事， 

428
00:19:38,270 --> 00:19:39,730
是我们听他们的。 

429
00:19:39,730 --> 00:19:41,027
我们倾听正在发布的价值观

430
00:19:41,027 --> 00:19:42,930
我们用价值观来做些事情。 

431
00:19:42,930 --> 00:19:46,083
这就是发布者存在的原因，因此我们可以听听他们的意见。 

432
00:19:47,270 --> 00:19:50,240
但是我们也经常在改变价值观

433
00:19:50,240 --> 00:19:52,660
即时从发布商那里出来的

434
00:19:52,660 --> 00:19:55,550
采取行动，将其转换为发布内容

435
00:19:55,550 --> 00:19:58,520
与通常发布的内容略有不同， 

436
00:19:58,520 --> 00:20:00,450
有点按摩

437
00:20:00,450 --> 00:20:03,590
定期提供我们真正想要的。 

438
00:20:03,590 --> 00:20:07,130
因此，许多API Publisher都涉及到对其进行转换

439
00:20:07,130 --> 00:20:09,060
我们也可以穿梭它的价值观

440
00:20:09,060 --> 00:20:12,583
有点像进入其他地方，以及它们出来。 

441
00:20:14,170 --> 00:20:15,640
还有很多，但是再次， 

442
00:20:15,640 --> 00:20:17,310
我不会谈论任何事情

443
00:20:17,310 --> 00:20:18,783
但是今天的基础知识。 

444
00:20:20,180 --> 00:20:22,080
因此，让我们谈谈聆听发布商

445
00:20:22,080 --> 00:20:23,370
我们称之为订阅。 

446
00:20:23,370 --> 00:20:26,190
有一个称为“订户”的完整协议。 

447
00:20:26,190 --> 00:20:28,150
我只想谈两种方式

448
00:20:28,150 --> 00:20:29,480
订阅发布者， 

449
00:20:29,480 --> 00:20:33,060
有两种最常见的方法可以做到这一点。 

450
00:20:33,060 --> 00:20:36,080
一种是执行关闭

451
00:20:36,080 --> 00:20:38,720
每当发布者发布其数据时

452
00:20:38,720 --> 00:20:40,890
或完成时，要么是因为失败

453
00:20:40,890 --> 00:20:42,750
或者它只是正常完成。 

454
00:20:42,750 --> 00:20:45,230
该函数的名称是.sink， 

455
00:20:45,230 --> 00:20:48,650
这是发布服务器上的功能，例如.sink， 

456
00:20:48,650 --> 00:20:49,715
它有两个参数， 

457
00:20:49,715 --> 00:20:51,758
receiveCompletion，需要关闭， 

458
00:20:51,758 --> 00:20:54,168
和receiveValue，需要关闭。 

459
00:20:54,168 --> 00:20:58,566
将为receiveCompletion关闭提供完成枚举。 

460
00:20:58,566 --> 00:21:00,710
完成枚举基本上有两种状态， 

461
00:21:00,710 --> 00:21:02,010
成功还是失败

462
00:21:02,010 --> 00:21:03,940
如果失败，则具有关联的值

463
00:21:03,940 --> 00:21:07,070
无论故障信息是什么。 

464
00:21:07,070 --> 00:21:09,230
然后，receiveValue，这只是一个关闭

465
00:21:09,230 --> 00:21:11,840
这需要最后发射的东西。 

466
00:21:11,840 --> 00:21:14,093
因此，随着发布商释放其价值， 

467
00:21:14,093 --> 00:21:15,750
它不断地排放它们， 

468
00:21:15,750 --> 00:21:19,400
这个rec​​eiveValue闭包一直在被调用

469
00:21:19,400 --> 00:21:20,990
直到失败或完成

470
00:21:20,990 --> 00:21:23,100
然后另一个人被叫。 

471
00:21:23,100 --> 00:21:24,810
现在要注意的一件事是

472
00:21:24,810 --> 00:21:28,810
如果发布者的失败是“从不”，那么它就永远不会失败， 

473
00:21:28,810 --> 00:21:30,010
那你可以打电话给水槽

474
00:21:30,010 --> 00:21:32,250
没有指定receiveCompletion， 

475
00:21:32,250 --> 00:21:34,980
因为它永远不会调用您的receiveCompletion 

476
00:21:34,980 --> 00:21:37,270
因为它永远不会完成，永远不会失败， 

477
00:21:37,270 --> 00:21:39,143
所以你可以跳过它。 

478
00:21:40,270 --> 00:21:42,453
再一次，这是很常见的事情。 

479
00:21:44,360 --> 00:21:47,330
注意这里的水槽返回了一些东西

480
00:21:47,330 --> 00:21:48,750
我把它做成紫色

481
00:21:48,750 --> 00:21:51,360
因为它实际上非常重要。 

482
00:21:51,360 --> 00:21:52,920
它返回的东西， 

483
00:21:52,920 --> 00:21:55,680
实现此可取消协议， 

484
00:21:55,680 --> 00:21:58,200
这是一个非常简单的协议， 

485
00:21:58,200 --> 00:22:00,540
但很多时候它会被擦除

486
00:22:00,540 --> 00:22:03,100
接收器会在键入的地方擦除返回值

487
00:22:03,100 --> 00:22:04,750
成为AnyCancellable。 

488
00:22:04,750 --> 00:22:06,560
就像我们对过渡所做的一样，对

489
00:22:06,560 --> 00:22:09,350
我们有AnyTransition使它更易于处理， 

490
00:22:09,350 --> 00:22:10,183
这里也是一样。 

491
00:22:10,183 --> 00:22:13,000
因此，接收器将返回AnyCancellable。 

492
00:22:13,000 --> 00:22:15,770
我们回来这件紫色的东西的目的是什么

493
00:22:15,770 --> 00:22:18,720
从接收器功能？ 

494
00:22:18,720 --> 00:22:19,780
好吧，有两个目的。 

495
00:22:19,780 --> 00:22:22,230
第一，您可以将.cancel发送给它， 

496
00:22:22,230 --> 00:22:25,310
这就是可取消协议.cancel中的内容， 

497
00:22:25,310 --> 00:22:27,870
如果你在这个紫色的东西上调用取消功能

498
00:22:27,870 --> 00:22:29,830
然后它将停止下沉， 

499
00:22:29,830 --> 00:22:32,400
该接收器将停止执行其中的闭包， 

500
00:22:32,400 --> 00:22:33,630
这样它就消失了

501
00:22:33,630 --> 00:22:36,400
基本上停止订阅该发布者。 

502
00:22:36,400 --> 00:22:37,360
这很有价值。 

503
00:22:37,360 --> 00:22:39,300
有点惊讶，我们不经常这样做

504
00:22:39,300 --> 00:22:41,220
但它仍然很有价值。 

505
00:22:41,220 --> 00:22:46,220
但是B很重要，因为它可以使.sink保持活动状态。 

506
00:22:46,500 --> 00:22:50,880
所以只要var cancellable存在

507
00:22:50,880 --> 00:22:52,683
然后水槽不断下沉。 

508
00:22:53,800 --> 00:22:57,430
因此，cancellable在这里永远不会是局部变量。 

509
00:22:57,430 --> 00:22:58,740
如果您将其设为局部变量

510
00:22:58,740 --> 00:23:01,040
然后方法完成后， 

511
00:23:01,040 --> 00:23:02,710
您所完成的功能

512
00:23:02,710 --> 00:23:05,050
水槽将停止下沉。 

513
00:23:05,050 --> 00:23:08,280
几乎可以取消的属性

514
00:23:08,280 --> 00:23:11,290
结构或类上的实例变量

515
00:23:11,290 --> 00:23:13,700
那会让水槽持续下去

516
00:23:13,700 --> 00:23:16,980
只要该结构或类持续存在

517
00:23:16,980 --> 00:23:19,180
因为那个结构或类消失了， 

518
00:23:19,180 --> 00:23:21,830
不再使用，那么它的vars当然

519
00:23:21,830 --> 00:23:22,910
离开它

520
00:23:22,910 --> 00:23:25,027
当它的var是这些可取消对象之一时

521
00:23:25,027 --> 00:23:26,180
它消失了

522
00:23:26,180 --> 00:23:28,330
接收器将停止监听发布者

523
00:23:28,330 --> 00:23:30,980
这正是您想要的。 

524
00:23:30,980 --> 00:23:34,190
因此，接收器的返回值用于取消

525
00:23:34,190 --> 00:23:37,840
但更重要的是，它用来决定

526
00:23:37,840 --> 00:23:41,260
接收器继续收听发布者的时间。 

527
00:23:41,260 --> 00:23:43,940
只要那个var存在于某个地方， 

528
00:23:43,940 --> 00:23:45,390
它会继续听。 

529
00:23:46,930 --> 00:23:49,730
我们讨论了接收器作为收听发布者的一种方法。 

530
00:23:49,730 --> 00:23:52,970
另一种方法是让View监听发布者。 

531
00:23:52,970 --> 00:23:54,520
这非常简单。 

532
00:23:54,520 --> 00:23:58,780
在View上有一个名为.onReceive的ViewModifier， 

533
00:23:58,780 --> 00:24:02,090
你给它的出版商和关闭

534
00:24:02,090 --> 00:24:03,380
还有关于关闭的论点

535
00:24:03,380 --> 00:24:05,610
是发布者发出的东西

536
00:24:05,610 --> 00:24:07,110
这个闭包将被称为

537
00:24:07,110 --> 00:24:09,020
出版商每次发布

538
00:24:09,020 --> 00:24:12,860
并且您的视图将失效，从而导致其重新绘制。 

539
00:24:12,860 --> 00:24:15,420
这是一个很棒的小功能。 

540
00:24:15,420 --> 00:24:18,610
将View连接到某些数据源的好方法

541
00:24:18,610 --> 00:24:20,560
每次数据发布

542
00:24:20,560 --> 00:24:22,408
糟糕，您的View会执行某些操作。 

543
00:24:22,408 --> 00:24:24,030
你知道的，你把任何你想要的代码都放在那里

544
00:24:24,030 --> 00:24:27,000
做任何你想做的事情

545
00:24:27,000 --> 00:24:28,780
然后您也会被重画。 

546
00:24:28,780 --> 00:24:31,543
这只是一个很棒的小功能。 

547
00:24:33,010 --> 00:24:34,220
出版商来自哪里？ 

548
00:24:34,220 --> 00:24:35,900
如何获得出版商的控股权？ 

549
00:24:35,900 --> 00:24:38,030
他们听起来很棒，但我在哪里可以买到？ 

550
00:24:38,030 --> 00:24:40,140
好吧，有很多地方可以拿到一个。 

551
00:24:40,140 --> 00:24:42,500
我将在这里讨论一些最常见的问题。 

552
00:24:42,500 --> 00:24:47,500
一个是@published的$，projectedValue。 

553
00:24:48,660 --> 00:24:50,700
好的，您正在发布ViewModel 

554
00:24:50,700 --> 00:24:54,610
一堆其变量，您可以使用$ 

555
00:24:54,610 --> 00:24:57,860
获取发布商并找出何时发生了变化。 

556
00:24:57,860 --> 00:24:58,693
我们要进行演示， 

557
00:24:58,693 --> 00:25:01,630
这是一个非常可能是最常见的来源

558
00:25:01,630 --> 00:25:04,640
在获取发布商的意见中。 

559
00:25:04,640 --> 00:25:06,760
但是其他一些对象也有这个。 

560
00:25:06,760 --> 00:25:10,550
URLSession有一个，我们简短地讨论了这是什么， 

561
00:25:10,550 --> 00:25:13,070
那是为了从网络上获取数据。 

562
00:25:13,070 --> 00:25:15,110
本质上，作为发布者，您可以为其指定一个URL 

563
00:25:15,110 --> 00:25:17,800
并发布它获取的数据

564
00:25:17,800 --> 00:25:20,170
准备好之后，那真的很酷。 

565
00:25:20,170 --> 00:25:21,780
计时器是另一个。 

566
00:25:21,780 --> 00:25:25,290
计时器，其发布者将发布当前日期和时间

567
00:25:25,290 --> 00:25:27,270
无论您说多少次。 

568
00:25:27,270 --> 00:25:29,530
这样您就可以发布当前日期和时间

569
00:25:29,530 --> 00:25:32,800
作为Date对象，这是它的发布类型， 

570
00:25:32,800 --> 00:25:35,670
每十分之一秒，每百分之一秒

571
00:25:35,670 --> 00:25:37,610
每小时，无论您想要什么

572
00:25:37,610 --> 00:25:40,630
并且会定期发布。 

573
00:25:40,630 --> 00:25:42,760
还有另一件事叫做NotificationCenter。 

574
00:25:42,760 --> 00:25:45,410
它告诉您系统中正在发生的事情， 

575
00:25:45,410 --> 00:25:47,440
当系统中发生事情时

576
00:25:47,440 --> 00:25:48,880
您可以在那里建立发布商

577
00:25:48,880 --> 00:25:51,700
它将发布这些称为通知的东西

578
00:25:51,700 --> 00:25:53,330
您可以了解发生了什么。 

579
00:25:53,330 --> 00:25:56,083
所以那是另一个很酷的发布者。 

580
00:25:58,010 --> 00:25:59,240
因此，我们还有很多事情可以做。 

581
00:25:59,240 --> 00:26:01,100
就像我说的，我今天的目标， 

582
00:26:01,100 --> 00:26:02,440
在这些幻灯片和演示中， 

583
00:26:02,440 --> 00:26:04,870
只是为了使您了解发布者是什么。 

584
00:26:04,870 --> 00:26:07,610
我不会详尽地谈论数十个

585
00:26:07,610 --> 00:26:09,850
以及Publisher中的许多方法

586
00:26:09,850 --> 00:26:13,120
我当然建议您去查阅文档

587
00:26:13,120 --> 00:26:14,860
给发布商，然后看看那里， 

588
00:26:14,860 --> 00:26:16,330
只是为了让您了解其中的内容

589
00:26:16,330 --> 00:26:18,430
因为那里有很多东西。 

590
00:26:18,430 --> 00:26:20,960
希望我即将做的演示， 

591
00:26:20,960 --> 00:26:22,890
这将与Publisher一起做一些事情， 

592
00:26:22,890 --> 00:26:24,310
会给你更具体的感觉

593
00:26:24,310 --> 00:26:27,040
我们如何使用这些小数据发布者。 

594
00:26:27,040 --> 00:26:31,930
顺便说一句，Publisher也处于同一服务中

595
00:26:31,930 --> 00:26:33,930
真理的唯一来源。 

596
00:26:33,930 --> 00:26:36,230
发布者想要发布数据

597
00:26:36,230 --> 00:26:38,700
来自数据的实际来源

598
00:26:38,700 --> 00:26:40,500
然后消费者只是在消费它

599
00:26:40,500 --> 00:26:42,530
即时发布。 

600
00:26:42,530 --> 00:26:45,023
因此，这实际上也是该工作的一部分。 

601
00:26:47,070 --> 00:26:48,840
因此，让我们深入研究该演示。 

602
00:26:48,840 --> 00:26:51,390
你可以在这里读到我要做什么

603
00:26:51,390 --> 00:26:54,373
但主要是关于发布者和绑定。 

604
00:26:55,240 --> 00:26:57,840
但是，我们将首先修复一些问题

605
00:26:57,840 --> 00:27:00,540
用户界面中的草率行为

606
00:27:00,540 --> 00:27:03,630
我要在这里运行该应用程序

607
00:27:03,630 --> 00:27:06,600
我希望您在启动时仔细观察

608
00:27:06,600 --> 00:27:08,370
从白色背景开始

609
00:27:08,370 --> 00:27:11,290
因为它必须加载背景图片

610
00:27:11,290 --> 00:27:14,530
但是这样做的同时，它仍然显示所有表情符号

611
00:27:14,530 --> 00:27:16,610
该文件上的内容。 

612
00:27:16,610 --> 00:27:18,220
我认为这看起来很糟糕。 

613
00:27:18,220 --> 00:27:19,580
因此，让我们来看一下。 

614
00:27:19,580 --> 00:27:20,760
看，我们去了。 

615
00:27:20,760 --> 00:27:22,770
然后出现。 

616
00:27:22,770 --> 00:27:24,771
因此，实际上我们不希望它这样做。 

617
00:27:24,771 --> 00:27:26,690
每次我们添加新图像时都会发生这种情况。 

618
00:27:26,690 --> 00:27:28,150
如果我将图像更改为此， 

619
00:27:28,150 --> 00:27:31,930
我们获得了带有表情符号的瞬时白色背景。 

620
00:27:31,930 --> 00:27:34,370
所以我真的只想显示这些表情符号

621
00:27:34,370 --> 00:27:37,123
加载时。 

622
00:27:38,100 --> 00:27:42,833
那么，我将如何发现这种情况？ 

623
00:27:43,730 --> 00:27:44,620
很简单

624
00:27:44,620 --> 00:27:46,720
只是要去我的观点在这里。 

625
00:27:46,720 --> 00:27:50,240
这是ForEach，其中显示了所有表情符号。 

626
00:27:50,240 --> 00:27:53,523
我只是说，如果我不加载， 

627
00:27:55,360 --> 00:27:57,513
然后继续显示我的表情符号。 

628
00:28:00,660 --> 00:28:05,090
那么我怎么知道我正在加载背景图像？ 

629
00:28:05,090 --> 00:28:08,080
实际上，可以很直接地进行检测。 

630
00:28:08,080 --> 00:28:12,510
Var isLoading是一个布尔，我要返回

631
00:28:12,510 --> 00:28:17,510
我的文档上是否设置了backgroundURL 

632
00:28:21,070 --> 00:28:25,747
并且如果我的文档没有backgroundImage。 

633
00:28:27,130 --> 00:28:30,740
这告诉我我正在加载，对了，我有一个URL 

634
00:28:30,740 --> 00:28:33,190
为背景，所以我没有空白背景

635
00:28:33,190 --> 00:28:37,320
而且我还没有我的图片，所以我必须要加载它。 

636
00:28:37,320 --> 00:28:41,520
现在，我们实际上并没有使backgroundURL成为可获取的。 

637
00:28:41,520 --> 00:28:44,700
如果您还记得我们的ViewModel，backgroundURL， 

638
00:28:44,700 --> 00:28:47,930
我们有一个集合，但这不是一个可获取的变量， 

639
00:28:47,930 --> 00:28:48,870
所以让我们修复它。 

640
00:28:48,870 --> 00:28:52,119
让我们将其设为普通的计算变量， 

641
00:28:52,119 --> 00:28:53,903
backgroundURL，输入URL。 

642
00:28:55,337 --> 00:28:57,560
这只是二传手， 

643
00:28:57,560 --> 00:28:59,490
所以我们在那里放一套。 

644
00:28:59,490 --> 00:29:01,540
当然我们是从newValue设置的

645
00:29:03,970 --> 00:29:06,700
然后我们的吸气剂也很简单

646
00:29:06,700 --> 00:29:09,913
那只是emojiArt的backgroundURL。 

647
00:29:12,890 --> 00:29:16,510
现在，我们的视图已经可以查看backgroundURL 

648
00:29:16,510 --> 00:29:20,070
很明显，它已经可以查看backgroundImage了， 

649
00:29:20,070 --> 00:29:23,113
它可以轻松检测我们是否处于加载中间。 

650
00:29:24,480 --> 00:29:26,030
我们还有另一件事要做

651
00:29:26,030 --> 00:29:28,920
就是这样，因为我们更改了backgroundURL 

652
00:29:28,920 --> 00:29:31,710
是一个计算属性，是的，我们开始， 

653
00:29:31,710 --> 00:29:34,130
这是我们设置backgroundURL的地方

654
00:29:34,130 --> 00:29:38,963
现在我们不得不说，backgroundURL等于该URL。 

655
00:29:40,320 --> 00:29:43,140
我认为这就是我们要做的。 

656
00:29:43,140 --> 00:29:44,290
让我们继续前进。 

657
00:29:47,394 --> 00:29:49,660
啊，在装货之前是白色的

658
00:29:49,660 --> 00:29:52,310
让我们去挑选非常大的文件， 

659
00:29:52,310 --> 00:29:54,010
这个加载需要一些时间， 

660
00:29:54,010 --> 00:29:58,560
我们走了，繁荣，宇，很好，很好。 

661
00:29:58,560 --> 00:30:00,350
但是更好的选择

662
00:30:00,350 --> 00:30:02,960
如果我们向用户提供了一些反馈， 

663
00:30:02,960 --> 00:30:06,800
嘿，我正在加载该URL，请稍等一下。 

664
00:30:06,800 --> 00:30:08,190
我们可以轻松做到这一点， 

665
00:30:08,190 --> 00:30:12,170
只是放一些图像或动画图形

666
00:30:12,170 --> 00:30:16,020
或在我们处于加载阶段时出现的问题。 

667
00:30:16,020 --> 00:30:18,860
所以在这里，如果不加载，我们要做的是

668
00:30:18,860 --> 00:30:22,990
如果加载，我们也可以轻松拥有

669
00:30:22,990 --> 00:30:26,500
然后做一些事情，例如建立某种形象， 

670
00:30:26,500 --> 00:30:29,530
否则，我们将表情符号放进去。 

671
00:30:29,530 --> 00:30:31,330
那么，您想在这里使用哪种图像？ 

672
00:30:31,330 --> 00:30:34,120
让我们继续做这个systemName的东西

673
00:30:34,120 --> 00:30:37,170
我在幻灯片中谈到的。 

674
00:30:37,170 --> 00:30:39,040
这使我们可以指定名称

675
00:30:39,040 --> 00:30:40,420
系统映像之一

676
00:30:40,420 --> 00:30:41,950
然后我们去找那些。 

677
00:30:41,950 --> 00:30:45,060
我还要在这里将imageScale放大， 

678
00:30:45,060 --> 00:30:48,100
可以使该图像有点大。 

679
00:30:48,100 --> 00:30:50,340
这些图像不是很大的图像。 

680
00:30:50,340 --> 00:30:54,480
它们主要用于嵌入文本附近

681
00:30:54,480 --> 00:30:56,890
因此它们尝试与文字大小相同， 

682
00:30:56,890 --> 00:31:00,160
所以这主要是试图与大文本匹配， 

683
00:31:00,160 --> 00:31:02,300
但是我们在这里并不需要很大的形象。 

684
00:31:02,300 --> 00:31:03,420
如果我们想要巨大的东西， 

685
00:31:03,420 --> 00:31:05,030
我们可以创造自己的形状

686
00:31:05,030 --> 00:31:08,490
也许很酷的动画东西显示正在加载， 

687
00:31:08,490 --> 00:31:10,050
但是我们只是要做一些简单的事情

688
00:31:10,050 --> 00:31:12,820
这是该系统映像。 

689
00:31:12,820 --> 00:31:14,610
现在我们如何找到这些系统映像？ 

690
00:31:14,610 --> 00:31:19,610
您会记得，我们转到developer.apple.com/design 

691
00:31:19,820 --> 00:31:23,200
我们下载了这个名为SF Symbols的应用

692
00:31:23,200 --> 00:31:26,810
它有无数的符号

693
00:31:26,810 --> 00:31:27,810
我们可以使用的。 

694
00:31:27,810 --> 00:31:30,100
他们甚至被分组在这里。 

695
00:31:30,100 --> 00:31:33,100
我们正在尝试做一个计时器，我在这里看到一个叫时间的计时器， 

696
00:31:33,100 --> 00:31:34,364
让我们看看。 

697
00:31:34,364 --> 00:31:37,720
嗯，这很有趣，也许是那里的计时器

698
00:31:37,720 --> 00:31:40,700
会是一个好人，这是它的确切名称

699
00:31:40,700 --> 00:31:44,083
这样我们就可以回到这里并输入名称，计时器， 

700
00:31:45,350 --> 00:31:46,630
并运行。 

701
00:31:46,630 --> 00:31:50,690
让我们看看是否有一个小计时器，哦，我们知道了， 

702
00:31:50,690 --> 00:31:52,500
它在那里。 

703
00:31:52,500 --> 00:31:55,860
让我们在这里加载另一个图像。 

704
00:31:55,860 --> 00:31:57,930
是的，它在那里放了一个小计时器。 

705
00:31:57,930 --> 00:31:59,717
现在，那个小小的静态计时器

706
00:31:59,717 --> 00:32:01,960
那不是很漂亮。 

707
00:32:01,960 --> 00:32:03,840
有点无聊。 

708
00:32:03,840 --> 00:32:05,360
如果我们有什么事，也许会很好

709
00:32:05,360 --> 00:32:07,460
那是动画的。 

710
00:32:07,460 --> 00:32:10,626
如果我们能说些类似的话，那会不会很酷

711
00:32:10,626 --> 00:32:14,960
.spinning，只需对View进行修改

712
00:32:14,960 --> 00:32:18,370
使此View正在旋转。 

713
00:32:18,370 --> 00:32:21,050
好吧，不幸的是，没有这样的事情。 

714
00:32:21,050 --> 00:32:22,860
拥有一个会很好，但是没有， 

715
00:32:22,860 --> 00:32:25,500
所以我们要自己做。 

716
00:32:25,500 --> 00:32:29,100
转到这里新文件，这将是一个ViewModifier，对， 

717
00:32:29,100 --> 00:32:30,750
旋转是一个ViewModifier， 

718
00:32:30,750 --> 00:32:32,260
我将其称为“旋转” 

719
00:32:32,260 --> 00:32:34,943
那将是修饰符本身的名称， 

720
00:32:36,200 --> 00:32:40,290
当然是UI，它是一个结构， 

721
00:32:40,290 --> 00:32:44,610
旋转，这是一个ViewModifier。 

722
00:32:44,610 --> 00:32:49,610
而且ViewModifiers具有func主体，需要一些内容

723
00:32:50,220 --> 00:32:54,510
一些无关类型返回一些视图

724
00:32:54,510 --> 00:32:56,640
然后我们修改它

725
00:32:56,640 --> 00:33:01,245
我们想做的所有事情，以实现我们想要的方式。 

726
00:33:01,245 --> 00:33:02,800
我们显然想要一些旋转效果

727
00:33:02,800 --> 00:33:04,430
因为我们希望它旋转

728
00:33:04,430 --> 00:33:06,560
我们以前看过那个动画。 

729
00:33:06,560 --> 00:33:11,010
让我们在这里以角度为角度， 

730
00:33:11,010 --> 00:33:13,630
好吧，当这个东西在屏幕上可见时， 

731
00:33:13,630 --> 00:33:17,170
假设我们将其扩展到360 

732
00:33:17,170 --> 00:33:19,960
否则为零度。 

733
00:33:19,960 --> 00:33:22,400
现在我们如何知道它是否可见？ 

734
00:33:22,400 --> 00:33:25,060
好吧，我们将不得不为此提供一些状态。 

735
00:33:25,060 --> 00:33:27,840
现在您知道这只是一个状态结构， 

736
00:33:27,840 --> 00:33:31,444
它需要我们放在这里的所有var，例如isVisible， 

737
00:33:31,444 --> 00:33:34,160
这只是一个布尔，并将其存储在堆中

738
00:33:34,160 --> 00:33:37,510
并将其保留在堆中，即使重新构建此视图也是如此。 

739
00:33:37,510 --> 00:33:39,800
但是当我们出现时，我们将不得不设置那个东西， 

740
00:33:39,800 --> 00:33:43,610
所以onAppear，我要说一下self.isVisible = true 

741
00:33:45,240 --> 00:33:46,960
而我们要做的另一件事

742
00:33:46,960 --> 00:33:49,160
被放置一些隐式动画。 

743
00:33:49,160 --> 00:33:50,650
动画吧

744
00:33:52,210 --> 00:33:56,330
animation.linear，放置持续时间， 

745
00:33:56,330 --> 00:33:58,900
大概一秒钟走一圈

746
00:33:58,900 --> 00:34:01,860
当然，它想永远重复

747
00:34:01,860 --> 00:34:04,613
并且它不想自动反转。 

748
00:34:06,350 --> 00:34:08,440
我认为我们永远不需要停止这件事

749
00:34:08,440 --> 00:34:09,470
一旦它出现在屏幕上。 

750
00:34:09,470 --> 00:34:11,480
我们只是让它旋转。 

751
00:34:11,480 --> 00:34:13,943
正因为如此，该视图始终在旋转。 

752
00:34:14,830 --> 00:34:18,860
让我们在View上添加漂亮的扩展名

753
00:34:18,860 --> 00:34:20,860
这样我们就可以进行功能旋转

754
00:34:20,860 --> 00:34:23,750
我们可以将其作为ViewModifier放置

755
00:34:23,750 --> 00:34:27,720
并返回一些视图，这当然是我们的自我

756
00:34:27,720 --> 00:34:30,123
用Spinning修改。 

757
00:34:31,120 --> 00:34:33,600
希望你现在变得很舒服

758
00:34:33,600 --> 00:34:35,687
这些ViewModifiers。 

759
00:34:37,307 --> 00:34:38,140
所以要小心一点

760
00:34:38,140 --> 00:34:39,540
因为这只会旋转很短的时间。 

761
00:34:39,540 --> 00:34:41,000
嗯，我看到它在旋转。 

762
00:34:41,000 --> 00:34:42,000
我看到它在旋转。 

763
00:34:42,000 --> 00:34:43,800
让我们加载其他内容。 

764
00:34:43,800 --> 00:34:47,060
哇，那太快了，您甚至看不到它在旋转。 

765
00:34:47,060 --> 00:34:49,270
那这个怎么样，我们知道这是一个很大的， 

766
00:34:49,270 --> 00:34:51,890
让我们尝试一下，嗯，这很好。 

767
00:34:51,890 --> 00:34:54,950
我们还可以选择其他图像

768
00:34:54,950 --> 00:34:57,130
我实际上环顾四周，以为一个

769
00:34:57,130 --> 00:34:59,610
挺酷的，我在搜索基于时间的东西

770
00:34:59,610 --> 00:35:01,670
我发现了沙漏。 

771
00:35:01,670 --> 00:35:03,450
所以我认为沙漏看起来很酷， 

772
00:35:03,450 --> 00:35:04,650
让我们把它放在那里。 

773
00:35:05,950 --> 00:35:07,200
看看看起来像什么。 

774
00:35:10,845 --> 00:35:11,678
嗯是的

775
00:35:11,678 --> 00:35:14,050
有点像旋转的沙漏。 

776
00:35:14,050 --> 00:35:16,930
因此，向用户提供这种反馈总是很好的。 

777
00:35:16,930 --> 00:35:21,020
您从不真正想要您的应用程序的反应

778
00:35:21,020 --> 00:35:24,690
对用户所做的事情就是什么也没发生。 

779
00:35:24,690 --> 00:35:26,830
因为那时用户不确定您是否真的听到了

780
00:35:26,830 --> 00:35:29,940
它在问什么，用户在问您做什么。 

781
00:35:29,940 --> 00:35:32,833
因此，像这样回馈反馈总是一个好主意。 

782
00:35:34,030 --> 00:35:35,940
因此，让我们深入探讨发布者的这一点

783
00:35:35,940 --> 00:35:39,210
这是我们的主要主题，也是我们今天的两个主要主题之一。 

784
00:35:39,210 --> 00:35:41,850
而我要做的第一件事

785
00:35:41,850 --> 00:35:44,470
回到这里，我们做了这个变通方法

786
00:35:44,470 --> 00:35:46,270
对于不真正工作的房地产观察员

787
00:35:46,270 --> 00:35:47,960
带属性包装器

788
00:35:47,960 --> 00:35:50,470
我们在这里做了整个生意。 

789
00:35:50,470 --> 00:35:53,680
我要撤消这个，只是摆脱掉

790
00:35:53,680 --> 00:35:54,680
整件事情

791
00:35:55,560 --> 00:36:00,000
我将把我们的已出版并放回去

792
00:36:00,000 --> 00:36:01,547
所以我们不做那工作

793
00:36:01,547 --> 00:36:04,510
而我们将以完全不同的方式来做。 

794
00:36:04,510 --> 00:36:08,180
我们要做的是使用projectedValue 

795
00:36:08,180 --> 00:36:12,007
关于我们发布的结构，请记住那是$ emojiArt， 

796
00:36:13,300 --> 00:36:16,580
那是一个发布者，具体来说， 

797
00:36:16,580 --> 00:36:19,350
它是EmojiArts的发行商。 

798
00:36:19,350 --> 00:36:21,470
因此，每次EmojiArt更改时， 

799
00:36:21,470 --> 00:36:24,690
它将再次发布此EmojiArt。 

800
00:36:24,690 --> 00:36:26,570
这对我们来说非常有价值

801
00:36:26,570 --> 00:36:28,880
因为每次这个表情符号艺术改变

802
00:36:28,880 --> 00:36:30,483
我们要自动保存。 

803
00:36:32,920 --> 00:36:35,490
因此，让我们在init中进行设置。 

804
00:36:36,376 --> 00:36:40,650
我将使用发布者的$ emojiArt 

805
00:36:40,650 --> 00:36:43,840
我将使用我们谈论的那件事

806
00:36:43,840 --> 00:36:47,710
能够沉没发布者

807
00:36:47,710 --> 00:36:48,740
功能。 

808
00:36:48,740 --> 00:36:51,740
现在，此水槽有两个版本。 

809
00:36:51,740 --> 00:36:53,670
这有两个论点， 

810
00:36:53,670 --> 00:36:56,210
receiveCompletion和receiveValue。 

811
00:36:56,210 --> 00:36:59,230
它们都是闭包。 

812
00:36:59,230 --> 00:37:02,940
第一个传递给您一个完成枚举

813
00:37:02,940 --> 00:37:05,993
就是说，这个发布者完成了发布。 

814
00:37:06,870 --> 00:37:11,870
现在，我们的$已发布发布商永远不会发送完稿

815
00:37:12,170 --> 00:37:14,070
因为他们只是一直在出版， 

816
00:37:14,070 --> 00:37:15,910
他们并没有真正停止过。 

817
00:37:15,910 --> 00:37:20,130
所以他们的完成失败类型是从不， 

818
00:37:20,130 --> 00:37:22,470
大写N，从不，这是他们的失败类型， 

819
00:37:22,470 --> 00:37:25,010
他们永远不会失败，因为他们不会失败

820
00:37:25,010 --> 00:37:27,230
而且他们还没有完成。 

821
00:37:27,230 --> 00:37:28,990
当您拥有这种发布者时

822
00:37:28,990 --> 00:37:31,660
没有指明任何类型的故障， 

823
00:37:31,660 --> 00:37:33,800
那么您可以使用此简单版本的接收器

824
00:37:33,800 --> 00:37:35,300
就是给你的价值。 

825
00:37:35,300 --> 00:37:38,190
您可以在那看到receiveValue， 

826
00:37:38,190 --> 00:37:41,410
只是一个封闭的东西

827
00:37:41,410 --> 00:37:44,630
出版商发布的这是emjoiArt 

828
00:37:44,630 --> 00:37:45,940
却一无所获

829
00:37:45,940 --> 00:37:49,490
所以这意味着关闭需要EmojiArt 

830
00:37:49,490 --> 00:37:51,387
我们可以在这里做任何我们想做的事

831
00:37:51,387 --> 00:37:53,460
我想在这里做的是

832
00:37:53,460 --> 00:37:57,920
将其放入UserDefaults，然后自动保存。 

833
00:37:57,920 --> 00:38:02,820
让我们继续打印EmojiArt的json。 

834
00:38:06,170 --> 00:38:08,840
这样，我们就能看到json 

835
00:38:08,840 --> 00:38:10,200
那一直在那儿。 

836
00:38:10,200 --> 00:38:11,500
请注意，我们这里有一个错误

837
00:38:11,500 --> 00:38:15,220
或警告，无论如何，未调用接收器的结果。 

838
00:38:15,220 --> 00:38:17,890
这实际上是非常糟糕的，好吧。 

839
00:38:17,890 --> 00:38:22,890
确实，您永远不希望不使用接收器的结果。 

840
00:38:23,410 --> 00:38:26,740
所以下沉就是我们所说的订户。 

841
00:38:26,740 --> 00:38:29,880
订阅正在发生的事情

842
00:38:29,880 --> 00:38:33,350
在这个发布商中，它想找出， 

843
00:38:33,350 --> 00:38:35,960
听发布者发布的内容。 

844
00:38:35,960 --> 00:38:39,070
因此，订户在创建它们时几乎总是

845
00:38:39,070 --> 00:38:42,273
会给你所谓的取消。 

846
00:38:43,920 --> 00:38:45,580
它有两个功能，对不对？ 

847
00:38:45,580 --> 00:38:48,700
您可以取消但也可以保留它。 

848
00:38:48,700 --> 00:38:50,560
所以如果我要做这样的代码， 

849
00:38:50,560 --> 00:38:52,510
让cancellable等于

850
00:38:52,510 --> 00:38:54,780
不仅无法取消， 

851
00:38:54,780 --> 00:38:58,150
但是当初始化结束时，这是一个本地变量， 

852
00:38:58,150 --> 00:39:01,323
它被扔出去了，所以也会下沉。 

853
00:39:02,250 --> 00:39:06,230
因此，如果我们希望该接收器不超出执行范围

854
00:39:06,230 --> 00:39:09,367
在这个初始化中，我们需要做私有变量， 

855
00:39:11,132 --> 00:39:12,267
我们将此称为我们的autosaveCancellable 

856
00:39:15,620 --> 00:39:18,553
它的类型将为AnyCancellable。 

857
00:39:19,420 --> 00:39:21,770
这个AnyCancellable就在这里， 

858
00:39:21,770 --> 00:39:25,673
只是为此取消类型的擦除

859
00:39:25,673 --> 00:39:27,940
和为此取消

860
00:39:27,940 --> 00:39:31,350
真正封装了此订户正在做的所有事情

861
00:39:31,350 --> 00:39:32,920
订阅此发布者。 

862
00:39:32,920 --> 00:39:34,270
所以可能有点复杂

863
00:39:34,270 --> 00:39:37,157
它具有发布者的所有输出值

864
00:39:37,157 --> 00:39:39,017
和失败以及其中的一切。 

865
00:39:39,017 --> 00:39:41,250
我们只是希望它是一个简单的变量

866
00:39:41,250 --> 00:39:44,440
我们可以存储到它，以便为我们清除类型。 

867
00:39:44,440 --> 00:39:48,710
水槽类型擦除此可取消的内容是什么

868
00:39:48,710 --> 00:39:50,500
这样我们就可以得到这个AnyCancellable， 

869
00:39:50,500 --> 00:39:52,793
与我们对AnyTransition所做的完全相同。 

870
00:39:54,450 --> 00:39:55,920
现在注意我们在这里遇到了一个严重错误， 

871
00:39:55,920 --> 00:39:59,580
使用未声明的类型AnyCancellable。 

872
00:39:59,580 --> 00:40:01,220
为什么未声明？ 

873
00:40:01,220 --> 00:40:03,280
因为所有这些发布者的东西

874
00:40:03,280 --> 00:40:08,270
来自另一个名为Combine的框架。 

875
00:40:08,270 --> 00:40:09,970
因此，合并框架

876
00:40:09,970 --> 00:40:12,520
可以取消，订阅，发布， 

877
00:40:12,520 --> 00:40:14,173
所有的东西都来自那里。 

878
00:40:15,450 --> 00:40:19,250
我们需要做的一切以保持这种状态

879
00:40:19,250 --> 00:40:21,367
是将其Cancelableable分配给此var 

880
00:40:21,367 --> 00:40:23,830
那是在我们的ViewModel中

881
00:40:23,830 --> 00:40:26,320
只要ViewModel现在就可以使用就可以了。 

882
00:40:26,320 --> 00:40:28,150
当然，一旦这个ViewModel消失了， 

883
00:40:28,150 --> 00:40:30,760
该变量将随其消失，然后下沉将停止。 

884
00:40:30,760 --> 00:40:34,010
现在，在我们的应用程序中，我们的ViewModel永不消失

885
00:40:34,010 --> 00:40:36,630
但是很有可能让ViewModels消失了。 

886
00:40:36,630 --> 00:40:38,450
如果您的应用程序具有多个屏幕

887
00:40:38,450 --> 00:40:40,417
您可能有一个负责一个屏幕的ViewModel 

888
00:40:40,417 --> 00:40:41,930
当屏幕消失时， 

889
00:40:41,930 --> 00:40:43,820
哈，ViewModel也消失了。 

890
00:40:43,820 --> 00:40:46,200
那是完美的，我们不希望这是自动保存的

891
00:40:46,200 --> 00:40:48,200
当此ViewModel不存在时。 

892
00:40:48,200 --> 00:40:51,180
所以这是一个很好的链接方式

893
00:40:51,180 --> 00:40:55,493
此订户可以使用它正在帮助的任何对象。 

894
00:40:56,390 --> 00:40:58,528
让我们继续前进，看看我们是否正在

895
00:40:58,528 --> 00:41:01,310
这个json打印在我们的控制台上。 

896
00:41:01,310 --> 00:41:02,907
留一点空间以便我们看到

897
00:41:02,907 --> 00:41:05,010
我们已经看到它确实喜欢

898
00:41:05,010 --> 00:41:07,730
是的，看起来像是最初的自动保存

899
00:41:07,730 --> 00:41:11,400
当我们第一次提出这份文件时。 

900
00:41:11,400 --> 00:41:13,330
让我们对文档进行更改， 

901
00:41:13,330 --> 00:41:16,920
我要添加一个椒盐脆饼，糊状， 

902
00:41:16,920 --> 00:41:18,180
现在我们有两个椒盐脆饼， 

903
00:41:18,180 --> 00:41:19,780
也许我们会添加另一个椒盐脆饼。 

904
00:41:21,090 --> 00:41:23,420
现在我们有三个椒盐脆饼，1、2、3。 

905
00:41:23,420 --> 00:41:25,203
因此，我们的自动保存正在运行。 

906
00:41:28,120 --> 00:41:31,220
实际上，让我们做另一件事

907
00:41:31,220 --> 00:41:33,700
因为我们在这里有另一个发布

908
00:41:33,700 --> 00:41:36,003
我们的backgroundImage已发布。 

909
00:41:36,003 --> 00:41:38,150
那这个很酷的功能呢？ 

910
00:41:38,150 --> 00:41:39,363
让我们回到这里。 

911
00:41:40,310 --> 00:41:42,990
当我添加新背景时， 

912
00:41:42,990 --> 00:41:45,800
比方说这样的背景

913
00:41:45,800 --> 00:41:47,210
莱姆拖了这个背景， 

914
00:41:47,210 --> 00:41:48,670
观察会发生什么。 

915
00:41:48,670 --> 00:41:51,240
好吧，它不太适合边缘

916
00:41:51,240 --> 00:41:54,470
如果我做大一点就更糟了

917
00:41:54,470 --> 00:41:57,233
就这样，这个家伙

918
00:42:00,860 --> 00:42:03,550
我们真的希望像双击一样放大

919
00:42:03,550 --> 00:42:06,250
设置背景图片时自动发生

920
00:42:06,250 --> 00:42:08,090
去别的东西。 

921
00:42:08,090 --> 00:42:10,140
然后我们将其设置为此。 

922
00:42:12,000 --> 00:42:14,870
哎呀，这太可怕了，我们真的很希望它能像这样走下去。 

923
00:42:14,870 --> 00:42:17,820
所以我们已经有了这个不错的功能zoomToFit 

924
00:42:17,820 --> 00:42:19,230
如果每次都很棒

925
00:42:19,230 --> 00:42:22,690
我们的backgroundImage更改了，我们称为zoomToFit。 

926
00:42:22,690 --> 00:42:24,510
好吧，那也很容易做到

927
00:42:24,510 --> 00:42:27,210
因为我们知道何时设置backgroundImage， 

928
00:42:27,210 --> 00:42:28,960
就是这个变量被设置的时候

929
00:42:28,960 --> 00:42:33,220
这是已发布的，所以有一个$ backgroundImage var 

930
00:42:33,220 --> 00:42:35,997
是发布此图像的发布者

931
00:42:35,997 --> 00:42:38,623
我们可以在视图中使用它。 

932
00:42:39,580 --> 00:42:41,460
所以让我们来看一下这里的视图

933
00:42:41,460 --> 00:42:43,241
看看我们会怎么做。 

934
00:42:43,241 --> 00:42:45,990
就去吧，让我们在这里说

935
00:42:45,990 --> 00:42:49,887
并说.onReceive，所以onReceive是我们这样做的方式

936
00:42:49,887 --> 00:42:54,170
我们说self.document。$ backgroundImage， 

937
00:42:54,170 --> 00:42:56,090
那是backgroundImage Publisher， 

938
00:42:56,090 --> 00:42:59,320
这将导致事物关闭

939
00:42:59,320 --> 00:43:01,680
收到时就发表了

940
00:43:01,680 --> 00:43:04,832
这就是在这里发布的UIImage 

941
00:43:04,832 --> 00:43:09,730
我要说，self.zoomToFit那个图像

942
00:43:09,730 --> 00:43:12,893
在我们的geometry.size中。 

943
00:43:14,850 --> 00:43:15,683
而已。 

944
00:43:16,635 --> 00:43:19,640
所以现在每次这件事发表

945
00:43:19,640 --> 00:43:20,820
因为出现了新图像， 

946
00:43:20,820 --> 00:43:23,660
您甚至可以看到第一个这样做。 

947
00:43:23,660 --> 00:43:25,580
让我们在这里做另外一张图片， 

948
00:43:25,580 --> 00:43:27,283
这个怎么样， 

949
00:43:30,150 --> 00:43:31,250
加载，很好， 

950
00:43:31,250 --> 00:43:32,373
并缩放以适合。 

951
00:43:33,370 --> 00:43:35,940
所以那些出版社真的很有价值

952
00:43:35,940 --> 00:43:39,410
挂上钩，您将获得这些$东西的好处

953
00:43:39,410 --> 00:43:40,690
嗯，这真的很酷。 

954
00:43:40,690 --> 00:43:43,660
我想知道什么时候改变，我会做onReceive 

955
00:43:43,660 --> 00:43:47,853
否则我将在这里挂一个水槽。 

956
00:43:50,040 --> 00:43:52,670
但是我们可以与发布者做更多的事情

957
00:43:52,670 --> 00:43:55,597
不仅仅是这些$具有发布的东西。 

958
00:43:55,597 --> 00:43:57,950
我要用发布者来做

959
00:43:57,950 --> 00:44:00,310
这整个backgroundImage获取。 

960
00:44:00,310 --> 00:44:03,200
当我们这样做时，我有点提到

961
00:44:03,200 --> 00:44:06,130
真的，我们想使用称为URLSession的类来做到这一点

962
00:44:06,130 --> 00:44:09,300
因为URLSession知道如何超时

963
00:44:09,300 --> 00:44:11,920
以及所有设置以及与此相关的所有内容。 

964
00:44:11,920 --> 00:44:15,560
我们真的只是在这里使用Data contentsOf， 

965
00:44:15,560 --> 00:44:18,600
有点傻，不是那么聪明， 

966
00:44:18,600 --> 00:44:21,530
一种不可配置的方式来获取东西。 

967
00:44:21,530 --> 00:44:23,860
所以我们在这里使用URLSession 

968
00:44:23,860 --> 00:44:26,180
做这个背景取而代之。 

969
00:44:26,180 --> 00:44:29,350
而这将由发布者来完成。 

970
00:44:29,350 --> 00:44:32,310
那么首先，我们如何获得一个会话，即URLSession？ 

971
00:44:32,310 --> 00:44:34,310
我们只是说，URLSession 

972
00:44:34,310 --> 00:44:38,347
而且确实有一些初始化程序，您可以看到， 

973
00:44:38,347 --> 00:44:42,197
说出此配置，您可以配置URLSession 

974
00:44:43,200 --> 00:44:45,200
在这里有任何超时时间

975
00:44:45,200 --> 00:44:48,180
但是它也有一个很好的叫做共享。 

976
00:44:48,180 --> 00:44:51,130
那是一个静态变量，一个共享的URLSession 

977
00:44:51,130 --> 00:44:52,450
您整个应用可以使用的

978
00:44:52,450 --> 00:44:54,920
当它只想进行简单下载时。 

979
00:44:54,920 --> 00:44:56,080
我们会经常使用

980
00:44:56,080 --> 00:44:57,610
当我们进行直接下载时， 

981
00:44:57,610 --> 00:45:00,330
我们不在乎超时的地方， 

982
00:45:00,330 --> 00:45:02,600
但是我们仍然想要所有的美好

983
00:45:02,600 --> 00:45:04,273
该URLSession的。 

984
00:45:05,400 --> 00:45:09,350
现在，我们如何要求URLSession下载一些内容

985
00:45:09,350 --> 00:45:12,520
从一个URL，它如何给我们？ 

986
00:45:12,520 --> 00:45:14,280
好吧，它是通过发布服务器来完成的。 

987
00:45:14,280 --> 00:45:18,990
所以我要说，让发布者等于我们的会议

988
00:45:18,990 --> 00:45:23,413
它具有强大的功能，URL的dataTaskPublisher。 

989
00:45:24,819 --> 00:45:27,130
这将给我们一个出版商

990
00:45:27,130 --> 00:45:29,030
我们都知道发布者是什么

991
00:45:29,030 --> 00:45:32,260
将要发布此URL的内容

992
00:45:32,260 --> 00:45:34,337
无论它想要什么，然后拿走， 

993
00:45:34,337 --> 00:45:35,710
并发布。 

994
00:45:35,710 --> 00:45:38,870
让我们在这里实际仔细看一下Publisher 

995
00:45:38,870 --> 00:45:40,000
在文档中。 

996
00:45:40,000 --> 00:45:42,050
URLSession创建的发布者， 

997
00:45:42,050 --> 00:45:45,573
被称为DataTaskPublisher，在其中单击

998
00:45:46,430 --> 00:45:50,060
进入这里，我们知道发布者有输出， 

999
00:45:50,060 --> 00:45:53,060
不在乎，失败不在乎。 

1000
00:45:53,060 --> 00:45:56,170
因此，让我们看一下URLSession的输出无关紧要， 

1001
00:45:56,170 --> 00:45:59,120
无关输出会变成什么？ 

1002
00:45:59,120 --> 00:46:03,400
它与返回的数据一起成为一个元组

1003
00:46:03,400 --> 00:46:06,060
这个东西叫做URLResponse 

1004
00:46:06,060 --> 00:46:08,623
类似于建议的文件名

1005
00:46:08,623 --> 00:46:10,440
在另一边发现的

1006
00:46:10,440 --> 00:46:14,500
和一些面向URL的事物， 

1007
00:46:14,500 --> 00:46:16,360
但这通常是我们最感兴趣的

1008
00:46:16,360 --> 00:46:18,873
是从该URL返回的数据。 

1009
00:46:19,990 --> 00:46:20,823
好吧，那很酷。 

1010
00:46:20,823 --> 00:46:22,030
那失败呢？ 

1011
00:46:22,030 --> 00:46:24,193
这些URLSession之一会发生什么？ 

1012
00:46:24,193 --> 00:46:26,030
DataTaskPublishers失败， 

1013
00:46:26,030 --> 00:46:29,410
诸如网络连接不可用之类的？ 

1014
00:46:29,410 --> 00:46:32,240
好吧，它的类型是URLError，请记住， 

1015
00:46:32,240 --> 00:46:35,130
这是无关紧要的，我们要说的是什么类型的

1016
00:46:35,130 --> 00:46:36,920
为此特定的发布商。 

1017
00:46:36,920 --> 00:46:39,260
这就是URLError，让我们看一下URLError， 

1018
00:46:39,260 --> 00:46:40,340
这里是。 

1019
00:46:40,340 --> 00:46:42,900
再有，您可能会怀疑， 

1020
00:46:42,900 --> 00:46:45,260
你知道的，这里的本地化描述很少

1021
00:46:45,260 --> 00:46:48,113
发生了什么，一些错误代码，诸如此类的事情。 

1022
00:46:48,990 --> 00:46:51,090
这就是大多数发布者的模样， 

1023
00:46:51,090 --> 00:46:52,520
他们只有一些输出， 

1024
00:46:52,520 --> 00:46:56,000
就像响应中的数据元组一样

1025
00:46:56,000 --> 00:46:58,300
然后他们也可能会失败。 

1026
00:46:59,220 --> 00:47:01,360
现在，再次，请记住，这些发布的人， 

1027
00:47:01,360 --> 00:47:04,000
他们没有失败，他们的失败永远不会

1028
00:47:04,000 --> 00:47:06,400
因为他们永远不会失败，他们会继续前进， 

1029
00:47:06,400 --> 00:47:07,663
继续前进。 

1030
00:47:09,920 --> 00:47:13,100
该发布者未完全发布我们想要的内容， 

1031
00:47:13,100 --> 00:47:14,400
我们真的不想要一个元组， 

1032
00:47:14,400 --> 00:47:16,380
我们想要的是图像，好吗？ 

1033
00:47:16,380 --> 00:47:18,730
我们想要，如果这个发布者我们会很棒

1034
00:47:18,730 --> 00:47:21,930
会采用我们的URL并只是向我们发布图像。 

1035
00:47:21,930 --> 00:47:23,640
这样我们就可以把我们的形象

1036
00:47:23,640 --> 00:47:27,069
进入我们的背景图片在这里， 

1037
00:47:27,069 --> 00:47:29,260
一切都会完美地工作。 

1038
00:47:29,260 --> 00:47:32,680
因此，我们使用发布商的主要方式之一

1039
00:47:32,680 --> 00:47:34,890
我们是现有的发布商吗

1040
00:47:34,890 --> 00:47:39,890
我们会慢慢强迫它去做我们想要的事情。 

1041
00:47:39,990 --> 00:47:43,690
这是通过创建新的发布者来完成的。 

1042
00:47:43,690 --> 00:47:45,130
所以我要带这个发行人

1043
00:47:45,130 --> 00:47:47,820
我要给它发送一条叫做map的消息

1044
00:47:47,820 --> 00:47:51,800
和地图采取封闭措施，为您提供信息

1045
00:47:51,800 --> 00:47:54,550
在现有发布者中

1046
00:47:54,550 --> 00:47:58,520
对我们来说是数据和URLResponse 

1047
00:48:00,086 --> 00:48:03,980
并让您返回想要的类型。 

1048
00:48:03,980 --> 00:48:06,090
我宁愿这是一个UIImage。 

1049
00:48:07,391 --> 00:48:08,660
我该怎么做呢？ 

1050
00:48:08,660 --> 00:48:12,730
拿走你传递给我的数据并作图。 

1051
00:48:12,730 --> 00:48:15,760
现在，此发布者不再是发布者

1052
00:48:15,760 --> 00:48:20,010
返回该元组并有错误URLError。 

1053
00:48:20,010 --> 00:48:22,560
相反，它已被映射为发布者

1054
00:48:22,560 --> 00:48:24,720
发布一个UIImage 

1055
00:48:24,720 --> 00:48:26,660
这实际上是可选的UIImage 

1056
00:48:26,660 --> 00:48:29,690
因为这是一个失败的初始化程序， 

1057
00:48:29,690 --> 00:48:32,045
所以它发布了可选的UIImage 

1058
00:48:32,045 --> 00:48:34,870
并且仍然存在URLError失败。 

1059
00:48:34,870 --> 00:48:38,550
因此，我们只是将此发布者映射到另一个发布者。 

1060
00:48:38,550 --> 00:48:41,330
在某些方面，发布者感觉很像数组

1061
00:48:41,330 --> 00:48:44,940
因为，您知道，数组就像一个值列表

1062
00:48:44,940 --> 00:48:47,040
而发布者就是一种值列表

1063
00:48:47,040 --> 00:48:48,040
但是随着时间的流逝， 

1064
00:48:48,040 --> 00:48:49,640
随着时间的推移发布商的发布。 

1065
00:48:49,640 --> 00:48:54,420
因此，Publisher中的许多功能都模仿Array中的功能。 

1066
00:48:54,420 --> 00:48:57,870
太好了，所以它正在为我们发布UIImages 

1067
00:48:57,870 --> 00:48:59,020
但是有问题

1068
00:48:59,020 --> 00:49:01,970
URLSession完成所有工作

1069
00:49:01,970 --> 00:49:04,240
在这些全局后台队列之一中

1070
00:49:04,240 --> 00:49:06,370
因为，当然，您不想阻止用户界面

1071
00:49:06,370 --> 00:49:08,350
在您获取这些东西时。 

1072
00:49:08,350 --> 00:49:12,410
因此，我们希望该发布者不要发布这些UIImages 

1073
00:49:12,410 --> 00:49:13,680
在那些背景线程上

1074
00:49:13,680 --> 00:49:15,690
这是默认情况下会执行的操作。 

1075
00:49:15,690 --> 00:49:18,330
所以我们希望它发布这些东西

1076
00:49:18,330 --> 00:49:20,200
在主队列上。 

1077
00:49:20,200 --> 00:49:21,340
我们也可以做到这一点。 

1078
00:49:21,340 --> 00:49:26,340
我们说，在DispatchQueue.main上接收.receive 

1079
00:49:28,390 --> 00:49:30,930
然后，这将返回一个发布者， 

1080
00:49:30,930 --> 00:49:35,130
其他发布者，即发布UIImages的发布者

1081
00:49:35,130 --> 00:49:38,250
从此发布者那里被转换

1082
00:49:38,250 --> 00:49:41,050
并将它们发布在主队列上。 

1083
00:49:41,050 --> 00:49:43,120
所以它只是稍作修改。 

1084
00:49:43,120 --> 00:49:46,540
这感觉是否很像Views和ViewModifiers？ 

1085
00:49:46,540 --> 00:49:49,180
是同一种设计，这里的系统完全不同

1086
00:49:49,180 --> 00:49:51,530
因为这些根本不是UI的东西， 

1087
00:49:51,530 --> 00:49:52,960
但这是同一种想法

1088
00:49:52,960 --> 00:49:55,550
您要在哪里发布商并对其进行修改， 

1089
00:49:55,550 --> 00:49:56,383
修改它。 

1090
00:49:56,383 --> 00:49:58,560
与视图相同，对其进行修改，然后对其进行修改。 

1091
00:49:58,560 --> 00:49:59,633
完全一样。 

1092
00:50:01,330 --> 00:50:03,110
现在我们要做的最后一件事， 

1093
00:50:03,110 --> 00:50:05,060
这差不多了

1094
00:50:05,060 --> 00:50:08,430
我们想要的那种发布者就是向其发布UIImages， 

1095
00:50:08,430 --> 00:50:11,970
是我们想使用.sink还是其他东西

1096
00:50:11,970 --> 00:50:14,900
就像如果我尝试在这里使用.sink会很有趣， 

1097
00:50:14,900 --> 00:50:16,310
注意我什至没有

1098
00:50:16,310 --> 00:50:19,450
仅接受值的接收器选项， 

1099
00:50:19,450 --> 00:50:21,720
是的，我们在这里用完的.sink 

1100
00:50:21,720 --> 00:50:23,980
只是拿走出版的东西

1101
00:50:23,980 --> 00:50:25,050
这里没有错误

1102
00:50:25,050 --> 00:50:28,080
再次因为这些已发布的内容， 

1103
00:50:28,080 --> 00:50:29,750
他们的错误是从不。 

1104
00:50:29,750 --> 00:50:32,830
因此，处理“永不”错误是没有用的。 

1105
00:50:32,830 --> 00:50:36,530
因此，我们甚至没有在下面给出此选项。 

1106
00:50:36,530 --> 00:50:41,370
为什么这甚至没有给我们选择的余地？ 

1107
00:50:41,370 --> 00:50:44,320
好吧，我们的发布者，这里发布的UIImages， 

1108
00:50:44,320 --> 00:50:47,333
仍然出现URLError失败。 

1109
00:50:48,480 --> 00:50:50,120
我真的不想处理错误。 

1110
00:50:50,120 --> 00:50:52,810
如果我这样做了，我可能会在这里使用水槽。 

1111
00:50:52,810 --> 00:50:53,920
但是我不想处理错误。 

1112
00:50:53,920 --> 00:50:57,240
我真正想做的就是给我UIImage 

1113
00:50:57,240 --> 00:51:00,080
如果您遇到错误，我只想要零， 

1114
00:51:00,080 --> 00:51:01,750
好吧，就给我零

1115
00:51:01,750 --> 00:51:03,330
好吧，事实证明我们可以做到。 

1116
00:51:03,330 --> 00:51:06,040
我们可以在这里进一步修改发布者

1117
00:51:06,040 --> 00:51:10,800
并说用其他UIImage替换replaceErrors， 

1118
00:51:10,800 --> 00:51:13,390
我要选择UIImage nil。 

1119
00:51:13,390 --> 00:51:17,880
所以现在，这个发布者发布了UIImages， 

1120
00:51:17,880 --> 00:51:19,550
仍然是可选的UIImage， 

1121
00:51:19,550 --> 00:51:22,680
但其错误类型已更改为“从不”。 

1122
00:51:22,680 --> 00:51:25,480
现在我们可以下沉并观察， 

1123
00:51:25,480 --> 00:51:27,313
receiveValue现已可用。 

1124
00:51:28,310 --> 00:51:30,220
但是我什至不会用水槽。 

1125
00:51:30,220 --> 00:51:33,310
所以我要说让抵消器等于

1126
00:51:33,310 --> 00:51:35,450
但我不会让它沉没

1127
00:51:35,450 --> 00:51:38,530
我要让它做一个非常酷的订户

1128
00:51:38,530 --> 00:51:40,610
称为分配。 

1129
00:51:40,610 --> 00:51:43,860
因此，Assign使您可以分配发布者的输出

1130
00:51:43,860 --> 00:51:48,860
到使用此键路径语法指定的某些变量

1131
00:51:49,900 --> 00:51:51,370
我们之前看到的

1132
00:51:54,000 --> 00:51:57,950
在某些情况下，就我们而言，就是我们自己。 

1133
00:51:57,950 --> 00:52:00,170
因此，这将采用此发布者发布的内容

1134
00:52:00,170 --> 00:52:01,357
并将其分配给该变量。 

1135
00:52:01,357 --> 00:52:04,534
只要此var，backgroundImage， 

1136
00:52:04,534 --> 00:52:08,840
具有相同的类型，UIImage，可选UIImage， 

1137
00:52:08,840 --> 00:52:10,430
就像发布者正在发布的内容一样。 

1138
00:52:10,430 --> 00:52:13,460
而这正是我们的发布者发布的。 

1139
00:52:13,460 --> 00:52:17,200
现在，仅当您将“从不”作为错误时，才可以分配。 

1140
00:52:17,200 --> 00:52:19,220
因此，如果您有来自Publisher的内容

1141
00:52:19,220 --> 00:52:22,290
出现错误，您将不得不调用replaceError 

1142
00:52:22,290 --> 00:52:26,270
并提供一些价值以从此发布者处返回

1143
00:52:26,270 --> 00:52:27,850
如果有错误。 

1144
00:52:27,850 --> 00:52:30,790
就我们而言，这很容易，因为我们的UIImage是可选的

1145
00:52:30,790 --> 00:52:32,520
因此我们可以返回nil。 

1146
00:52:32,520 --> 00:52:34,650
但是，如果您发布的不是“可选”内容

1147
00:52:34,650 --> 00:52:36,530
你将不得不找出合理的东西

1148
00:52:36,530 --> 00:52:39,420
如果您想要失败类型，请在此处发布

1149
00:52:39,420 --> 00:52:41,593
通过调用replaceError将其设置为“永不”。 

1150
00:52:43,390 --> 00:52:45,680
这个EmojiArtDocument在这里， 

1151
00:52:45,680 --> 00:52:48,210
我们可以让Swift从事实中推断出这一点

1152
00:52:48,210 --> 00:52:50,843
我们知道这条关键路在自己身上。 

1153
00:52:51,970 --> 00:52:53,570
这只是一个订阅者， 

1154
00:52:53,570 --> 00:52:55,647
这就是为什么它在这里有一个抵消器

1155
00:52:55,647 --> 00:52:57,730
当然我们不想要这个取消器

1156
00:52:57,730 --> 00:53:00,810
成为此函数内的局部变量

1157
00:53:00,810 --> 00:53:02,870
否则，当此功能结束时， 

1158
00:53:02,870 --> 00:53:06,280
这项分配，这个订户就消失了。 

1159
00:53:06,280 --> 00:53:08,150
与我们在这里所做的完全一样

1160
00:53:08,150 --> 00:53:10,058
当我们有autosaveCancellable时， 

1161
00:53:10,058 --> 00:53:13,200
我们需要一些私人变量

1162
00:53:13,200 --> 00:53:16,257
我将其称为fetchImageCancellable， 

1163
00:53:19,620 --> 00:53:21,070
再次，AnyCancellable是类型

1164
00:53:23,346 --> 00:53:26,950
我将使用它作为变量

1165
00:53:26,950 --> 00:53:31,000
将订户的可取消状态放入

1166
00:53:31,000 --> 00:53:32,430
那会一直保持下去

1167
00:53:32,430 --> 00:53:35,140
只要它保持存在。 

1168
00:53:35,140 --> 00:53:37,200
但是不要忘记这也有好处

1169
00:53:37,200 --> 00:53:39,070
让我取消这个。 

1170
00:53:39,070 --> 00:53:42,100
记得当我们做了所有自己的事情时

1171
00:53:42,100 --> 00:53:43,400
我们必须要小心

1172
00:53:43,400 --> 00:53:45,677
如果有人点击背景图片

1173
00:53:45,677 --> 00:53:48,280
而且它在慢速的服务器上，花费的时间太长

1174
00:53:48,280 --> 00:53:51,500
然后他们从快速服务器中拖入了其他图像

1175
00:53:51,500 --> 00:53:54,080
并奏效，然后10秒钟后

1176
00:53:54,080 --> 00:53:57,250
缓慢的服务器终于响应了，它炸毁了图像

1177
00:53:57,250 --> 00:53:58,900
我们通过检查来解决

1178
00:53:58,900 --> 00:54:00,900
哦，这是刚到的图像吗

1179
00:54:00,900 --> 00:54:02,550
我们要寻找的那个吗？ 

1180
00:54:02,550 --> 00:54:04,800
有了这个系统，我们不必做任何事情

1181
00:54:04,800 --> 00:54:06,710
因为我只想在这里说

1182
00:54:06,710 --> 00:54:08,340
我只会做这一切

1183
00:54:08,340 --> 00:54:11,660
我拿完fetchImageCancellable之后

1184
00:54:11,660 --> 00:54:14,220
并取消了前一个。 

1185
00:54:14,220 --> 00:54:16,770
这也将阻止我们提出未解决的要求

1186
00:54:16,770 --> 00:54:18,930
对我们不再感兴趣了

1187
00:54:18,930 --> 00:54:21,580
每次我们提取背景图像数据时， 

1188
00:54:21,580 --> 00:54:23,300
我要取消上一个

1189
00:54:23,300 --> 00:54:24,270
然后去买新的。 

1190
00:54:24,270 --> 00:54:26,910
所以现在我不必担心事情会改变

1191
00:54:26,910 --> 00:54:29,510
因为我只会拿起新的。 

1192
00:54:29,510 --> 00:54:32,980
所以这也是发布者的一个很酷的功能

1193
00:54:32,980 --> 00:54:34,330
是你可以取消他们

1194
00:54:34,330 --> 00:54:36,133
他们将停止工作。 

1195
00:54:37,642 --> 00:54:39,640
现在我们要用此代码做的另一件事是

1196
00:54:39,640 --> 00:54:41,590
我们将其作为一个班轮。 

1197
00:54:41,590 --> 00:54:44,110
因此，我们将参加这次共享会议

1198
00:54:44,110 --> 00:54:45,630
我们会把它放在这里

1199
00:54:45,630 --> 00:54:48,290
我们将整个出版商

1200
00:54:48,290 --> 00:54:50,010
我们会把它放在这里

1201
00:54:50,010 --> 00:54:53,193
而且我们不会有这两个中间变量。 

1202
00:54:54,780 --> 00:54:59,060
非常可爱，非常简单，非常优雅的解决方案

1203
00:54:59,060 --> 00:55:00,910
获取数据。 

1204
00:55:00,910 --> 00:55:03,950
只是要求URLSession去获取它

1205
00:55:03,950 --> 00:55:05,610
并发布结果， 

1206
00:55:05,610 --> 00:55:07,190
我们按摩成我们想要的格式

1207
00:55:07,190 --> 00:55:10,333
然后将其分配给我们的变量之一。 

1208
00:55:11,360 --> 00:55:14,300
并在这里设置了backgroundImage 

1209
00:55:14,300 --> 00:55:16,850
这会导致该发布者被解雇

1210
00:55:16,850 --> 00:55:20,410
在这里将导致此onReceive注意到

1211
00:55:20,410 --> 00:55:22,390
并导致zoomToFit。 

1212
00:55:22,390 --> 00:55:25,760
因此，您开始看到这种反应式UI内容， 

1213
00:55:25,760 --> 00:55:28,210
它从像

1214
00:55:28,210 --> 00:55:29,540
通过网络拉东西

1215
00:55:29,540 --> 00:55:32,713
并以一种非常自然的方式一直贯穿

1216
00:55:33,980 --> 00:55:35,530
我们将看到此操作的实际效果。 

1217
00:55:38,740 --> 00:55:40,852
加载中， 

1218
00:55:40,852 --> 00:55:42,487
它行得通，好吧。 

1219
00:55:42,487 --> 00:55:45,263
怎么样，我们最喜欢的另一个呢？ 

1220
00:55:46,988 --> 00:55:47,938
我们可以在这里加载吗？ 

1221
00:55:49,970 --> 00:55:50,803
这里是。 

1222
00:55:52,250 --> 00:55:53,083
完善。 

1223
00:55:54,840 --> 00:55:56,550
好的，就这些，对于发布者来说，就是这样。 

1224
00:55:56,550 --> 00:55:58,270
我们看到那里的发布商正在做很多事情

1225
00:55:58,270 --> 00:56:00,653
但我们实际上只是从头开始。 

1226
00:56:00,653 --> 00:56:02,230
还有很多要知道的

1227
00:56:02,230 --> 00:56:04,280
我将在本季度晚些时候进行介绍。 

1228
00:56:05,130 --> 00:56:07,090
与往常一样，您可以查看文档

1229
00:56:07,090 --> 00:56:09,730
for Publisher，并看到许多不同功能

1230
00:56:09,730 --> 00:56:11,997
您可以调用map和replaceError之外的其他方法， 

1231
00:56:11,997 --> 00:56:14,197
还有所有这些东西，就在那里。 

1232
00:56:15,270 --> 00:56:17,900
但是现在我们将继续一些UI方面的工作。 

1233
00:56:17,900 --> 00:56:19,420
我要做到这一点，以便我们， 

1234
00:56:19,420 --> 00:56:21,830
而不是只有这个

1235
00:56:21,830 --> 00:56:23,993
有点悲伤的小调色板就在这里

1236
00:56:23,993 --> 00:56:25,470
我们可以有很多调色板， 

1237
00:56:25,470 --> 00:56:28,340
食物调色板，动物调色板，脸部调色板， 

1238
00:56:28,340 --> 00:56:30,510
这样我们就可以选择各种表情符号

1239
00:56:30,510 --> 00:56:33,100
来建立我们美丽的艺术品。 

1240
00:56:33,100 --> 00:56:35,010
因此，让我们开始构建这个小东西， 

1241
00:56:35,010 --> 00:56:36,000
这个小选择者

1242
00:56:36,000 --> 00:56:37,220
只会是一点点风景

1243
00:56:37,220 --> 00:56:38,690
所以我要回这里

1244
00:56:39,690 --> 00:56:40,523
提交新文件

1245
00:56:41,960 --> 00:56:43,937
这将是一个SwiftUIView 

1246
00:56:45,229 --> 00:56:47,173
我将其称为PaletteChooser。 

1247
00:56:49,780 --> 00:56:52,480
我们都知道如何立即制作视图

1248
00:56:52,480 --> 00:56:54,300
我们只是更换它的身体。 

1249
00:56:54,300 --> 00:56:59,300
我的要有一个叫做步进器的HStack， 

1250
00:56:59,310 --> 00:57:00,920
我们将在稍后讨论

1251
00:57:00,920 --> 00:57:05,070
然后还有调色板名称的文本

1252
00:57:05,070 --> 00:57:06,460
我们必须得到的

1253
00:57:06,460 --> 00:57:07,940
当我们选择不同的调色板时， 

1254
00:57:07,940 --> 00:57:10,780
这将是调色板的名称， 

1255
00:57:10,780 --> 00:57:12,390
我们希望我们的调色板有个好名字

1256
00:57:12,390 --> 00:57:15,093
像食物，动物，面孔等等。 

1257
00:57:16,140 --> 00:57:17,300
那么这是什么步进器？ 

1258
00:57:17,300 --> 00:57:20,920
步进器本质上就像一个加号减号按钮

1259
00:57:20,920 --> 00:57:24,540
这可能不是真正完美的用户界面

1260
00:57:24,540 --> 00:57:26,030
但这很实用

1261
00:57:26,030 --> 00:57:27,820
这也让我告诉你步进

1262
00:57:27,820 --> 00:57:29,110
因为我想展示它。 

1263
00:57:29,110 --> 00:57:31,250
因此，Stepper有很多不同的初始化器， 

1264
00:57:31,250 --> 00:57:33,110
您应该检查文档。 

1265
00:57:33,110 --> 00:57:34,800
例如，您可以选择一个范围

1266
00:57:34,800 --> 00:57:37,580
然后您可以逐步浏览范围。 

1267
00:57:37,580 --> 00:57:40,970
它还可以让您以某种自由形式拥有步进器

1268
00:57:40,970 --> 00:57:43,970
就是这样，onIncrement会做一件事

1269
00:57:43,970 --> 00:57:45,690
然后onDecrement是另一个。 

1270
00:57:45,690 --> 00:57:47,450
因此，我们将使用该版本。 

1271
00:57:47,450 --> 00:57:49,670
所以在onIncrement我们将指定一些闭包

1272
00:57:49,670 --> 00:57:52,550
和onDecrement我们将指定一些关闭

1273
00:57:52,550 --> 00:57:54,800
和步进器有标签。 

1274
00:57:54,800 --> 00:57:58,450
我要在这里贴上文字说

1275
00:58:00,810 --> 00:58:05,110
通常是“选择调色板” 

1276
00:58:05,110 --> 00:58:10,110
步进器的标签试图解释步进器在做什么。 

1277
00:58:10,510 --> 00:58:13,450
我认为这将在我们的应用程序中非常明显

1278
00:58:13,450 --> 00:58:15,230
所以可能是我们要失去这个， 

1279
00:58:15,230 --> 00:58:18,360
只是摆脱掉这段文字，但我们会看到它的外观， 

1280
00:58:18,360 --> 00:58:20,710
因为我希望您看到标签出现的位置

1281
00:58:20,710 --> 00:58:22,160
在步进器上。 

1282
00:58:22,160 --> 00:58:25,100
因此，在我们开始实施实际的步进器之前

1283
00:58:25,100 --> 00:58:26,260
逐步浏览我们的调色板， 

1284
00:58:26,260 --> 00:58:28,330
让我们在这里看到我们的视图。 

1285
00:58:28,330 --> 00:58:31,293
所以我实际上要拿出我们的画布。 

1286
00:58:33,590 --> 00:58:35,740
让我们看看是否可以在这里看看。 

1287
00:58:37,800 --> 00:58:39,840
嗯，看来我们这里有点问题。 

1288
00:58:39,840 --> 00:58:42,292
让我们点击诊断。 

1289
00:58:42,292 --> 00:58:45,440
哦，我想我知道这个问题。 

1290
00:58:45,440 --> 00:58:47,000
这是你们许多人遇到的问题

1291
00:58:47,000 --> 00:58:48,790
在您的作业三中。 

1292
00:58:48,790 --> 00:58:50,950
而你的作业三写的解释

1293
00:58:50,950 --> 00:58:53,650
如何解决此问题。 

1294
00:58:53,650 --> 00:58:55,340
这里发生的是Xcode越来越

1295
00:58:55,340 --> 00:58:58,343
有点困惑，因为我们有一个结构名

1296
00:58:58,343 --> 00:59:01,060
与我们的应用名称完全相同

1297
00:59:01,060 --> 00:59:04,503
Xcode在这里做的事情并不正确。 

1298
00:59:04,503 --> 00:59:06,860
这可能甚至是一个问题

1299
00:59:06,860 --> 00:59:07,730
为您的任务三

1300
00:59:07,730 --> 00:59:11,980
因为Swift本身有一个名为Set的结构。 

1301
00:59:11,980 --> 00:59:13,560
因此，两种解决方法是

1302
00:59:13,560 --> 00:59:18,470
重命名有问题的结构或重命名应用。 

1303
00:59:18,470 --> 00:59:22,550
所以我要重命名我的应用，这很简单。 

1304
00:59:22,550 --> 00:59:24,710
所以我要转到这里进行设置

1305
00:59:24,710 --> 00:59:27,720
在目标下选择我的应用，我们将更改名称

1306
00:59:27,720 --> 00:59:31,460
从EmojiArt到Emoji太空艺术， 

1307
00:59:31,460 --> 00:59:34,930
无论如何，这可能是一个更好的名字。 

1308
00:59:34,930 --> 00:59:37,623
让我们返回并重新开始。 

1309
00:59:40,260 --> 00:59:43,640
我们可以在这里看到我们的步进器。 

1310
00:59:43,640 --> 00:59:48,080
这就像我们想要的那样

1311
00:59:48,080 --> 00:59:50,140
但不完全是我们想要的

1312
00:59:50,140 --> 00:59:52,920
这是它的标签，选择调色板， 

1313
00:59:52,920 --> 00:59:55,070
然后是正负，步进

1314
00:59:55,070 --> 00:59:58,520
这是调色板名称，所以我喜欢这一部分。 

1315
00:59:58,520 --> 01:00:01,920
但是HStack正在使用所有可用空间， 

1316
01:00:01,920 --> 01:00:03,300
整个宽度就在这里

1317
01:00:03,300 --> 01:00:05,550
这就是为什么它是如此分散的原因。 

1318
01:00:05,550 --> 01:00:08,260
好吧，我们将继续进行研究，然后看看其进展如何。 

1319
01:00:08,260 --> 01:00:10,710
但这有点像我想要的

1320
01:00:10,710 --> 01:00:14,033
因此，现在将这个PaletteChooser放入我们的主视图中。 

1321
01:00:15,479 --> 01:00:18,130
我们将使用ScrollView放入HStack， 

1322
01:00:18,130 --> 01:00:20,580
右边，这是显示调色板的ScrollView。 

1323
01:00:20,580 --> 01:00:25,580
因此，让我们使用我们的PaletteChooser制作一个HStack 

1324
01:00:26,470 --> 01:00:30,333
然后这个ScrollView也在那里。 

1325
01:00:31,750 --> 01:00:32,623
然后我们将运行。 

1326
01:00:39,188 --> 01:00:41,550
好吧，我们正在取得一些进展。 

1327
01:00:41,550 --> 01:00:44,520
这就是我想要的东西，就在这里。 

1328
01:00:44,520 --> 01:00:46,390
但是我绝对不想要这个ChoosePalette， 

1329
01:00:46,390 --> 01:00:49,490
真的没有必要，这很明显

1330
01:00:49,490 --> 01:00:51,740
这将是正负

1331
01:00:51,740 --> 01:00:53,860
无论我的调色板名称在这里， 

1332
01:00:53,860 --> 01:00:55,530
食物或动物或其他任何东西。 

1333
01:00:55,530 --> 01:00:58,283
我肯定会抛弃那边的。 

1334
01:01:00,430 --> 01:01:02,723
通过将其设置为空字段来实现。 

1335
01:01:07,160 --> 01:01:08,560
因此，让我们看看它的外观。 

1336
01:01:11,600 --> 01:01:13,630
嗯，还是不太正确。 

1337
01:01:13,630 --> 01:01:16,180
好像给了我相等的空间

1338
01:01:16,180 --> 01:01:20,540
到我的调色板视图，就像到实际的ScrollView一样。 

1339
01:01:20,540 --> 01:01:24,410
我真的希望这不会得到那么多的空间。 

1340
01:01:24,410 --> 01:01:25,880
所以我们要尝试一些。 

1341
01:01:25,880 --> 01:01:30,650
让我们尝试回到主视图中， 

1342
01:01:30,650 --> 01:01:33,983
使ScrollView获得很高的layoutPriority。 

1343
01:01:36,090 --> 01:01:37,950
使您的布局优先， 

1344
01:01:37,950 --> 01:01:41,440
默认的layoutPriority零， 

1345
01:01:41,440 --> 01:01:43,390
因此希望这可以解决我们的问题。 

1346
01:01:46,240 --> 01:01:48,270
嗯，哎呀，嗯

1347
01:01:48,270 --> 01:01:50,010
好吧，这很有趣。 

1348
01:01:50,010 --> 01:01:52,810
它确实为我们的ScrollView提供了更多空间

1349
01:01:52,810 --> 01:01:57,150
但是现在我们的PaletteChooser没有足够的空间， 

1350
01:01:57,150 --> 01:02:00,380
只是在这里砸了一下，没有足够的空间。 

1351
01:02:00,380 --> 01:02:02,710
所以这真的不是正确的解决方案， 

1352
01:02:02,710 --> 01:02:04,780
这很接近，但这不是正确的解决方案。 

1353
01:02:04,780 --> 01:02:06,700
我们想要做到这一点的真正方法

1354
01:02:06,700 --> 01:02:10,850
是让我们的PaletteChooser在这里修复其大小。 

1355
01:02:10,850 --> 01:02:12,480
所以我们希望它是固定的

1356
01:02:12,480 --> 01:02:15,320
在水平方向上，是的， 

1357
01:02:15,320 --> 01:02:17,700
纵向上我们不在乎，假

1358
01:02:17,700 --> 01:02:20,860
和fixedSize意味着它将

1359
01:02:20,860 --> 01:02:22,860
本身适合的尺寸

1360
01:02:22,860 --> 01:02:27,367
并且不会使用提供给它的任何额外空间。 

1361
01:02:27,367 --> 01:02:29,203
我们将看到它的外观。 

1362
01:02:30,720 --> 01:02:32,430
哦，看起来好多了。 

1363
01:02:32,430 --> 01:02:34,320
而且我们已经放弃了标题

1364
01:02:34,320 --> 01:02:38,580
现在有点，而不是使用所有这些空间

1365
01:02:38,580 --> 01:02:41,727
它自己设置在这里的中间

1366
01:02:41,727 --> 01:02:44,370
而且我感觉会很好看

1367
01:02:44,370 --> 01:02:47,340
在我们的用户界面中

1368
01:02:47,340 --> 01:02:49,322
确实如此。 

1369
01:02:49,322 --> 01:02:51,050
而且看起来我不需要那么多

1370
01:02:51,050 --> 01:02:55,117
现在，这个水平步进器具有水平填充

1371
01:02:55,117 --> 01:02:57,620
周围有自己的小填充物

1372
01:02:57,620 --> 01:03:01,110
这样我们在这里进行的水平填充

1373
01:03:01,110 --> 01:03:03,343
可能完全没有必要。 

1374
01:03:06,010 --> 01:03:07,960
好吧，我很喜欢这个外观。 

1375
01:03:09,686 --> 01:03:10,850
我想要的是当我按

1376
01:03:10,850 --> 01:03:12,520
这些加号和减号按钮， 

1377
01:03:12,520 --> 01:03:15,660
它会遍历我拥有的所有调色板， 

1378
01:03:15,660 --> 01:03:20,220
食物，面孔，动物，无论我有什么调色板

1379
01:03:20,220 --> 01:03:23,280
或我创建的内容，希望它在它们之间循环。 

1380
01:03:23,280 --> 01:03:24,620
那我该怎么办呢？ 

1381
01:03:24,620 --> 01:03:28,740
好吧，我不想在演示中浪费太多时间

1382
01:03:28,740 --> 01:03:31,900
我们如何获得调色板数组

1383
01:03:31,900 --> 01:03:33,980
并逐步了解它们。 

1384
01:03:33,980 --> 01:03:37,910
所以我实际上是在离线状态下完成的，这个小代码就在这里， 

1385
01:03:37,910 --> 01:03:40,620
大家从论坛上得到的

1386
01:03:40,620 --> 01:03:43,290
在这堂课之前被张贴了

1387
01:03:43,290 --> 01:03:45,640
而且我们不会经历所有这一切， 

1388
01:03:45,640 --> 01:03:48,460
但这里有一些默认调色板

1389
01:03:48,460 --> 01:03:51,790
它使您可以从调色板中添加和删除表情符号

1390
01:03:51,790 --> 01:03:55,440
它对于步进器确实具有这两个非常好的功能

1391
01:03:55,440 --> 01:03:58,240
这是给我其他调色板之后的调色板

1392
01:03:58,240 --> 01:04:00,940
然后先给我这个调色板

1393
01:04:00,940 --> 01:04:03,100
所以我要用那些做我的步进器

1394
01:04:03,100 --> 01:04:04,253
之前和之后。 

1395
01:04:06,260 --> 01:04:07,800
所以在我的PaletteChooser中， 

1396
01:04:07,800 --> 01:04:10,860
我需要选择的调色板状态。 

1397
01:04:10,860 --> 01:04:13,760
所以我要在这里添加一个@State var。 

1398
01:04:13,760 --> 01:04:17,300
顺便说一句，国家var应该几乎总是私有的。 

1399
01:04:17,300 --> 01:04:18,610
如果它们可以私有，则应该。 

1400
01:04:18,610 --> 01:04:20,690
唯一一次可能不是私人的

1401
01:04:20,690 --> 01:04:22,920
如果您要让某人初始化它们

1402
01:04:22,920 --> 01:04:24,850
当他们创造你的东西时，但是，你知道， 

1403
01:04:24,850 --> 01:04:27,910
@State中的该状态是您的视图的私有状态， 

1404
01:04:27,910 --> 01:04:30,520
只能由您的View真正查看。 

1405
01:04:30,520 --> 01:04:32,573
因此，我们几乎总是将那些标记为私人。 

1406
01:04:33,740 --> 01:04:35,513
我将这个称为“ Palette” 

1407
01:04:35,513 --> 01:04:37,900
这将是selectedPalette，这是一个字符串

1408
01:04:37,900 --> 01:04:41,610
我们将从一无所有开始。 

1409
01:04:41,610 --> 01:04:44,840
然后，当我按下加号时，我将拥有我的步进器， 

1410
01:04:44,840 --> 01:04:46,815
这之后要去调色板

1411
01:04:46,815 --> 01:04:49,338
当我打减号时，它将转到之前的那个。 

1412
01:04:49,338 --> 01:04:54,338
这很容易，self.chosenPalette等于我的文档

1413
01:04:55,690 --> 01:04:58,110
所以我在这里需要我的文件。 

1414
01:04:58,110 --> 01:04:59,970
我不知何故需要我的文件，以便可以说， 

1415
01:04:59,970 --> 01:05:04,970
我当前的self.chosenPalette之后的调色板。 

1416
01:05:08,960 --> 01:05:11,140
所以我需要我的文件，所以让我们把它放在这里。 

1417
01:05:11,140 --> 01:05:12,212
我们能做到这一点。 

1418
01:05:12,212 --> 01:05:17,212
ObservedObject var文档，它是一个EmojiArtDocument。 

1419
01:05:18,270 --> 01:05:19,560
但这确实意味着

1420
01:05:19,560 --> 01:05:22,300
当我们在此处创建paletteChooser时， 

1421
01:05:22,300 --> 01:05:23,133
参见paletteChooser， 

1422
01:05:23,133 --> 01:05:25,543
我们将不得不传递文件。 

1423
01:05:28,990 --> 01:05:30,870
将我们的文件传递到这里

1424
01:05:30,870 --> 01:05:33,790
到我们的paletteChooser中，我们可以做到。 

1425
01:05:33,790 --> 01:05:36,230
下次我们会看到另一种方式， 

1426
01:05:36,230 --> 01:05:37,380
但现在可以使用。 

1427
01:05:38,320 --> 01:05:40,390
然后，当我们递减时，我们会说

1428
01:05:40,390 --> 01:05:45,390
self.chosenPalette = self.document.palette之前。 

1429
01:05:48,127 --> 01:05:49,680
因此，它使我们可以递增和递减它们。 

1430
01:05:49,680 --> 01:05:51,780
另一件事是我们不想在这里说“ Palette Name” 

1431
01:05:51,780 --> 01:05:53,350
我们实际上需要调色板的名称。 

1432
01:05:53,350 --> 01:05:55,897
我有一个不错的小字典

1433
01:05:55,897 --> 01:05:57,380
并说这里的文字是

1434
01:05:57,380 --> 01:05:59,400
document.palette选择的名称

1435
01:06:03,270 --> 01:06:04,500
如果找不到， 

1436
01:06:04,500 --> 01:06:07,853
我只是要一个空的名字。 

1437
01:06:09,290 --> 01:06:10,510
PaletteChooser在这里， 

1438
01:06:10,510 --> 01:06:12,860
让我们为其创建一个空文档， 

1439
01:06:12,860 --> 01:06:16,823
EmojiArtDocument并运行。 

1440
01:06:18,588 --> 01:06:19,520
开始了。 

1441
01:06:19,520 --> 01:06:21,470
它从一无所有的调色板开始

1442
01:06:21,470 --> 01:06:23,270
但是如果我开始骑自行车，呜， 

1443
01:06:24,210 --> 01:06:26,910
看，活动，动物，面孔，食物。 

1444
01:06:26,910 --> 01:06:28,133
现在，有趣的是， 

1445
01:06:28,133 --> 01:06:32,040
肯定是在我可用的调色板中循环

1446
01:06:32,040 --> 01:06:34,080
您可以在这里看到

1447
01:06:34,080 --> 01:06:35,900
面孔，食物，动物，活动， 

1448
01:06:35,900 --> 01:06:40,240
但实际上并没有改变调色板。 

1449
01:06:40,240 --> 01:06:41,560
这个调色板一直保持这种状态

1450
01:06:41,560 --> 01:06:44,050
悲伤的小调色板在这里。 

1451
01:06:44,050 --> 01:06:47,050
嗯，这很合理，因为我们的PaletteChooser 

1452
01:06:47,050 --> 01:06:50,620
只是在此视图中在本地州内选择它， 

1453
01:06:50,620 --> 01:06:52,960
别无选择

1454
01:06:52,960 --> 01:06:55,710
只是在这里设置这个小选择的面板。 

1455
01:06:57,280 --> 01:06:59,760
顺便说一句，我可能也可以解决这个问题

1456
01:06:59,760 --> 01:07:02,260
没有调色板的地方

1457
01:07:02,260 --> 01:07:03,593
通过做类似的事情， 

1458
01:07:06,785 --> 01:07:09,952
onAppear，也就是说我选择的调色板

1459
01:07:12,260 --> 01:07:16,033
等于我文档的默认调色板。 

1460
01:07:16,970 --> 01:07:20,260
我在onAppear上这样做，而不是尝试这样做， 

1461
01:07:20,260 --> 01:07:22,253
例如，在这里。 

1462
01:07:23,680 --> 01:07:25,130
不能在这里做

1463
01:07:25,130 --> 01:07:27,710
因为我们在初始化过程中

1464
01:07:27,710 --> 01:07:31,280
并且此var尚未初始化。 

1465
01:07:31,280 --> 01:07:33,824
所以，只要你发现自己在说，哦， 

1466
01:07:33,824 --> 01:07:38,770
我想从其他变量初始化一些状态

1467
01:07:38,770 --> 01:07:41,090
从我的ObservedObject，没问题。 

1468
01:07:41,090 --> 01:07:44,310
只需将其设置为零或零即可， 

1469
01:07:44,310 --> 01:07:47,513
空的String，然后onAppear即可。 

1470
01:07:51,020 --> 01:07:52,280
瞧

1471
01:07:52,280 --> 01:07:55,330
所以我们将问题解决了

1472
01:07:55,330 --> 01:07:57,327
此处显示的初始调色板。 

1473
01:07:57,327 --> 01:08:00,930
还有我们的PaletteChooser，已经准备好去这里了。 

1474
01:08:00,930 --> 01:08:04,440
但是，我们真的不对调色板做任何事情

1475
01:08:04,440 --> 01:08:07,620
在我们这里的主要可滚动调色板中。 

1476
01:08:07,620 --> 01:08:09,300
所以我们需要得到那个东西

1477
01:08:09,300 --> 01:08:11,153
开始显示selectedPalette。 

1478
01:08:12,520 --> 01:08:13,860
因此，让我们至少从获得它开始

1479
01:08:13,860 --> 01:08:15,650
显示默认调色板。 

1480
01:08:15,650 --> 01:08:18,690
我们将通过在此处创建一些状态来做到这一点

1481
01:08:18,690 --> 01:08:23,270
在我们的主视图中，@ State var selectedPalette， 

1482
01:08:24,860 --> 01:08:27,070
字符串等于零。 

1483
01:08:27,070 --> 01:08:29,430
我什至会在这里做同样的把戏

1484
01:08:29,430 --> 01:08:32,410
onAppear，我正在复制和粘贴代码， 

1485
01:08:32,410 --> 01:08:35,340
那可能是个问题， 

1486
01:08:35,340 --> 01:08:38,010
但是我们会看到，这个问题不再重要

1487
01:08:38,010 --> 01:08:39,620
在短短的时间内。 

1488
01:08:39,620 --> 01:08:42,110
现在，不用说EmojiArt调色板了， 

1489
01:08:42,110 --> 01:08:45,040
我要说我选择的调色板

1490
01:08:45,040 --> 01:08:47,703
并改用我的selectedPalette。 

1491
01:08:49,357 --> 01:08:50,707
这就是我要做的

1492
01:08:52,300 --> 01:08:55,420
开始使用默认调色板

1493
01:08:55,420 --> 01:08:56,650
看起来，它甚至排成一行， 

1494
01:08:56,650 --> 01:08:58,090
因为这是使用默认调色板。 

1495
01:08:58,090 --> 01:08:59,080
哦，我们去下一个。 

1496
01:08:59,080 --> 01:09:01,990
哦，食物，那不是食物。 

1497
01:09:01,990 --> 01:09:04,200
哦，不行。 

1498
01:09:04,200 --> 01:09:05,320
那么这是怎么回事？ 

1499
01:09:05,320 --> 01:09:08,340
为什么选择的Palette改变而没有改变？ 

1500
01:09:08,340 --> 01:09:11,760
那是因为这个selectedPalette在一个州的var中

1501
01:09:11,760 --> 01:09:14,860
在此视图和此选择的面板中

1502
01:09:14,860 --> 01:09:16,960
在另一个视图中处于不同的状态变量。 

1503
01:09:16,960 --> 01:09:18,670
因此，这些事情与之无关。 

1504
01:09:18,670 --> 01:09:20,960
唯一相同的是他们的名字。 

1505
01:09:20,960 --> 01:09:22,930
但是他们是完全不同的国家。 

1506
01:09:22,930 --> 01:09:27,067
但是很显然，我们希望这两件事是相同的。 

1507
01:09:27,067 --> 01:09:29,510
我们通过绑定来实现。 

1508
01:09:29,510 --> 01:09:32,040
因此，这里没有自己的状态

1509
01:09:32,040 --> 01:09:33,090
在paletteChooser中， 

1510
01:09:33,090 --> 01:09:35,990
它只会有一个绑定。 

1511
01:09:35,990 --> 01:09:38,090
而且绑定通常不是私有的

1512
01:09:38,090 --> 01:09:42,070
因为我们将以某种方式从外部设置它们

1513
01:09:42,070 --> 01:09:44,230
还有绑定，我们不初始化它们

1514
01:09:44,230 --> 01:09:46,460
因为Binding表示此var 

1515
01:09:46,460 --> 01:09:48,110
将获得并设置其价值

1516
01:09:48,110 --> 01:09:50,290
从其他地方的其他变种。 

1517
01:09:50,290 --> 01:09:52,740
大概是其他地方的其他变种

1518
01:09:52,740 --> 01:09:54,940
是要初始化的东西。 

1519
01:09:58,360 --> 01:10:00,530
好的，我们如何设置绑定

1520
01:10:00,530 --> 01:10:05,160
在这个selectedPalette和这个selectedPalette之间？ 

1521
01:10:05,160 --> 01:10:08,350
好吧，我们只是通过它，非常简单，我们只是说， 

1522
01:10:08,350 --> 01:10:13,120
selectedPalette，因为selectedPalette只是一个变量， 

1523
01:10:13,120 --> 01:10:15,487
只不过是PaletteChooser中的var 

1524
01:10:15,487 --> 01:10:17,670
我们正在那边创建一个PaletteChooser 

1525
01:10:17,670 --> 01:10:20,340
所以我们可以设置任何未设置的变量

1526
01:10:20,340 --> 01:10:24,460
我们正在设置此未设置的变量，也可以设置此变量

1527
01:10:24,460 --> 01:10:28,260
我们将其设置为projectedValue 

1528
01:10:28,260 --> 01:10:30,560
我们选择的调色板中。 

1529
01:10:30,560 --> 01:10:34,350
因此，请记住，该州也有一个$， 

1530
01:10:34,350 --> 01:10:37,307
但是它不是发布者，而是@Published的价格。 

1531
01:10:38,484 --> 01:10:43,467
@State的$是对此selectedPalette的绑定。 

1532
01:10:44,480 --> 01:10:49,030
这就是为什么我可以在这里传递它，$ chosenPalette， 

1533
01:10:49,030 --> 01:10:52,970
匹配此var类型（即Binding）， 

1534
01:10:52,970 --> 01:10:53,923
到这个字符串。 

1535
01:10:55,340 --> 01:10:58,180
现在，因为我将这两件事绑定在一起， 

1536
01:10:58,180 --> 01:11:00,890
这个东西，这个，我不需要做onAppear 

1537
01:11:00,890 --> 01:11:03,030
在其中一个或另一个中， 

1538
01:11:03,030 --> 01:11:05,830
所以我们就不要在这里做onAppear了。 

1539
01:11:05,830 --> 01:11:07,890
onAppear将会在这里发生

1540
01:11:07,890 --> 01:11:10,040
它会设置并传达信息

1541
01:11:10,040 --> 01:11:12,360
通过绑定到这个家伙， 

1542
01:11:12,360 --> 01:11:13,820
他会看到同样的事情。 

1543
01:11:13,820 --> 01:11:16,530
同样，当他选择递增或递减时， 

1544
01:11:16,530 --> 01:11:19,110
它将通过绑定通讯回来

1545
01:11:19,110 --> 01:11:20,760
另一种方法。 

1546
01:11:20,760 --> 01:11:22,940
现在，在我们可以运行之前，我们必须修复我们的预览

1547
01:11:22,940 --> 01:11:27,750
因为我们的预览需要一个selectedPalette参数

1548
01:11:27,750 --> 01:11:29,270
因为它正在创建它。 

1549
01:11:29,270 --> 01:11:32,030
预览通过了什么？ 

1550
01:11:32,030 --> 01:11:34,140
实际上有进行预览的方法

1551
01:11:34,140 --> 01:11:37,040
具有实时绑定功能，但超出了范围

1552
01:11:37,040 --> 01:11:38,290
我们在这里做什么。 

1553
01:11:38,290 --> 01:11:42,700
所以我要通过.constant绑定

1554
01:11:42,700 --> 01:11:45,010
我将拥有绑定功能，这并不重要， 

1555
01:11:45,010 --> 01:11:48,630
可以是任何String，所以在我的预览中选择了Palette 

1556
01:11:48,630 --> 01:11:51,750
会被束缚到那里的调色板虚无， 

1557
01:11:51,750 --> 01:11:53,350
空字符串。 

1558
01:11:53,350 --> 01:11:55,100
单击加号减号不会做任何事情

1559
01:11:55,100 --> 01:11:56,083
在我的预览中。 

1560
01:11:57,890 --> 01:11:59,343
好吧，看看。 

1561
01:12:02,400 --> 01:12:03,630
好，他们已经同步了。 

1562
01:12:03,630 --> 01:12:05,570
看起来像动物，这是动物， 

1563
01:12:05,570 --> 01:12:10,570
加号，宇，脸，食物，活动，动物呢？ 

1564
01:12:12,360 --> 01:12:16,700
所以这种绑定是我们绑定两个视图的状态

1565
01:12:16,700 --> 01:12:19,490
在SwiftUI中非常关键。 

1566
01:12:19,490 --> 01:12:21,170
我很惊讶我们一路走来

1567
01:12:21,170 --> 01:12:22,950
通过本课程的四个星期

1568
01:12:22,950 --> 01:12:26,020
而且我们设法避免谈论绑定， 

1569
01:12:26,020 --> 01:12:27,080
真的很重要

1570
01:12:27,080 --> 01:12:30,530
不只是在我们自己的两个视图之间进行绑定， 

1571
01:12:30,530 --> 01:12:35,530
好的，我们的EmojiArtFocument视图和PaletteChooser视图

1572
01:12:35,580 --> 01:12:40,580
但是在我们的视图和SwiftUI的视图之间绑定， 

1573
01:12:40,600 --> 01:12:42,570
特别是诸如TextFields之类的东西， 

1574
01:12:42,570 --> 01:12:44,610
这就是我们从TextField中获取文本的方式

1575
01:12:44,610 --> 01:12:45,620
有人在输入， 

1576
01:12:45,620 --> 01:12:48,410
或切换我们在某处切换的位置， 

1577
01:12:48,410 --> 01:12:51,600
这样做时，我们将具有“绑定到布尔”的功能。 

1578
01:12:51,600 --> 01:12:54,960
甚至像我要在屏幕上放另一个视图的东西

1579
01:12:54,960 --> 01:12:57,390
以某种方式接管屏幕， 

1580
01:12:57,390 --> 01:13:00,120
当它完成时，会让我知道

1581
01:13:00,120 --> 01:13:01,970
通过绑定。 

1582
01:13:01,970 --> 01:13:05,350
布尔绑定说是之后，我完成了还是没有完成。 

1583
01:13:05,350 --> 01:13:07,920
因此，在接下来的几节课中，我们将介绍所有这些内容。 

1584
01:13:07,920 --> 01:13:12,240
大量使用了此Binding，因此请习惯于看它。 

1585
01:13:12,240 --> 01:13:13,460
今天就这样， 

1586
01:13:13,460 --> 01:13:15,363
所以我们下次再讲。 

1587
01:13:16,620 --> 01:13:19,873
-[旁白]有关更多信息，请访问Stanford.edu。 

