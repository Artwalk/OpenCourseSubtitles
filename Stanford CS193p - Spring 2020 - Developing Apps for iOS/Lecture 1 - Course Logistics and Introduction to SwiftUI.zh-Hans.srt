1
00:00:00,998 --> 00:00:03,498
（富豪音乐） 

2
00:00:04,920 --> 00:00:06,513
-[播音员]斯坦福大学。 

3
00:00:08,430 --> 00:00:12,470
-欢迎来到斯坦福CS193p。 

4
00:00:12,470 --> 00:00:16,730
这是2020年春季季度。 

5
00:00:16,730 --> 00:00:19,940
我是Paul Hegarty，我将成为您的导游

6
00:00:19,940 --> 00:00:23,230
冒险开发应用程序

7
00:00:23,230 --> 00:00:26,490
适用于使用SwiftUI的iOS。 

8
00:00:26,490 --> 00:00:28,530
这个季度将是一次冒险

9
00:00:28,530 --> 00:00:31,810
因为你们没人跟我在校园里

10
00:00:31,810 --> 00:00:33,310
这让我很难过。 

11
00:00:33,310 --> 00:00:35,570
这会有点奇怪。 

12
00:00:35,570 --> 00:00:38,670
我相信这对你们所有人来说都会很奇怪。 

13
00:00:38,670 --> 00:00:41,860
并不会真的对我们造成太大影响

14
00:00:41,860 --> 00:00:43,930
在这个过程中，信不信由你， 

15
00:00:43,930 --> 00:00:46,010
因为大多数沟通

16
00:00:46,010 --> 00:00:48,980
你我之间正在发生的事

17
00:00:48,980 --> 00:00:51,930
通过我们的课堂论坛Piazza。 

18
00:00:51,930 --> 00:00:53,769
所以你绝对想上广场

19
00:00:53,769 --> 00:00:55,840
在那里问问题。 

20
00:00:55,840 --> 00:00:57,273
别害羞。 

21
00:00:58,260 --> 00:01:00,540
我们在这里得到非常快速的答复。 

22
00:01:00,540 --> 00:01:03,110
看看同学们也在问什么。 

23
00:01:03,110 --> 00:01:06,090
而且一定是在找我的帖子

24
00:01:06,090 --> 00:01:08,520
因为所有课程资料，所有公告

25
00:01:08,520 --> 00:01:10,650
将通过广场制作。 

26
00:01:10,650 --> 00:01:12,353
因此，请不要错过这一部分。 

27
00:01:13,290 --> 00:01:15,720
现在，所有的演讲都将被预先录制

28
00:01:15,720 --> 00:01:17,070
就这样

29
00:01:17,070 --> 00:01:19,590
我想那对你会方便

30
00:01:19,590 --> 00:01:20,860
因为他们出来之后

31
00:01:20,860 --> 00:01:22,790
你可以在闲暇时看他们

32
00:01:22,790 --> 00:01:24,800
并快进和快退。 

33
00:01:24,800 --> 00:01:28,330
特别是由于我要进行很多演示， 

34
00:01:28,330 --> 00:01:30,940
那将是非常有价值的。 

35
00:01:30,940 --> 00:01:33,810
我想这也会带来很大的好处

36
00:01:33,810 --> 00:01:38,010
就像我们在本课程中做过很多次一样

37
00:01:38,010 --> 00:01:42,250
我们将课程免费发布给全世界。 

38
00:01:42,250 --> 00:01:44,040
这样人们就可以观看。 

39
00:01:44,040 --> 00:01:46,354
基本上在这里监视我们

40
00:01:46,354 --> 00:01:48,890
正如我们在斯坦福大学上的课程一样。 

41
00:01:48,890 --> 00:01:50,260
我们会再做一次

42
00:01:50,260 --> 00:01:53,140
在执行标准隐藏式字幕后

43
00:01:53,140 --> 00:01:55,230
和其他后期制作工作。 

44
00:01:55,230 --> 00:01:58,250
因此，如果您在斯坦福大学外面看我， 

45
00:01:58,250 --> 00:02:00,430
也欢迎您。 

46
00:02:00,430 --> 00:02:03,000
现在，您当然无法参加

47
00:02:03,000 --> 00:02:05,020
在论坛上与其他斯坦福大学的学生一起

48
00:02:05,020 --> 00:02:07,593
因为您稍后再看。 

49
00:02:08,630 --> 00:02:11,130
但是有基于社区的资源

50
00:02:11,130 --> 00:02:13,140
在世界各地问问题

51
00:02:13,140 --> 00:02:14,570
例如堆栈溢出。 

52
00:02:14,570 --> 00:02:18,640
因此，当然也要去检查一下。 

53
00:02:18,640 --> 00:02:21,260
这个SwiftUI东西是全新的， 

54
00:02:21,260 --> 00:02:22,730
从字面上看只是几个月。 

55
00:02:22,730 --> 00:02:26,120
因此，您处于技术的最前沿

56
00:02:26,120 --> 00:02:29,510
在为iOS开发应用程序时。 

57
00:02:29,510 --> 00:02:31,730
当你学到这一点时， 

58
00:02:31,730 --> 00:02:33,790
有些事情会让您熟悉。 

59
00:02:33,790 --> 00:02:34,623
有一点

60
00:02:34,623 --> 00:02:36,720
那里的面向对象编程。 

61
00:02:36,720 --> 00:02:40,040
您将要学习的这种语言有点像C。 

62
00:02:40,040 --> 00:02:43,660
它也与Java之类的语言共享一些语法。 

63
00:02:43,660 --> 00:02:45,120
这样就很熟悉了。 

64
00:02:45,120 --> 00:02:46,910
但是你可能会学习

65
00:02:46,910 --> 00:02:50,470
也为您提供了一些全新的东西。 

66
00:02:50,470 --> 00:02:51,970
例如，您将要学习

67
00:02:51,970 --> 00:02:53,640
一种新的编程语言Swift。 

68
00:02:53,640 --> 00:02:57,070
我敢肯定，几乎对你们所有人来说都是全新的。 

69
00:02:57,070 --> 00:02:58,470
而这种编程语言

70
00:02:58,470 --> 00:03:00,320
它支持面向对象的编程， 

71
00:03:00,320 --> 00:03:02,520
它还支持另一种编程

72
00:03:02,520 --> 00:03:04,220
称为函数式编程

73
00:03:04,220 --> 00:03:06,350
或面向协议的编程。 

74
00:03:06,350 --> 00:03:09,000
而且我不会假设你知道。 

75
00:03:09,000 --> 00:03:12,880
因此，我将一路教给您所有有关这方面的知识。 

76
00:03:12,880 --> 00:03:16,670
用户界面范例也称为反应式。 

77
00:03:16,670 --> 00:03:19,440
它是声明性的而不是命令性的。 

78
00:03:19,440 --> 00:03:21,490
我要解释这一切的意思

79
00:03:21,490 --> 00:03:22,950
所以这对您来说是新的。 

80
00:03:22,950 --> 00:03:25,890
并且可能还有其他一些新主题。 

81
00:03:25,890 --> 00:03:28,920
例如，我希望涵盖

82
00:03:28,920 --> 00:03:30,830
iOS的面向对象的数据库

83
00:03:30,830 --> 00:03:33,180
这真的是很酷的技术。 

84
00:03:33,180 --> 00:03:36,480
但无论如何，您将在本课程中学到的所有知识

85
00:03:36,480 --> 00:03:40,000
真的只是一种调查课程

86
00:03:40,000 --> 00:03:43,440
或实际应用程序的集合

87
00:03:43,440 --> 00:03:46,450
您在这里的其他CS课中正在学习的东西。 

88
00:03:46,450 --> 00:03:49,760
显然，例如，计算机人机界面。 

89
00:03:49,760 --> 00:03:52,310
API设计和语言设计。 

90
00:03:52,310 --> 00:03:54,640
动画，持久性，网络，多线程， 

91
00:03:54,640 --> 00:03:56,220
所有这些都在这里列出

92
00:03:56,220 --> 00:03:59,130
绝对会是东西

93
00:03:59,130 --> 00:04:00,610
我们在本课程中包括的内容。 

94
00:04:00,610 --> 00:04:03,000
因此，您将一起看到这一切

95
00:04:03,000 --> 00:04:05,950
在现实环境中。 

96
00:04:05,950 --> 00:04:07,550
所以让我们谈谈

97
00:04:07,550 --> 00:04:08,850
课程的机制

98
00:04:08,850 --> 00:04:11,430
就像它实际会如何播放。 

99
00:04:11,430 --> 00:04:14,350
在这些预先录制的演讲中， 

100
00:04:14,350 --> 00:04:16,940
我将尝试并花费大部分时间进行演示。 

101
00:04:16,940 --> 00:04:18,480
我真的相信演示。 

102
00:04:18,480 --> 00:04:21,090
我认为它们使概念非常具体。 

103
00:04:21,090 --> 00:04:24,840
因此，我可能会在演示上花费大约2/3的时间。 

104
00:04:24,840 --> 00:04:28,110
但是有时候我确实必须去看幻灯片。 

105
00:04:28,110 --> 00:04:30,190
这是为了涵盖概念

106
00:04:30,190 --> 00:04:32,530
如果您不了解它们， 

107
00:04:32,530 --> 00:04:35,151
演示可能没有任何意义。 

108
00:04:35,151 --> 00:04:37,420
举例来说，在第二堂课的开头， 

109
00:04:37,420 --> 00:04:40,740
我将介绍MVVM，设计范例

110
00:04:40,740 --> 00:04:42,560
我们用来组织代码。 

111
00:04:42,560 --> 00:04:45,130
我还将介绍Swift中的类型系统

112
00:04:45,130 --> 00:04:46,970
因为这对于理解至关重要

113
00:04:46,970 --> 00:04:50,830
Swift的工作原理，以了解其类型系统。 

114
00:04:50,830 --> 00:04:53,610
但是，如果可以的话，我总是倾向于演示

115
00:04:53,610 --> 00:04:54,900
因为我们想度过我们的时间

116
00:04:54,900 --> 00:04:56,740
实际在做iOS开发。 

117
00:04:56,740 --> 00:04:58,930
这就是我们在这里学习的内容。 

118
00:04:58,930 --> 00:05:01,660
就您而言，您将需要阅读一些内容

119
00:05:01,660 --> 00:05:02,750
前三周。 

120
00:05:02,750 --> 00:05:05,740
这主要是为了学习Swift语言。 

121
00:05:05,740 --> 00:05:09,100
有在线Swift编程参考手册

122
00:05:09,100 --> 00:05:12,040
在接下来的三个星期里，我将指导您

123
00:05:12,040 --> 00:05:13,980
尝试并有效地帮助您。 

124
00:05:13,980 --> 00:05:15,930
因为它是一个很大的文件

125
00:05:15,930 --> 00:05:17,990
我不希望你花钱

126
00:05:17,990 --> 00:05:20,060
在那里的时间过长。 

127
00:05:20,060 --> 00:05:22,320
但是出于同样的原因，您必须了解Swift 

128
00:05:22,320 --> 00:05:23,900
能够做SwiftUI。 

129
00:05:24,890 --> 00:05:26,953
当然会有编程作业。 

130
00:05:26,953 --> 00:05:29,363
它们通常大约一周。 

131
00:05:30,220 --> 00:05:32,550
一共有四五个。 

132
00:05:32,550 --> 00:05:35,770
这个季度有点短，从一个星期晚开始。 

133
00:05:35,770 --> 00:05:37,930
所以这四五个编程任务

134
00:05:37,930 --> 00:05:40,140
将在头六周内。 

135
00:05:40,140 --> 00:05:43,010
原因是我离开了最后三个星期

136
00:05:43,010 --> 00:05:45,210
供您完成最终项目。 

137
00:05:45,210 --> 00:05:46,950
这个最终的项目是高潮

138
00:05:46,950 --> 00:05:48,690
你学到的一切， 

139
00:05:48,690 --> 00:05:50,870
这样我们就没有任何编程任务

140
00:05:50,870 --> 00:05:53,100
在最后的三个星期中。 

141
00:05:53,100 --> 00:05:55,880
如果您访问在线论坛，课程论坛， 

142
00:05:55,880 --> 00:05:59,027
那里还有很多信息。 

143
00:05:59,027 --> 00:06:00,750
教学大纲在那里发布

144
00:06:00,750 --> 00:06:01,940
所以我鼓励你阅读

145
00:06:01,940 --> 00:06:02,850
如果您还没有的话。 

146
00:06:02,850 --> 00:06:04,260
希望你有。 

147
00:06:04,260 --> 00:06:07,410
让我们从这里开始构建我们的第一个应用程序。 

148
00:06:07,410 --> 00:06:09,740
我有一个录像带

149
00:06:09,740 --> 00:06:13,510
我们将要构建的第一个应用程序的外观。 

150
00:06:13,510 --> 00:06:15,530
这就是它的样子。 

151
00:06:15,530 --> 00:06:16,970
这是纸牌配对游戏。 

152
00:06:16,970 --> 00:06:19,150
那些在视频中看过本课程的人

153
00:06:19,150 --> 00:06:21,030
过去会承认这一点。 

154
00:06:21,030 --> 00:06:22,920
但是当然这都是用SwiftUI编写的

155
00:06:22,920 --> 00:06:25,260
因此它是一个全新的应用程序。 

156
00:06:25,260 --> 00:06:27,640
而且它具有比以前更多的功能。 

157
00:06:27,640 --> 00:06:30,330
在SwiftUI中，有些事情确实很容易做到。 

158
00:06:30,330 --> 00:06:32,150
因此，您可以看到它有很多动画。 

159
00:06:32,150 --> 00:06:33,653
这些卡正在翻转。 

160
00:06:34,770 --> 00:06:36,150
数字飞来飞去

161
00:06:36,150 --> 00:06:38,780
当您匹配和错配卡片时。 

162
00:06:38,780 --> 00:06:41,140
你有那个小小的彩色戒指

163
00:06:41,140 --> 00:06:43,910
在后台旋转。 

164
00:06:43,910 --> 00:06:45,670
因此，我们将在本课程中做很多动画工作。 

165
00:06:45,670 --> 00:06:48,883
动画对于良好的移动用户界面非常重要。 

166
00:06:50,610 --> 00:06:54,400
您还可以看到该应用程序的

167
00:06:54,400 --> 00:06:57,070
多个主题，不同的颜色。 

168
00:06:57,070 --> 00:06:59,110
我们有那个万圣节版本。 

169
00:06:59,110 --> 00:07:01,140
这里有这些标志。 

170
00:07:01,140 --> 00:07:03,960
我们的卡片仅显示表情符号。 

171
00:07:03,960 --> 00:07:05,580
显然我那里的小视频

172
00:07:05,580 --> 00:07:07,270
很快就会四处点击， 

173
00:07:07,270 --> 00:07:08,970
但您正在通过视频观看

174
00:07:08,970 --> 00:07:10,960
这样您就可以备份并暂停

175
00:07:10,960 --> 00:07:13,550
并仔细看一些动画

176
00:07:13,550 --> 00:07:15,500
以及那里正在发生的事情。 

177
00:07:16,580 --> 00:07:17,690
这就是我们要花费的

178
00:07:17,690 --> 00:07:20,670
在演示中最初的两三个星期

179
00:07:20,670 --> 00:07:24,423
并在您的家庭作业中致力于构建此应用程序。 

180
00:07:26,610 --> 00:07:28,220
顺便说一句，你可能不会见我

181
00:07:28,220 --> 00:07:30,010
在本季度的剩余时间里

182
00:07:30,010 --> 00:07:32,070
因为我们要进行屏幕记录。 

183
00:07:32,070 --> 00:07:35,030
这样您就可以听到我无形的声音。 

184
00:07:35,030 --> 00:07:36,510
顺便说一下，我无形的声音

185
00:07:36,510 --> 00:07:37,680
听起来会有些不同

186
00:07:37,680 --> 00:07:39,300
因为我要用我的AirPods 

187
00:07:39,300 --> 00:07:42,320
当我做屏幕录像时。 

188
00:07:42,320 --> 00:07:44,940
它减少了鼠标点击的次数

189
00:07:44,940 --> 00:07:47,500
然后敲击键盘等等。 

190
00:07:47,500 --> 00:07:51,110
所以，如果您在本季度的剩余时间里再也没有看到我， 

191
00:07:51,110 --> 00:07:54,380
享受我无形的声音。 

192
00:07:54,380 --> 00:07:56,130
因此，我们所做的所有工作

193
00:07:56,130 --> 00:07:58,620
将被放在一个名为Xcode的应用程序中。 

194
00:07:58,620 --> 00:08:00,740
这是iOS的开发环境

195
00:08:00,740 --> 00:08:01,850
包罗万象。 

196
00:08:01,850 --> 00:08:04,540
它包括源代码编辑编译器， 

197
00:08:04,540 --> 00:08:07,200
调试器，一切都集中在一处。 

198
00:08:07,200 --> 00:08:09,100
您可以从App Store免费获得它

199
00:08:09,100 --> 00:08:11,070
如果您只是在Mac上进入App Store 

200
00:08:11,070 --> 00:08:12,493
并搜索Xcode。 

201
00:08:13,691 --> 00:08:16,160
您会发现这可能是第一场比赛。 

202
00:08:16,160 --> 00:08:17,990
您可以在这里看到它。 

203
00:08:17,990 --> 00:08:21,240
当您启动Xcode时，它会看起来像这样。 

204
00:08:21,240 --> 00:08:25,430
现在，您第一个任务的第一个必需任务

205
00:08:25,430 --> 00:08:27,550
是重现我所做的一切

206
00:08:27,550 --> 00:08:28,710
在前两个讲座中。 

207
00:08:28,710 --> 00:08:33,580
因此，您可能想暂停该视频并下载Xcode 

208
00:08:33,580 --> 00:08:35,610
并准备跟着我。 

209
00:08:35,610 --> 00:08:38,120
或者您可以在闲暇时观看此视频， 

210
00:08:38,120 --> 00:08:40,230
浸泡一下然后回去

211
00:08:40,230 --> 00:08:42,910
然后倒带，快进

212
00:08:42,910 --> 00:08:46,720
来满足第一个必需的任务。 

213
00:08:46,720 --> 00:08:51,050
因此，在此初始屏幕中，它具有两个方面。 

214
00:08:51,050 --> 00:08:53,260
这是将要建立的近期项目

215
00:08:53,260 --> 00:08:55,060
随着季度的进行。 

216
00:08:55,060 --> 00:08:58,640
然后，从本质上讲，这就是我们进入项目的方式。 

217
00:08:58,640 --> 00:09:01,520
我们将在这里选择第二行

218
00:09:01,520 --> 00:09:04,420
创建一个新的Xcode项目。 

219
00:09:04,420 --> 00:09:07,370
现在，可以像我们前面提到的那样使用Xcode， 

220
00:09:07,370 --> 00:09:10,160
不仅适用于iOS应用，还适用于Watch应用

221
00:09:10,160 --> 00:09:13,510
和Apple TV应用程序，甚至只是Mac应用程序。 

222
00:09:13,510 --> 00:09:16,820
在本课程中，我们将专注于构建iOS应用， 

223
00:09:16,820 --> 00:09:19,221
但是您所学到的关于SwiftUI的一切， 

224
00:09:19,221 --> 00:09:21,993
它也适用于所有其他平台。 

225
00:09:23,190 --> 00:09:27,350
现在，这些图标都只是模板。 

226
00:09:27,350 --> 00:09:30,070
本质上，预包装的少量代码

227
00:09:30,070 --> 00:09:33,890
让您开始使用某些类型的应用。 

228
00:09:33,890 --> 00:09:36,140
但是我们将选择Single View App 

229
00:09:36,140 --> 00:09:38,490
我认为本季度每个应用程序。 

230
00:09:38,490 --> 00:09:40,370
这是最简单的模板

231
00:09:40,370 --> 00:09:42,450
你会发现它真的不会产生

232
00:09:42,450 --> 00:09:44,640
很多代码可以帮助您入门。 

233
00:09:44,640 --> 00:09:46,870
因此，我们双击它。 

234
00:09:46,870 --> 00:09:49,540
现在，它想知道一些有趣的事情

235
00:09:49,540 --> 00:09:52,490
有关您的应用的信息，尤其是名称。 

236
00:09:52,490 --> 00:09:55,540
因此，我将其称为“记忆”。 

237
00:09:55,540 --> 00:09:57,650
对于那些可能正在观看此内容的人

238
00:09:57,650 --> 00:10:00,400
谁看过以前的视频

239
00:10:00,400 --> 00:10:04,140
本课程过去的四分之一， 

240
00:10:04,140 --> 00:10:07,870
您会知道我以前做过这个记忆匹配游戏。 

241
00:10:07,870 --> 00:10:11,630
显然在SwiftUI中不是，因为那是全新的。 

242
00:10:11,630 --> 00:10:14,978
我称它为专注而不是记忆。 

243
00:10:14,978 --> 00:10:17,750
我这样做是有原因的，使用了另一个名称

244
00:10:17,750 --> 00:10:21,330
这样，如果我们想参考它，我可以提一下。 

245
00:10:21,330 --> 00:10:22,660
当我说专心

246
00:10:22,660 --> 00:10:26,450
我的意思是旧的非Swiftift版本。 

247
00:10:26,450 --> 00:10:28,920
而做相同的应用程序将允许你们

248
00:10:28,920 --> 00:10:31,530
谁可能已经知道一些UIKit 

249
00:10:31,530 --> 00:10:34,020
或有一些这样做的经验

250
00:10:34,020 --> 00:10:36,510
比较和对比外观

251
00:10:36,510 --> 00:10:38,230
在SwiftUI中做到这一点。 

252
00:10:39,330 --> 00:10:41,560
所以这第二件事，团队， 

253
00:10:41,560 --> 00:10:43,960
那就是您的开发团队。 

254
00:10:43,960 --> 00:10:46,550
在这种情况下，这是一个个人团队，只有我一个人。 

255
00:10:46,550 --> 00:10:47,980
当您启动Xcode时， 

256
00:10:47,980 --> 00:10:51,150
这可能会说类似添加团队。 

257
00:10:51,150 --> 00:10:54,250
当您单击它时，只需输入任何Apple ID 

258
00:10:54,250 --> 00:10:56,100
您可以创建自己的团队。 

259
00:10:56,100 --> 00:10:57,320
如果你在一家公司工作， 

260
00:10:57,320 --> 00:11:01,153
它可能是这里的公司开发团队。 

261
00:11:02,120 --> 00:11:05,430
组织名称，这是您的名字。 

262
00:11:05,430 --> 00:11:07,840
这将出现在文件的顶部， 

263
00:11:07,840 --> 00:11:10,570
由CS193p讲师编写。 

264
00:11:10,570 --> 00:11:12,660
所以你想把你的名字放在那里。 

265
00:11:12,660 --> 00:11:17,090
这想成为您的唯一标识符。 

266
00:11:17,090 --> 00:11:18,600
因此，如果您是斯坦福大学的学生， 

267
00:11:18,600 --> 00:11:22,220
我建议使用这种反向DNS表示法。 

268
00:11:22,220 --> 00:11:27,220
edu.stanford.yoursunetid可能足够好

269
00:11:27,900 --> 00:11:29,100
识别你

270
00:11:29,100 --> 00:11:32,120
如果需要，可以将CS193p放在其中。 

271
00:11:32,120 --> 00:11:34,840
如果您是斯坦福大学的学生，那可能没关系。 

272
00:11:34,840 --> 00:11:37,520
如果您不是斯坦福大学的学生，并且正在观看此视频， 

273
00:11:37,520 --> 00:11:40,440
也许您的电子邮件地址已反转

274
00:11:40,440 --> 00:11:44,010
或您公司的地址颠倒了。 

275
00:11:44,010 --> 00:11:45,660
您只想确保它是唯一的。 

276
00:11:45,660 --> 00:11:46,880
你不会想要挑东西

277
00:11:46,880 --> 00:11:49,610
其他人也可能会选择。 

278
00:11:49,610 --> 00:11:53,080
您可能会看到Xcode使这个唯一标识符

279
00:11:53,080 --> 00:11:55,460
这两个方面为您的应用程序所用。 

280
00:11:55,460 --> 00:11:58,180
然后我们要选择语言。 

281
00:11:58,180 --> 00:12:01,737
iOS的基础

282
00:12:01,737 --> 00:12:04,202
都是用Objective-C语言编写的， 

283
00:12:04,202 --> 00:12:07,817
这是C的面向对象版本。 

284
00:12:07,817 --> 00:12:10,450
但是大约五六年前

285
00:12:10,450 --> 00:12:12,830
苹果公司推出了这种新语言Swift， 

286
00:12:12,830 --> 00:12:15,600
很棒，因为它完全兼容

287
00:12:15,600 --> 00:12:16,680
使用Objective-C。 

288
00:12:16,680 --> 00:12:19,200
因此，所有现有的库都可以正常工作。 

289
00:12:19,200 --> 00:12:22,190
但是它引入了许多现代语言功能， 

290
00:12:22,190 --> 00:12:25,030
特别是对函数式编程的支持

291
00:12:25,030 --> 00:12:26,950
与面向对象的编程相反。 

292
00:12:26,950 --> 00:12:29,860
斯威夫特做到了，你真的会看到

293
00:12:29,860 --> 00:12:31,690
在SwiftUI中，因为SwiftUI基于

294
00:12:31,690 --> 00:12:34,300
函数式编程，而不是面向对象的编程。 

295
00:12:34,300 --> 00:12:36,890
所以我没有时间教你两种语言

296
00:12:36,890 --> 00:12:39,210
我几乎没有时间教你一个新的。 

297
00:12:39,210 --> 00:12:41,700
因此，我们只会在Swift中进行编程。 

298
00:12:41,700 --> 00:12:46,290
当然，SwiftUI都是基于Swift的Swift。 

299
00:12:46,290 --> 00:12:48,610
其他用户界面选择

300
00:12:48,610 --> 00:12:51,750
如果你想以旧的方式发展， 

301
00:12:51,750 --> 00:12:54,450
非SwiftUI方法。 

302
00:12:54,450 --> 00:12:58,170
我经常将这个UIKit称为SwiftUI。 

303
00:12:59,190 --> 00:13:01,340
我们将在SwiftUI中进行所有开发， 

304
00:13:01,340 --> 00:13:04,510
尽管该季度的最后一两个星期， 

305
00:13:04,510 --> 00:13:06,240
希望我有时间告诉你

306
00:13:06,240 --> 00:13:09,390
如何将旧内容集成到SwiftUI中。 

307
00:13:09,390 --> 00:13:11,930
因为SwiftUI不能覆盖所有领域

308
00:13:11,930 --> 00:13:13,130
旧的UIKit可以做到。 

309
00:13:14,270 --> 00:13:16,710
因此，能够在其中粘贴它真是太好了。 

310
00:13:16,710 --> 00:13:19,440
因此，SwiftUI中有一些很好的粘合剂

311
00:13:19,440 --> 00:13:21,593
粘上UIKit的东西。 

312
00:13:22,830 --> 00:13:24,680
底部的其他开关， 

313
00:13:24,680 --> 00:13:26,760
我们可能会在本季度末获得时间

314
00:13:26,760 --> 00:13:28,310
做这个核心数据。 

315
00:13:28,310 --> 00:13:29,950
这是一个面向对象的数据库。 

316
00:13:29,950 --> 00:13:31,920
我希望有时间这样做。 

317
00:13:31,920 --> 00:13:34,490
不幸的是，我可能没有时间

318
00:13:34,490 --> 00:13:36,350
做这个测试框架。 

319
00:13:36,350 --> 00:13:39,460
我真的不想让它听起来像

320
00:13:39,460 --> 00:13:40,490
测试并不重要。 

321
00:13:40,490 --> 00:13:42,000
这非常重要。 

322
00:13:42,000 --> 00:13:44,350
只是您无法真正测试某些东西

323
00:13:44,350 --> 00:13:46,040
直到你知道如何发展

324
00:13:46,040 --> 00:13:47,540
我们将要用光时间

325
00:13:47,540 --> 00:13:49,730
在我回去掩盖之前。 

326
00:13:49,730 --> 00:13:51,250
因此，对于我们的第一个任务， 

327
00:13:51,250 --> 00:13:52,280
我们不会做任何这些

328
00:13:52,280 --> 00:13:54,733
因此您可以取消所有选择。 

329
00:13:56,150 --> 00:13:58,114
所以我在这里点击下一步，现在它想知道， 

330
00:13:58,114 --> 00:14:01,417
“很好，您想创建这个应用程序。 

331
00:14:01,417 --> 00:14:02,810
“你想放在哪里？” 

332
00:14:02,810 --> 00:14:05,320
我强烈建议将其放在文件夹中

333
00:14:05,320 --> 00:14:08,210
在您的主目录中称为Developer。 

334
00:14:08,210 --> 00:14:12,710
那就是我们放置事物的规范位置。 

335
00:14:12,710 --> 00:14:15,593
我强烈建议您这样做。 

336
00:14:16,920 --> 00:14:17,890
在这里的底部

337
00:14:17,890 --> 00:14:20,560
您可以看到此“源代码管理”内容。 

338
00:14:20,560 --> 00:14:21,613
针对您的源代码控制

339
00:14:21,613 --> 00:14:23,503
谁不熟悉

340
00:14:23,503 --> 00:14:26,470
这是您管理代码更改的一种方式， 

341
00:14:26,470 --> 00:14:28,580
签入然后签出。 

342
00:14:28,580 --> 00:14:31,660
有团队的时候特别有价值

343
00:14:31,660 --> 00:14:33,870
因为团队正在使用相同的代码， 

344
00:14:33,870 --> 00:14:36,740
他们的更改可能会发生冲突或其他情况。 

345
00:14:36,740 --> 00:14:41,070
因此，您想要一种仲裁这些更改的机制。 

346
00:14:41,070 --> 00:14:42,920
因此，您可以选择是否选中此选项。 

347
00:14:42,920 --> 00:14:44,530
我不会在这里检查它。 

348
00:14:44,530 --> 00:14:47,290
在本季度晚些时候，我会尝试去

349
00:14:47,290 --> 00:14:49,090
通过一些功能

350
00:14:49,090 --> 00:14:50,830
源代码管理集成

351
00:14:50,830 --> 00:14:52,600
在Xcode中，因为它非常酷。 

352
00:14:52,600 --> 00:14:55,290
但就目前而言，任何一种方法都可以。 

353
00:14:55,290 --> 00:14:57,930
因此，这将创建我们的第一个应用程序。 

354
00:14:57,930 --> 00:15:01,040
现在，你们中的许多人都不熟悉

355
00:15:01,040 --> 00:15:02,920
通过整个用户界面， 

356
00:15:02,920 --> 00:15:04,870
此Xcode用户界面。 

357
00:15:04,870 --> 00:15:07,190
所以我要简短地讲一下

358
00:15:07,190 --> 00:15:09,560
我将从左上角开始

359
00:15:09,560 --> 00:15:12,420
就在这里，这小排按钮。 

360
00:15:12,420 --> 00:15:16,430
本质上，这就是我们运行应用程序的方式。 

361
00:15:16,430 --> 00:15:18,660
现在，如果您单击此处的此按钮， 

362
00:15:18,660 --> 00:15:21,870
您会看到可以在设备上运行应用程序

363
00:15:21,870 --> 00:15:24,290
如果您实际将其连接到Mac 

364
00:15:24,290 --> 00:15:26,070
我目前没有。 

365
00:15:26,070 --> 00:15:27,520
或者，您可以在模拟器中运行它。 

366
00:15:27,520 --> 00:15:29,530
这些模拟器非常棒。 

367
00:15:29,530 --> 00:15:31,310
他们是一个完整的模拟

368
00:15:31,310 --> 00:15:33,300
我要在这里告诉你

369
00:15:33,300 --> 00:15:37,430
而且我实际上将选择iPhone 11作为我的模拟器。 

370
00:15:37,430 --> 00:15:40,210
我可以运行这个SwiftUI应用

371
00:15:40,210 --> 00:15:44,750
通过单击“播放”为我创建的模板。 

372
00:15:44,750 --> 00:15:46,250
因此，当我单击“播放”按钮时， 

373
00:15:46,250 --> 00:15:47,770
它会启动模拟器。 

374
00:15:47,770 --> 00:15:48,783
现在，第一次您这样做

375
00:15:48,783 --> 00:15:51,130
这将花费一些时间

376
00:15:51,130 --> 00:15:54,690
因为模拟器可以完全模拟设备。 

377
00:15:54,690 --> 00:15:55,750
实际上，我将向您展示。 

378
00:15:55,750 --> 00:15:58,500
所以这是我们的应用程序，它说：“你好，世界！” 

379
00:15:58,500 --> 00:16:01,140
您可能可以从这里的代码中想象出来。 

380
00:16:01,140 --> 00:16:04,280
这就是所有第一个应用程序所做的，他们说“ Hello，World”。 

381
00:16:04,280 --> 00:16:06,390
但是如果我们从底部向上滑动

382
00:16:06,390 --> 00:16:08,070
就像在真实设备上一样

383
00:16:08,070 --> 00:16:11,990
您可以看到这里有应用选择器

384
00:16:11,990 --> 00:16:13,210
我可以进入“设置” 

385
00:16:13,210 --> 00:16:14,380
这是“设置”应用

386
00:16:14,380 --> 00:16:18,110
我可以设置设备的设置等等。 

387
00:16:18,110 --> 00:16:20,610
这不是100％完整的设备， 

388
00:16:20,610 --> 00:16:22,870
但这是您需要的设备部分

389
00:16:22,870 --> 00:16:25,550
以确保您的应用程序确实有效。 

390
00:16:25,550 --> 00:16:27,920
我不知道您是否还注意到该设备

391
00:16:27,920 --> 00:16:30,580
相似，它恰好在黑暗模式下

392
00:16:30,580 --> 00:16:33,110
这是iOS 13中的新功能。 

393
00:16:33,110 --> 00:16:35,690
我要留在黑暗模式

394
00:16:35,690 --> 00:16:37,300
因为我们要看我们的应用程序

395
00:16:37,300 --> 00:16:39,830
在黑暗模式和非黑暗模式下都可以。 

396
00:16:39,830 --> 00:16:42,113
SwiftUI为我们处理了大部分此类工作。 

397
00:16:43,607 --> 00:16:45,090
所以我要回到这里的应用切换器

398
00:16:45,090 --> 00:16:46,370
然后切换回我们的应用

399
00:16:46,370 --> 00:16:49,210
它在这里说：“你好，世界！” 

400
00:16:49,210 --> 00:16:52,300
让我们回头看看我们如何做到这一点。 

401
00:16:52,300 --> 00:16:54,330
我们如何处理整个您好，世界事务。 

402
00:16:54,330 --> 00:16:56,170
所以我要在这里按这个正方形。 

403
00:16:56,170 --> 00:16:59,080
这是停止，停止模拟器。 

404
00:16:59,080 --> 00:17:02,070
让我们继续看一下Xcode的UI。 

405
00:17:02,070 --> 00:17:05,610
在这里的左边，这个小小的蓝色区域

406
00:17:05,610 --> 00:17:07,603
我们可以将其调整为所需的大小。 

407
00:17:07,603 --> 00:17:09,570
它被称为导航器。 

408
00:17:09,570 --> 00:17:12,180
它使您可以按文件导航。 

409
00:17:12,180 --> 00:17:14,510
因此，您可以单击此处的文件。 

410
00:17:14,510 --> 00:17:15,840
但它也可以让您导航

411
00:17:15,840 --> 00:17:17,530
沿顶部的所有其他方式。 

412
00:17:17,530 --> 00:17:20,080
就像您可以通过搜索进行导航。 

413
00:17:20,080 --> 00:17:23,140
您可以在调试器中浏览断点。 

414
00:17:23,140 --> 00:17:25,700
您可以浏览所有旧版本， 

415
00:17:25,700 --> 00:17:28,280
旧版本的输出等等。 

416
00:17:28,280 --> 00:17:31,110
所以您真的会习惯使用导航器

417
00:17:31,110 --> 00:17:33,330
在您的应用内移动

418
00:17:33,330 --> 00:17:36,390
找到您想要的东西，等等。 

419
00:17:36,390 --> 00:17:39,850
现在，在右侧，这是灰色区域。 

420
00:17:39,850 --> 00:17:42,090
这称为实用程序窗口

421
00:17:42,090 --> 00:17:44,620
或有时我们称为检查专员。 

422
00:17:44,620 --> 00:17:47,240
我们真的不需要那么多

423
00:17:47,240 --> 00:17:48,680
我们的前几讲。 

424
00:17:48,680 --> 00:17:51,430
所以我实际上要利用这个机会

425
00:17:51,430 --> 00:17:53,160
向您展示如何隐藏它。 

426
00:17:53,160 --> 00:17:56,460
如果您查看右上方的这三个按钮， 

427
00:17:56,460 --> 00:17:59,963
它们使您可以隐藏和显示这些窗格。 

428
00:18:00,920 --> 00:18:03,270
而且我实际上要隐藏实用程序

429
00:18:03,270 --> 00:18:05,550
因为就像我说的，我们不需要太多。 

430
00:18:05,550 --> 00:18:07,040
您会看到这里有第三个按钮。 

431
00:18:07,040 --> 00:18:09,530
这实际上从底部带来了一些好处。 

432
00:18:09,530 --> 00:18:14,080
这是您的调试器，控制台输出在这里。 

433
00:18:14,080 --> 00:18:16,640
我倾向于让那些不在屏幕上

434
00:18:16,640 --> 00:18:19,340
只是因为他们浪费屏幕房地产

435
00:18:19,340 --> 00:18:20,800
如果我没有真正调试。 

436
00:18:20,800 --> 00:18:24,310
而且，他们通常会自动自行出现

437
00:18:24,310 --> 00:18:26,700
例如，当您在调试器中命中断点

438
00:18:26,700 --> 00:18:29,283
或控制台上出现一些输出。 

439
00:18:30,480 --> 00:18:33,850
这个区域是主编辑窗口。 

440
00:18:33,850 --> 00:18:36,520
您会看到它目前分为两部分。 

441
00:18:36,520 --> 00:18:40,090
而且，您可以根据需要以多种方式划分该区域。 

442
00:18:40,090 --> 00:18:42,470
这就是这里的小加号按钮的功能。 

443
00:18:42,470 --> 00:18:45,380
它使您可以在右侧添加另一个第三个编辑器。 

444
00:18:45,380 --> 00:18:47,890
您甚至可以在底部添加一个编辑器

445
00:18:47,890 --> 00:18:50,863
如果您希望将拆分结果放在最下面，等等。 

446
00:18:51,710 --> 00:18:56,390
这就是我们对Xcode UI的浏览。 

447
00:18:56,390 --> 00:18:58,880
当然这里有很多菜单项

448
00:18:58,880 --> 00:19:02,150
我们将在季度进行中了解它们。 

449
00:19:02,150 --> 00:19:04,616
但是让我们看一下我们的主要编辑窗口

450
00:19:04,616 --> 00:19:05,740
看看我们得到了什么。 

451
00:19:05,740 --> 00:19:08,900
您在这里看到的是这个ContentView.swift。 

452
00:19:08,900 --> 00:19:10,140
这是一个Swift文件。 

453
00:19:10,140 --> 00:19:12,720
因此，这是您第一次了解Swift语言。 

454
00:19:12,720 --> 00:19:15,730
我将从这小段代码开始。 

455
00:19:15,730 --> 00:19:17,740
这小段代码做什么

456
00:19:17,740 --> 00:19:19,900
是否提供一些胶水

457
00:19:19,900 --> 00:19:22,720
您正在编写的代码之间

458
00:19:22,720 --> 00:19:24,670
和右边的这个小区域

459
00:19:24,670 --> 00:19:26,980
这称为“预览”窗口。 

460
00:19:26,980 --> 00:19:30,020
看，它说自动预览更新已暂停。 

461
00:19:30,020 --> 00:19:31,900
当然，我们有模拟器。 

462
00:19:31,900 --> 00:19:33,507
我们总是可以运行它来查看我们的应用程序

463
00:19:33,507 --> 00:19:34,840
看起来像

464
00:19:34,840 --> 00:19:38,140
但是我们也可以看到UI中正在发生的事情， 

465
00:19:38,140 --> 00:19:43,020
通过点击此处的“ Resume”，大约可以实时实现。 

466
00:19:43,020 --> 00:19:46,240
而这将是编译我们的代码

467
00:19:46,240 --> 00:19:49,000
基本上就在这里运行

468
00:19:49,000 --> 00:19:51,090
看起来有点像iPhone。 

469
00:19:51,090 --> 00:19:52,940
请注意，这不是在黑暗模式下

470
00:19:52,940 --> 00:19:55,260
因此文字为黑底白字。 

471
00:19:55,260 --> 00:19:58,730
而且这是自动的，SwiftUI会为我们解决这一问题。 

472
00:19:58,730 --> 00:20:00,360
我们也可以调整大小。 

473
00:20:00,360 --> 00:20:03,100
也许在这里做，它的空间会更少。 

474
00:20:03,100 --> 00:20:07,180
这段代码本质上就是粘在它上面的， 

475
00:20:07,180 --> 00:20:09,690
我真的不会对此给予太多关注。 

476
00:20:09,690 --> 00:20:12,750
实际上，我将其移开。 

477
00:20:12,750 --> 00:20:14,700
当您进行这样的大编辑时

478
00:20:14,700 --> 00:20:16,640
或者您要移动很多代码， 

479
00:20:16,640 --> 00:20:18,890
有时此预览会暂停。 

480
00:20:18,890 --> 00:20:20,130
您知道，它再次暂停了。 

481
00:20:20,130 --> 00:20:22,350
没问题，您可以恢复。 

482
00:20:22,350 --> 00:20:23,860
但是您进行了许多更改， 

483
00:20:23,860 --> 00:20:25,600
就像我更改此“ Hello，World！” 

484
00:20:25,600 --> 00:20:29,320
成为“你好，世界！” 

485
00:20:29,320 --> 00:20:31,930
您会看到它实际上是实时更改它。 

486
00:20:31,930 --> 00:20:33,750
所以这取决于变化的种类

487
00:20:33,750 --> 00:20:35,660
您正在编写代码

488
00:20:35,660 --> 00:20:38,690
是否会实时更新。 

489
00:20:38,690 --> 00:20:40,900
同样，您始终可以运行模拟器。 

490
00:20:40,900 --> 00:20:41,980
特别是如果你想看

491
00:20:41,980 --> 00:20:45,180
在许多不同的设备和类似的东西上。 

492
00:20:45,180 --> 00:20:47,680
您随时都可以使用模拟器。 

493
00:20:49,180 --> 00:20:51,127
因此，让我们看一下Swift代码。 

494
00:20:51,127 --> 00:20:53,227
这就是Swift代码的全部

495
00:20:53,227 --> 00:20:54,553
这是特定于我们的应用程序的。 

496
00:20:54,553 --> 00:20:57,000
这里有一些样板

497
00:20:57,000 --> 00:20:59,220
在这两个委托中。 

498
00:20:59,220 --> 00:21:00,260
我们稍后再看

499
00:21:00,260 --> 00:21:03,090
但这实际上几乎就是所有

500
00:21:03,090 --> 00:21:06,380
说到“ Hello，World”就在这里。 

501
00:21:06,380 --> 00:21:09,250
因此，让我们详细了解一下Swift代码。 

502
00:21:09,250 --> 00:21:11,950
首先，我们有此导入SwiftUI。 

503
00:21:11,950 --> 00:21:15,330
我相信你们都可以确切地想象那是什么。 

504
00:21:15,330 --> 00:21:18,960
就像包含或导入其他语言一样。 

505
00:21:18,960 --> 00:21:22,090
这将在Swift中导入所谓的包。 

506
00:21:22,090 --> 00:21:24,520
这个包是SwiftUI。 

507
00:21:24,520 --> 00:21:27,369
这就是Apple提供的大包

508
00:21:27,369 --> 00:21:30,130
这使得所有SwiftUI都可以正常工作。 

509
00:21:30,130 --> 00:21:32,640
因此，无论何时我们做UI事情， 

510
00:21:32,640 --> 00:21:35,150
我们总是会导入SwiftUI。 

511
00:21:35,150 --> 00:21:36,870
有时我们会写代码

512
00:21:36,870 --> 00:21:38,450
那不是UI的东西。 

513
00:21:38,450 --> 00:21:41,280
实际上，是有意UI无关的。 

514
00:21:41,280 --> 00:21:43,963
在这种情况下，我们将不会导入SwiftUI。 

515
00:21:43,963 --> 00:21:45,670
我们将导入其他软件包

516
00:21:45,670 --> 00:21:47,410
叫做基金会。 

517
00:21:47,410 --> 00:21:51,200
Foundation是一种数组，字典和字符串。 

518
00:21:51,200 --> 00:21:53,670
SwiftUI包取决于Foundation。 

519
00:21:53,670 --> 00:21:54,910
因此，如果您导入SwiftUI， 

520
00:21:54,910 --> 00:21:57,253
您也会自动得到那个。 

521
00:21:58,190 --> 00:22:01,670
所以这整个过程实际上只是三行代码， 

522
00:22:01,670 --> 00:22:03,100
不包括花括号。 

523
00:22:03,100 --> 00:22:05,110
让我们看看它是什么。 

524
00:22:05,110 --> 00:22:07,600
这里的第一个关键词。 

525
00:22:07,600 --> 00:22:10,930
请注意，所有Swift关键字均为洋红色。 

526
00:22:10,930 --> 00:22:12,800
我们总是可以分辨出Swift的区别

527
00:22:12,800 --> 00:22:15,050
以及我们所做的事情。 

528
00:22:15,050 --> 00:22:16,220
所以这是一个结构。 

529
00:22:16,220 --> 00:22:18,060
这只是声明一个结构。 

530
00:22:18,060 --> 00:22:21,421
现在，我确定您知道一种具有结构的语言。 

531
00:22:21,421 --> 00:22:25,417
C和C ++以及这些语言都有结构。 

532
00:22:25,417 --> 00:22:29,230
和其他语言一样，Swift中的结构

533
00:22:29,230 --> 00:22:31,970
是一些变量的容器。 

534
00:22:31,970 --> 00:22:35,650
但是Swift中的结构要强大得多。 

535
00:22:35,650 --> 00:22:38,500
Swift中的结构不仅可以具有变量， 

536
00:22:38,500 --> 00:22:39,701
但是他们可以有功能

537
00:22:39,701 --> 00:22:42,100
他们也可以有行为

538
00:22:42,100 --> 00:22:44,270
我们将非常清楚地看到

539
00:22:44,270 --> 00:22:45,880
就在这里。 

540
00:22:45,880 --> 00:22:48,520
因此，此结构的名称为ContentView。 

541
00:22:48,520 --> 00:22:51,850
因此，标识符的名称为绿色。 

542
00:22:51,850 --> 00:22:54,040
Swift的标识符为紫色

543
00:22:54,040 --> 00:22:56,280
关键字再次变为洋红色。 

544
00:22:56,280 --> 00:22:58,350
因此，此结构的名称为ContentView。 

545
00:22:58,350 --> 00:23:01,800
这是非常有趣的一小部分

546
00:23:01,800 --> 00:23:04,000
该结构的声明。 

547
00:23:04,000 --> 00:23:06,380
它本质上意味着这个结构

548
00:23:06,380 --> 00:23:10,330
会表现得像View。 

549
00:23:10,330 --> 00:23:14,770
也许有人会说它会像View一样起作用。 

550
00:23:14,770 --> 00:23:18,370
甚至有人甚至会说它是“视图”。 

551
00:23:18,370 --> 00:23:22,830
尽管如果我使用“是”视图的声明， 

552
00:23:22,830 --> 00:23:25,610
有些人会认为这是面向对象的编程

553
00:23:25,610 --> 00:23:27,410
像超类之类的东西。 

554
00:23:27,410 --> 00:23:28,440
但事实并非如此。 

555
00:23:28,440 --> 00:23:29,860
这不是面向对象的编程。 

556
00:23:29,860 --> 00:23:31,450
这是功能编程。 

557
00:23:31,450 --> 00:23:33,410
这就是为什么我们更有可能

558
00:23:33,410 --> 00:23:36,680
说类似ContentView之类的功能

559
00:23:36,680 --> 00:23:39,290
或表现得像View。 

560
00:23:39,290 --> 00:23:41,330
这是非常重要的。 

561
00:23:41,330 --> 00:23:44,680
视图这种行为至关重要

562
00:23:44,680 --> 00:23:47,810
您将看到所有SwiftUI的工作方式。 

563
00:23:47,810 --> 00:23:49,950
我们将使用很多视图

564
00:23:49,950 --> 00:23:53,320
在接下来的两节课中，您甚至无法想象。 

565
00:23:53,320 --> 00:23:55,730
我们将讨论所有概念

566
00:23:55,730 --> 00:23:59,110
该行为规范的背后

567
00:23:59,110 --> 00:24:01,650
在第二讲的开头使用幻灯片。 

568
00:24:01,650 --> 00:24:03,870
同时，我们只是要了解

569
00:24:03,870 --> 00:24:07,133
这意味着ContentView的行为类似于View。 

570
00:24:07,980 --> 00:24:11,390
视图只是屏幕上的一个矩形区域。 

571
00:24:11,390 --> 00:24:14,280
所以在这里我将鼠标放在此文本上

572
00:24:14,280 --> 00:24:15,853
并在预览中将其选中。 

573
00:24:15,853 --> 00:24:19,970
您会看到它在该文本周围放置了蓝色边框。 

574
00:24:19,970 --> 00:24:22,310
该蓝色边框与该视图接壤。 

575
00:24:22,310 --> 00:24:25,210
因此，文本的行为也类似于视图。 

576
00:24:25,210 --> 00:24:26,520
它是一个“视图”。 

577
00:24:26,520 --> 00:24:28,120
因此，您正在这里看到它。 

578
00:24:28,120 --> 00:24:29,440
这就是所有视图。 

579
00:24:29,440 --> 00:24:31,610
它们是屏幕上的矩形区域， 

580
00:24:31,610 --> 00:24:34,560
既用于绘画，也用于多点触控。 

581
00:24:34,560 --> 00:24:37,870
对于滑动和水龙头，捏， 

582
00:24:37,870 --> 00:24:41,120
这些事情发生在这些矩形中。 

583
00:24:41,120 --> 00:24:42,640
这就是视图。 

584
00:24:42,640 --> 00:24:44,670
因此，当某物的行为类似于View时， 

585
00:24:44,670 --> 00:24:46,330
这是屏幕上的矩形区域。 

586
00:24:46,330 --> 00:24:49,250
所以我们的ContentView就像View 

587
00:24:49,250 --> 00:24:51,900
是整个矩形吗？ 

588
00:24:51,900 --> 00:24:54,640
充满屏幕的整个矩形

589
00:24:54,640 --> 00:24:56,173
是我们的ContentView。 

590
00:24:57,296 --> 00:24:59,890
好吧，如果你是某人， 

591
00:24:59,890 --> 00:25:02,260
像ContentView这样的结构

592
00:25:02,260 --> 00:25:05,320
并且您想说自己的行为类似于View， 

593
00:25:05,320 --> 00:25:10,320
你必须在你的结构体中有这个变量， 

594
00:25:10,360 --> 00:25:12,850
这个变种叫做身体。 

595
00:25:12,850 --> 00:25:14,330
我会在这里为您选择。 

596
00:25:14,330 --> 00:25:17,190
这是var body的声明。 

597
00:25:17,190 --> 00:25:20,890
因此Swift变量有关键字var， 

598
00:25:20,890 --> 00:25:22,210
变量的缩写。 

599
00:25:22,210 --> 00:25:24,910
虽然我们不倾向于调用变量

600
00:25:24,910 --> 00:25:27,700
像这样的var里面的结构。 

601
00:25:27,700 --> 00:25:29,770
我们称它们为属性。 

602
00:25:29,770 --> 00:25:32,870
所以您会一直听到我使用property一词。 

603
00:25:32,870 --> 00:25:36,010
它表示结构或类中的var。 

604
00:25:36,010 --> 00:25:38,120
另外，如果我们在进行面向对象的编程， 

605
00:25:38,120 --> 00:25:40,210
我们称它们为属性。 

606
00:25:40,210 --> 00:25:44,680
因此，属性的语法真的很简单，您有了一个var。 

607
00:25:44,680 --> 00:25:46,487
这是属性的名称。 

608
00:25:46,487 --> 00:25:49,410
同样，它是绿色的，因为这是我们选择的东西。 

609
00:25:49,410 --> 00:25:54,410
这就是此属性的类型

610
00:25:55,400 --> 00:25:57,290
或这个变种

611
00:25:57,290 --> 00:26:01,020
现在，即使在Swift中，这也是一个非常有趣的类型。 

612
00:26:01,020 --> 00:26:04,000
因为它有一个洋红色的关键字

613
00:26:04,000 --> 00:26:06,083
在它的中间。 

614
00:26:07,000 --> 00:26:10,640
通常，此类型可能看起来像是一个Int 

615
00:26:10,640 --> 00:26:12,910
也许是一个字符串。 

616
00:26:12,910 --> 00:26:15,180
或者它可能是一个布尔值

617
00:26:15,180 --> 00:26:17,350
或者它是一个数组之类的东西。 

618
00:26:17,350 --> 00:26:20,940
但就我们而言，这是一些观点

619
00:26:20,940 --> 00:26:23,450
这是一种有趣的类型。 

620
00:26:23,450 --> 00:26:24,333
这本质上是什么意思

621
00:26:24,333 --> 00:26:28,820
是该变量的类型，该属性， 

622
00:26:28,820 --> 00:26:33,820
只要它的行为类似于View，就可以是任何类型，任何结构。 

623
00:26:34,830 --> 00:26:36,883
只要是一些视图。 

624
00:26:38,180 --> 00:26:41,450
这就是这种奇怪的事情

625
00:26:41,450 --> 00:26:42,580
就是这里

626
00:26:42,580 --> 00:26:45,200
因此，如果您想表现得像View， 

627
00:26:45,200 --> 00:26:47,480
你必须有一个叫做身体的变种

628
00:26:47,480 --> 00:26:51,674
这也是另一种行为，类似于View。 

629
00:26:51,674 --> 00:26:53,977
您可能会想，“什么？ 

630
00:26:53,977 --> 00:26:54,810
“那真是怪了。 

631
00:26:54,810 --> 00:26:57,497
“因此要成为一个视图，我必须拥有一个变种

632
00:26:57,497 --> 00:27:00,017
“那是我的另一种观点？ 

633
00:27:00,017 --> 00:27:01,357
“这是没有意义的。” 

634
00:27:01,357 --> 00:27:05,460
但是您可以将Views视为Legos。 

635
00:27:05,460 --> 00:27:07,580
所以当然有一些积木

636
00:27:07,580 --> 00:27:11,170
乐高积木，就像文字一样的基本事物。 

637
00:27:11,170 --> 00:27:13,330
文字就像一块积木。 

638
00:27:13,330 --> 00:27:16,930
但是，然后您可以将乐高积木组合在一起，制作出其他东西。 

639
00:27:16,930 --> 00:27:18,830
和你把它们放在一起的东西， 

640
00:27:18,830 --> 00:27:20,590
您可以称其为新乐高。 

641
00:27:20,590 --> 00:27:24,350
这就像合并的乐高玩具或更强大的乐高玩具。 

642
00:27:24,350 --> 00:27:26,520
例如，如果您要建造一个乐高房屋， 

643
00:27:26,520 --> 00:27:29,140
您可能会制作很少的乐高家具。 

644
00:27:29,140 --> 00:27:32,030
乐高沙发，乐高厨房桌子， 

645
00:27:32,030 --> 00:27:33,800
所有这些东西都来自其他乐高玩具。 

646
00:27:33,800 --> 00:27:36,030
如果你考虑到沙发和厨房桌子

647
00:27:36,030 --> 00:27:38,570
作为乐高积木，那么你将它们放在一起

648
00:27:38,570 --> 00:27:39,403
盖房子

649
00:27:39,403 --> 00:27:42,280
您甚至可以让房子成为乐高积木

650
00:27:42,280 --> 00:27:45,370
放在一起组成一个乐高社区。 

651
00:27:45,370 --> 00:27:48,600
或乐高世界，乐高宇宙。 

652
00:27:48,600 --> 00:27:52,150
这就是我们想要想到的方式。 

653
00:27:52,150 --> 00:27:54,210
现在，乐高和景观之间的区别

654
00:27:54,210 --> 00:27:56,510
是有特殊的观点

655
00:27:56,510 --> 00:27:59,050
用来组合乐高积木。 

656
00:27:59,050 --> 00:28:01,807
我们已经有了这些基本的积木，例如Text。 

657
00:28:01,807 --> 00:28:03,900
然后我们有其他类型的视图

658
00:28:03,900 --> 00:28:07,340
就是合成器，乐高合成器，查看合成器。 

659
00:28:07,340 --> 00:28:11,100
您将看到我们在这里详细使用它们。 

660
00:28:11,100 --> 00:28:13,040
这就是为什么我们的身体刚刚恢复

661
00:28:13,040 --> 00:28:17,120
一个单一的某种视图。 

662
00:28:17,120 --> 00:28:19,670
它可能正在返回组合器。 

663
00:28:19,670 --> 00:28:21,090
如果返回合并器视图， 

664
00:28:21,090 --> 00:28:24,180
那么里面可能会有无数的视图

665
00:28:24,180 --> 00:28:25,333
结合在一起。 

666
00:28:26,620 --> 00:28:30,530
现在，这也是一种有趣的变种

667
00:28:30,530 --> 00:28:34,010
因为它后面有这个花括号的东西。 

668
00:28:34,010 --> 00:28:37,750
此var，其值不存储在内存中。 

669
00:28:37,750 --> 00:28:41,000
而是计算此var。 

670
00:28:41,000 --> 00:28:44,900
因此，每当有人（即系统） 

671
00:28:44,900 --> 00:28:47,030
要求这个变量的值， 

672
00:28:47,030 --> 00:28:50,810
花括号中的此代码将被执行。 

673
00:28:50,810 --> 00:28:53,090
无论返回什么值， 

674
00:28:53,090 --> 00:28:54,680
这就是身体的价值所在。 

675
00:28:54,680 --> 00:28:57,080
每次调用它时，都会再次调用它， 

676
00:28:57,080 --> 00:28:58,920
它一直在叫这个东西。 

677
00:28:58,920 --> 00:29:01,770
现在，这里的代码似乎有点简单

678
00:29:01,770 --> 00:29:03,330
但这可能更有意义

679
00:29:03,330 --> 00:29:05,720
如果我把这个关键字放回去。 

680
00:29:05,720 --> 00:29:08,050
此关键字返回，您会看到洋红色。 

681
00:29:08,050 --> 00:29:10,450
这是一个迅速的事情，这意味着回报。 

682
00:29:10,450 --> 00:29:13,280
从这段代码中返回一个值， 

683
00:29:13,280 --> 00:29:15,540
这小段花括号的代码。 

684
00:29:15,540 --> 00:29:20,160
它不在那里是因为Swift喜欢把事情遗漏掉

685
00:29:20,160 --> 00:29:22,440
并使其成为必需，因此您必须键入尽可能少的代码。 

686
00:29:22,440 --> 00:29:23,990
您稍后会看到。 

687
00:29:23,990 --> 00:29:27,000
因此，如果您具有这样的单行功能

688
00:29:27,000 --> 00:29:29,530
返回一个值，这就是这个， 

689
00:29:29,530 --> 00:29:32,320
单行返回此Text内容。 

690
00:29:32,320 --> 00:29:34,910
然后，您可以将其退回。 

691
00:29:34,910 --> 00:29:36,250
只是推断一下。 

692
00:29:36,250 --> 00:29:38,263
但是我要留在里面

693
00:29:38,263 --> 00:29:40,220
因为我要你意识到

694
00:29:40,220 --> 00:29:41,290
那就是这里正在发生的事情。 

695
00:29:41,290 --> 00:29:43,570
我们有这小段代码， 

696
00:29:43,570 --> 00:29:46,450
它返回这个Text的东西。 

697
00:29:46,450 --> 00:29:49,020
那将永远是身体的价值。 

698
00:29:49,020 --> 00:29:51,460
每当有人问我身体的价值时， 

699
00:29:51,460 --> 00:29:54,853
它会执行此命令并在此处返回此文本。 

700
00:29:55,710 --> 00:29:59,490
现在，请记住，此返回类型是一些View。 

701
00:29:59,490 --> 00:30:02,137
因此，如果您说的是：“它正在返回Text。 

702
00:30:02,137 --> 00:30:03,270
“这里发生了什么？” 

703
00:30:03,270 --> 00:30:07,750
好吧，当然是Text，它说它的行为就像View。 

704
00:30:07,750 --> 00:30:09,070
这就是“某些视图”。 

705
00:30:09,070 --> 00:30:12,110
换句话说，在苹果代码的某个地方

706
00:30:12,110 --> 00:30:13,607
有一些看起来像这样的线。 

707
00:30:13,607 --> 00:30:18,310
“结构文本的行为类似于视图。” 

708
00:30:18,310 --> 00:30:23,160
这就是为什么我们可以将Text作为body的值返回的原因

709
00:30:23,160 --> 00:30:23,993
因为这是一些观点。 

710
00:30:23,993 --> 00:30:26,700
实际上，我们甚至可以在此处键入Text。 

711
00:30:26,700 --> 00:30:30,800
这将是有效的，因为其行为类似于View， 

712
00:30:30,800 --> 00:30:35,460
您的var主体只需返回一个View视图。 

713
00:30:35,460 --> 00:30:37,830
当然，文本是视图。 

714
00:30:37,830 --> 00:30:40,080
那么，为什么不键入Text？ 

715
00:30:40,080 --> 00:30:42,320
我们为什么要这样做一些视图？ 

716
00:30:42,320 --> 00:30:46,300
好吧，随着我们的观点变得越来越复杂

717
00:30:46,300 --> 00:30:48,170
然后我们开始使用这些View-combiners 

718
00:30:48,170 --> 00:30:50,900
诸如此类的事情将会不断变化。 

719
00:30:50,900 --> 00:30:53,430
我们要返回哪种视图。 

720
00:30:53,430 --> 00:30:54,870
现在，我们正在返回文本。 

721
00:30:54,870 --> 00:30:56,500
但最终我们要回来了

722
00:30:56,500 --> 00:30:58,780
视图合并视图。 

723
00:30:58,780 --> 00:31:02,530
我们想让编译器为我们解决问题。 

724
00:31:02,530 --> 00:31:06,187
因此，这种观点基本上是对编译器说的， 

725
00:31:06,187 --> 00:31:08,867
“在这里查看我的代码。 

726
00:31:08,867 --> 00:31:10,867
“弄清楚它返回了什么。 

727
00:31:10,867 --> 00:31:13,897
“确保它的行为类似于View。 

728
00:31:13,897 --> 00:31:16,597
“然后将其用作身体的类型。” 

729
00:31:17,450 --> 00:31:20,310
您将在我们完成本课程的过程中找到

730
00:31:20,310 --> 00:31:24,060
Swift是一种非常强类型的语言。 

731
00:31:24,060 --> 00:31:28,050
这意味着每个变量都有特定的类型。 

732
00:31:28,050 --> 00:31:30,580
它不是JavaScript或其他语言

733
00:31:30,580 --> 00:31:32,230
哪里好，变量

734
00:31:32,230 --> 00:31:33,850
取决于您为其分配的内容。 

735
00:31:33,850 --> 00:31:34,683
到那时候... 

736
00:31:34,683 --> 00:31:38,250
不，在Swift中，每个变量都有特定的类型

737
00:31:38,250 --> 00:31:39,610
并始终具有价值。 

738
00:31:39,610 --> 00:31:43,963
这只是Swift运作方式的基础。 

739
00:31:45,740 --> 00:31:49,060
因此，让我们在这里查看此文本。 

740
00:31:49,060 --> 00:31:51,320
我们创建此文本。 

741
00:31:51,320 --> 00:31:53,680
每当我们创建任何东西，任何结构， 

742
00:31:53,680 --> 00:31:56,680
因此，文本只是行为类似于视图的结构。 

743
00:31:56,680 --> 00:32:00,120
每当我们创建一个时，我们都会用括号括起来

744
00:32:00,120 --> 00:32:03,700
向其提供创建自身所需的任何信息。 

745
00:32:03,700 --> 00:32:05,840
现在，显然对于文本

746
00:32:05,840 --> 00:32:09,007
它需要用于创建自身的字符串。 

747
00:32:09,007 --> 00:32:11,460
这就是为什么您得到这个“ Hello There，World！”的原因。 

748
00:32:11,460 --> 00:32:14,140
并且请注意，如果我编辑了它，它并没有改变。 

749
00:32:14,140 --> 00:32:16,080
那是因为它在这里暂停了。 

750
00:32:16,080 --> 00:32:18,720
但是如果我恢复，那将会

751
00:32:18,720 --> 00:32:23,303
现在我可以输入例如，它正在跟踪它。 

752
00:32:24,250 --> 00:32:28,010
因此，这始终是我们创建任何类型的新结构的方式。 

753
00:32:28,010 --> 00:32:30,030
我们在它后面加上括号

754
00:32:30,030 --> 00:32:32,100
然后我们给它任何想要的参数。 

755
00:32:32,100 --> 00:32:34,040
在创建它们时，还有一些事情， 

756
00:32:34,040 --> 00:32:35,420
可以接受不同种类的论点

757
00:32:35,420 --> 00:32:36,361
取决于它们是什么。 

758
00:32:36,361 --> 00:32:38,511
您很快就会在这里看到的。 

759
00:32:40,740 --> 00:32:43,960
让我们看看是否可以开始构建

760
00:32:43,960 --> 00:32:48,090
看起来更像卡片的UI。 

761
00:32:48,090 --> 00:32:49,510
现在它只是说：“你好，世界！” 

762
00:32:49,510 --> 00:32:53,550
让我们提醒自己自己会是什么样子。 

763
00:32:53,550 --> 00:32:55,730
游戏的屏幕截图

764
00:32:55,730 --> 00:32:57,670
我刚才给你看的

765
00:32:57,670 --> 00:33:01,210
还有我们的卡片，它们都有这些圆角矩形

766
00:33:01,210 --> 00:33:03,030
在边缘，你看到了吗？ 

767
00:33:03,030 --> 00:33:04,470
这是一条线。 

768
00:33:04,470 --> 00:33:06,040
然后是白色背景。 

769
00:33:06,040 --> 00:33:08,010
他们的前面有一个表情符号。 

770
00:33:08,010 --> 00:33:10,630
因此，让我们照顾所有这些事情。 

771
00:33:10,630 --> 00:33:11,710
让我们从表情符号开始。 

772
00:33:11,710 --> 00:33:13,000
那真的很容易

773
00:33:13,000 --> 00:33:15,420
因为表情符号只是一段文字。 

774
00:33:15,420 --> 00:33:17,160
所以我要删除它。 

775
00:33:17,160 --> 00:33:19,840
我不知道您是否知道，但是在任何Mac应用程序中， 

776
00:33:19,840 --> 00:33:22,850
如果您进入“修改”菜单，请转到底部， 

777
00:33:22,850 --> 00:33:24,891
会有表情符号和符号。 

778
00:33:24,891 --> 00:33:26,460
你看那里，我可以得到表情符号。 

779
00:33:26,460 --> 00:33:29,090
您甚至可以搜索幽灵。 

780
00:33:29,090 --> 00:33:30,040
在那里，鬼。 

781
00:33:30,940 --> 00:33:32,280
让我们双击它。 

782
00:33:32,280 --> 00:33:33,120
现在我们有个鬼。 

783
00:33:33,120 --> 00:33:34,360
可以肯定的是，有我们的幽灵。 

784
00:33:34,360 --> 00:33:35,690
他真的很小。 

785
00:33:35,690 --> 00:33:38,400
尽管我们可以放大并在那里看到他。 

786
00:33:38,400 --> 00:33:40,370
而且我们将不得不解决他这么小。 

787
00:33:40,370 --> 00:33:41,810
这不会为我们的卡工作

788
00:33:41,810 --> 00:33:43,100
像他那么小

789
00:33:43,100 --> 00:33:44,973
但是一次只有一件事。 

790
00:33:45,930 --> 00:33:48,760
接下来我们需要的是圆角矩形。 

791
00:33:48,760 --> 00:33:50,610
因此，我们需要一个圆角矩形，它会向上移动。 

792
00:33:50,610 --> 00:33:53,490
因此，让我们将此文本注释掉。 

793
00:33:53,490 --> 00:33:55,470
所以我在那边做Command斜线

794
00:33:55,470 --> 00:33:57,290
评论该文本。 

795
00:33:57,290 --> 00:34:01,180
而是将我们的圆角矩形放在那里。 

796
00:34:01,180 --> 00:34:04,000
幸运的是，Swift在这里有很棒的东西。 

797
00:34:04,000 --> 00:34:07,760
RoundedRectangle正是我们想要的。 

798
00:34:07,760 --> 00:34:10,200
同样，就像我们创建文本时一样， 

799
00:34:10,200 --> 00:34:12,850
我们必须提供一些信息

800
00:34:12,850 --> 00:34:14,790
创建RoundedRectangle。 

801
00:34:14,790 --> 00:34:17,980
顺便说一句，您可以轻松找出是什么

802
00:34:17,980 --> 00:34:20,290
只做开括号

803
00:34:20,290 --> 00:34:22,170
Xcode将为您显示选项。 

804
00:34:22,170 --> 00:34:24,820
现在，RoundedRectangle有四种不同的方式

805
00:34:24,820 --> 00:34:26,197
创建一个ZStack。 

806
00:34:26,197 --> 00:34:29,350
您可以指定拐角半径或拐角大小， 

807
00:34:29,350 --> 00:34:31,770
角的宽度和高度。 

808
00:34:31,770 --> 00:34:33,340
我要去cornerRadius。 

809
00:34:33,340 --> 00:34:37,363
因此，您可以在此处单击Tab，也可以双击它。 

810
00:34:38,970 --> 00:34:43,040
然后，它需要半径，以磅为单位。 

811
00:34:43,040 --> 00:34:45,235
所以我要做10分。 

812
00:34:45,235 --> 00:34:48,050
点与字体的点大小相同， 

813
00:34:48,050 --> 00:34:49,830
像10点字体。 

814
00:34:49,830 --> 00:34:53,780
也只是为了让您了解一个点的大小， 

815
00:34:53,780 --> 00:34:57,550
典型的iPhone可能是四或500点宽

816
00:34:57,550 --> 00:35:00,230
也许是七或八百点高

817
00:35:00,230 --> 00:35:05,230
iPad可能是1,000 x 700。 

818
00:35:05,580 --> 00:35:08,070
现在，我故意在这里模糊

819
00:35:08,070 --> 00:35:10,710
因为我们从不编写代码

820
00:35:10,710 --> 00:35:13,830
试图知道屏幕的尺寸是多少。 

821
00:35:13,830 --> 00:35:16,050
SwiftUI帮助我们编写代码

822
00:35:16,050 --> 00:35:17,450
适用于任何尺寸的屏幕。 

823
00:35:17,450 --> 00:35:20,010
它只是可以适应和调整任何尺寸的屏幕。 

824
00:35:20,010 --> 00:35:22,530
您真的会在我们的“记忆游戏”中看到这一点

825
00:35:22,530 --> 00:35:25,430
当我们开始有行和列的按钮时。 

826
00:35:25,430 --> 00:35:27,740
在大屏幕上，它们会变大。 

827
00:35:27,740 --> 00:35:30,940
当我们处于人像模式时，它将改变大小

828
00:35:30,940 --> 00:35:32,970
一种方法，另一种景观。 

829
00:35:32,970 --> 00:35:34,930
所以我们总是想写我们的代码

830
00:35:34,930 --> 00:35:36,910
因此它可以在任何尺寸的屏幕上使用。 

831
00:35:36,910 --> 00:35:39,670
但这是一个点的大概大小

832
00:35:39,670 --> 00:35:41,820
给你一个观点

833
00:35:41,820 --> 00:35:45,570
现在，一件事对此很奇怪

834
00:35:45,570 --> 00:35:47,453
这是这里吗

835
00:35:48,420 --> 00:35:53,030
它在这条信息上贴了标签

836
00:35:53,030 --> 00:35:55,077
它需要创建一个ZStack。 

837
00:35:55,077 --> 00:35:56,700
而Text并没有发生这种情况。 

838
00:35:56,700 --> 00:36:00,740
这不是说字符串或类似的东西。 

839
00:36:00,740 --> 00:36:02,580
文字没有这些之一。 

840
00:36:02,580 --> 00:36:05,120
但这实际上是常态。 

841
00:36:05,120 --> 00:36:07,620
像文本这样的东西很不寻常

842
00:36:07,620 --> 00:36:10,770
这里没有标签作为参数。 

843
00:36:10,770 --> 00:36:12,390
您必须全力以赴。 

844
00:36:12,390 --> 00:36:14,090
我要告诉你如何摆脱困境

845
00:36:14,090 --> 00:36:16,700
尽管我们不会经常这样做。 

846
00:36:16,700 --> 00:36:19,430
相反，当我们创建事物时， 

847
00:36:19,430 --> 00:36:21,070
当我们传递信息时， 

848
00:36:21,070 --> 00:36:23,960
我们几乎总是给每块贴上标签。 

849
00:36:23,960 --> 00:36:26,900
当我们调用函数时也是如此。 

850
00:36:26,900 --> 00:36:28,880
所以可能需要做的一件事

851
00:36:28,880 --> 00:36:30,784
最习惯于Swift 

852
00:36:30,784 --> 00:36:33,410
是几乎所有的论点

853
00:36:33,410 --> 00:36:37,870
所有功能的所有参数都被标记。 

854
00:36:37,870 --> 00:36:40,500
这是从Objective-C继承的。 

855
00:36:40,500 --> 00:36:43,167
其实很好，因为如果我们没有这个

856
00:36:43,167 --> 00:36:46,530
我们有ZStack 10， 

857
00:36:46,530 --> 00:36:48,730
我的意思是，宽度和高度

858
00:36:48,730 --> 00:36:50,810
或那十是多少？ 

859
00:36:50,810 --> 00:36:53,080
但是只要我们把这个角半径放到那里， 

860
00:36:53,080 --> 00:36:54,597
突然之间，“哦，我在创造

861
00:36:54,597 --> 00:36:57,807
“ ZStack的拐角半径为10。” 

862
00:36:59,070 --> 00:37:03,130
很难看到我们的矩形是否在此圆角。 

863
00:37:03,130 --> 00:37:06,150
那是因为我实际上选择了这一行代码。 

864
00:37:06,150 --> 00:37:08,890
所以我们这里有一条蓝线。 

865
00:37:08,890 --> 00:37:10,900
但是如果我点击离开

866
00:37:10,900 --> 00:37:13,690
那么您现在可以开始在那里看到ZStack。 

867
00:37:13,690 --> 00:37:15,720
如果我放大，可以看到

868
00:37:15,720 --> 00:37:18,220
ZStack很清楚。 

869
00:37:18,220 --> 00:37:20,100
显然，我们将不得不做一些事情

870
00:37:20,100 --> 00:37:21,440
关于此可见性。 

871
00:37:21,440 --> 00:37:24,280
我们的卡不想撞到边缘

872
00:37:24,280 --> 00:37:26,430
而且他们也不想变黑。 

873
00:37:26,430 --> 00:37:28,090
但是首先是第一件事。 

874
00:37:28,090 --> 00:37:30,690
我们将稍等一下。 

875
00:37:30,690 --> 00:37:32,950
我想做的下一件事是结合

876
00:37:32,950 --> 00:37:35,910
这个RoundedRectangle和这个Text在一起。 

877
00:37:35,910 --> 00:37:39,904
因为请记住，我们的卡片都具有RoundedRectangle 

878
00:37:39,904 --> 00:37:43,030
和一个文本堆叠在一起。 

879
00:37:43,030 --> 00:37:46,670
我将不得不通过返回一些View来做到这一点。 

880
00:37:46,670 --> 00:37:51,460
所以我要在这里返回的视图称为ZStack。 

881
00:37:51,460 --> 00:37:54,294
因此，ZStack只是一个结构。 

882
00:37:54,294 --> 00:37:55,740
它的行为就像View 

883
00:37:55,740 --> 00:37:59,281
就像RoundedRectangle是一个struct 

884
00:37:59,281 --> 00:38:00,850
行为就像一个视图。 

885
00:38:00,850 --> 00:38:01,800
文字也是如此。 

886
00:38:01,800 --> 00:38:03,803
实际上，我们的ContentView也是如此。 

887
00:38:04,882 --> 00:38:08,100
ZStack确实需要在此处创建一个参数。 

888
00:38:08,100 --> 00:38:12,910
我们要使用的参数是内容，然后大括号

889
00:38:12,910 --> 00:38:16,350
要堆叠的视图列表。 

890
00:38:16,350 --> 00:38:19,653
显然，我们不需要这里的退货。 

891
00:38:20,690 --> 00:38:21,860
这就是清单。 

892
00:38:21,860 --> 00:38:24,890
后面是RoundedRectangle，前面是Text。 

893
00:38:24,890 --> 00:38:26,960
列表中的第一件事，这是两个项目

894
00:38:26,960 --> 00:38:29,480
但是我们可以有五六个或七个

895
00:38:29,480 --> 00:38:32,320
所有列在一行中，它将全部堆叠

896
00:38:32,320 --> 00:38:33,453
在彼此之上。 

897
00:38:34,724 --> 00:38:36,380
ZStack只是一些视图。 

898
00:38:36,380 --> 00:38:38,670
实际上，这里的返回类型

899
00:38:38,670 --> 00:38:41,550
这里是某种ZStack 

900
00:38:41,550 --> 00:38:44,370
而不是Text或RoundedRectangle 

901
00:38:44,370 --> 00:38:45,260
或类似的东西。 

902
00:38:45,260 --> 00:38:48,310
但是Swift会自动实现

903
00:38:48,310 --> 00:38:49,317
它正在返回这个。 

904
00:38:49,317 --> 00:38:51,403
因此，它将为我们做到这一点。 

905
00:38:52,430 --> 00:38:56,500
这种组合视图显然很重要

906
00:38:56,500 --> 00:38:58,210
建立复杂的视图。 

907
00:38:58,210 --> 00:39:00,850
下周我们将构建自己的合并器视图。 

908
00:39:00,850 --> 00:39:04,390
所以您真的要了解这些事情是如何工作的。 

909
00:39:04,390 --> 00:39:06,030
现在，我们到了。 

910
00:39:06,030 --> 00:39:09,760
但是还有一些事情，我们这里会继续介绍， 

911
00:39:09,760 --> 00:39:12,270
看起来不太像我们的卡片。 

912
00:39:12,270 --> 00:39:14,650
首先，我们的卡上没有黑色。 

913
00:39:14,650 --> 00:39:18,830
它们在外部被橙色打动。 

914
00:39:18,830 --> 00:39:22,200
还有一个问题，就是很难看到边缘

915
00:39:22,200 --> 00:39:24,370
因为它们一直到了边缘。 

916
00:39:24,370 --> 00:39:25,460
因此，让我们修复这两个问题。 

917
00:39:25,460 --> 00:39:29,700
首先，让我们抚摸一下而不是填充它。 

918
00:39:29,700 --> 00:39:31,200
而我们要做的方式

919
00:39:31,200 --> 00:39:33,410
是我们要调用一个函数

920
00:39:34,260 --> 00:39:37,020
在RoundedRectangle上称为笔触。 

921
00:39:37,020 --> 00:39:41,017
RoundedRectangle，我们知道它的行为类似于View。 

922
00:39:41,017 --> 00:39:42,400
它的行为必须类似于View 

923
00:39:42,400 --> 00:39:44,400
否则我们将无法将其放入ZStack 

924
00:39:44,400 --> 00:39:45,610
喜欢这个文字。 

925
00:39:45,610 --> 00:39:48,470
但是RoundedRectangle也表现得像另一件事

926
00:39:48,470 --> 00:39:50,350
这是一个形状。 

927
00:39:50,350 --> 00:39:54,410
其他形状包括圆形，胶囊形，贝塞尔曲线形， 

928
00:39:54,410 --> 00:39:55,840
这些都是形状。 

929
00:39:55,840 --> 00:39:57,910
和形状都可以抚摸

930
00:39:57,910 --> 00:40:01,100
通过在它们上调用此函数称为stroke。 

931
00:40:01,100 --> 00:40:03,150
您会看到这正是发生的情况。 

932
00:40:03,150 --> 00:40:05,560
它在边缘划了一条线

933
00:40:05,560 --> 00:40:08,720
此RoundedRectangle。 

934
00:40:08,720 --> 00:40:10,830
中风是一个有趣的功能

935
00:40:10,830 --> 00:40:13,030
它返回了一些东西。 

936
00:40:13,030 --> 00:40:15,050
你能猜出它返回什么吗？ 

937
00:40:15,050 --> 00:40:16,810
它返回一个视图。 

938
00:40:16,810 --> 00:40:19,060
它返回的行为类似于View。 

939
00:40:19,060 --> 00:40:24,060
它必须这样做，因为无论它是什么，都必须是一个视图。 

940
00:40:24,060 --> 00:40:27,000
否则，我们不能将其放入ZStack中。 

941
00:40:27,000 --> 00:40:30,230
所以这就像抚摸

942
00:40:30,230 --> 00:40:32,560
RoundedRectangle视图或类似的东西。 

943
00:40:32,560 --> 00:40:35,000
因此，ZStack中仍然有两个视图。 

944
00:40:35,000 --> 00:40:37,173
描边的RoundedRectangle是其中之一

945
00:40:37,173 --> 00:40:39,573
文本是另一个。 

946
00:40:39,573 --> 00:40:44,573
因此，这种在View上调用函数的模式

947
00:40:45,525 --> 00:40:46,650
或形状

948
00:40:46,650 --> 00:40:50,410
返回另一个View是很常见的。 

949
00:40:50,410 --> 00:40:53,920
这是您第一次看到Swift函数调用。 

950
00:40:53,920 --> 00:40:57,460
确实很简单，只是点和函数的名称。 

951
00:40:57,460 --> 00:40:59,990
然后在括号中加上任何参数。 

952
00:40:59,990 --> 00:41:02,490
现在，中风实际上可以引起争论

953
00:41:02,490 --> 00:41:05,110
但没有它的论点，它可以很好地工作。 

954
00:41:05,110 --> 00:41:06,060
没有论据， 

955
00:41:06,060 --> 00:41:08,800
这只是某种默认行为

956
00:41:08,800 --> 00:41:12,460
轻描淡写的单点线

957
00:41:12,460 --> 00:41:14,233
形状的边缘周围。 

958
00:41:15,256 --> 00:41:17,220
那颜色呢

959
00:41:17,220 --> 00:41:20,930
RoundedRectangle的边缘在这里？ 

960
00:41:20,930 --> 00:41:23,340
目前看来

961
00:41:23,340 --> 00:41:26,220
可能是深灰色或类似的东西。 

962
00:41:26,220 --> 00:41:28,160
如果我们希望它变成橙色怎么办？ 

963
00:41:28,160 --> 00:41:29,460
那么我们该怎么做呢？ 

964
00:41:29,460 --> 00:41:32,810
好吧，这是一个视图，这里是一些视图。 

965
00:41:32,810 --> 00:41:36,440
所有视图，任何表现得像视图的东西， 

966
00:41:36,440 --> 00:41:39,747
您可以在其上调用名为前景颜色的函数。 

967
00:41:41,920 --> 00:41:44,150
它接受一个参数，即Color。 

968
00:41:44,150 --> 00:41:46,690
我要用橙色。 

969
00:41:46,690 --> 00:41:50,670
这将设置它用来绘制的颜色

970
00:41:50,670 --> 00:41:52,480
变成这个颜色，橙色。 

971
00:41:52,480 --> 00:41:53,820
果然，看看那个。 

972
00:41:53,820 --> 00:41:56,700
在那里将其更改为橙色。 

973
00:41:56,700 --> 00:42:00,920
现在，可以在任何视图上调用此函数。 

974
00:42:00,920 --> 00:42:02,520
我们可以称其为Text。 

975
00:42:02,520 --> 00:42:03,970
您可以看到，没有错误。 

976
00:42:03,970 --> 00:42:05,869
当然，它对文本没有帮助

977
00:42:05,869 --> 00:42:07,130
因为这是一个表情符号。 

978
00:42:07,130 --> 00:42:11,220
但是如果“文字”改为字母X， 

979
00:42:11,220 --> 00:42:14,193
您会看到那里是一个橙色的X。 

980
00:42:15,820 --> 00:42:17,790
同样，在此处调用它没有任何意义。 

981
00:42:17,790 --> 00:42:22,790
我们可以将这个橙色发送到的另一件事是我们的ZStack。 

982
00:42:23,970 --> 00:42:26,860
告诉该视图意味着什么

983
00:42:26,860 --> 00:42:29,950
使它的前景色是橙色的？ 

984
00:42:29,950 --> 00:42:30,960
ZStack只是一个视图。 

985
00:42:30,960 --> 00:42:33,600
它的行为类似于View，因此具有前景色

986
00:42:33,600 --> 00:42:36,280
就像世界上其他所有视图一样。 

987
00:42:36,280 --> 00:42:39,687
而这意味着“向每个视图

988
00:42:39,687 --> 00:42:44,090
“在我内部使用前景色橙色。” 

989
00:42:44,090 --> 00:42:46,733
因此，这也有效。 

990
00:42:46,733 --> 00:42:47,566
看那个。 

991
00:42:47,566 --> 00:42:48,399
看，那是橙色。 

992
00:42:48,399 --> 00:42:51,490
再说一次，如果我们把这个鬼改成X， 

993
00:42:51,490 --> 00:42:54,610
X也将是橙色的，因为ZStack 

994
00:42:54,610 --> 00:42:57,100
本质上是在设置环境

995
00:42:57,100 --> 00:42:59,260
它里面的所有视图

996
00:42:59,260 --> 00:43:01,710
将用于绘制。 

997
00:43:01,710 --> 00:43:02,970
现在可以覆盖它。 

998
00:43:02,970 --> 00:43:07,500
然后我们可以说前景颜色（Color.blue）。 

999
00:43:08,850 --> 00:43:12,360
然后，我们在这里得到一个蓝色的。 

1000
00:43:12,360 --> 00:43:15,593
但这仍然是橙色。 

1001
00:43:16,470 --> 00:43:19,380
因为我只覆盖了这个前景

1002
00:43:19,380 --> 00:43:23,580
对于此处的此视图，此描边的RoundedRectangle。 

1003
00:43:23,580 --> 00:43:26,823
我没有在此处对此X覆盖它。 

1004
00:43:27,790 --> 00:43:31,300
因此，通过对这些函数的调用进行范围界定， 

1005
00:43:31,300 --> 00:43:33,750
这样我们就可以控制颜色是什么

1006
00:43:33,750 --> 00:43:35,373
这对于ZStack真的很有价值

1007
00:43:35,373 --> 00:43:37,830
因为我们最终要制造这个ZStack 

1008
00:43:37,830 --> 00:43:40,080
所以它在纸牌的正面，纸牌的背面

1009
00:43:40,080 --> 00:43:43,190
在所有情况下，所有想要变成橙色的东西。 

1010
00:43:43,190 --> 00:43:44,840
所以我们想要橙色作为一切

1011
00:43:44,840 --> 00:43:46,350
所以能够设置它真的很棒

1012
00:43:46,350 --> 00:43:48,517
对于整个ZStack。 

1013
00:43:48,517 --> 00:43:51,060
我们通常把这些修饰符

1014
00:43:51,060 --> 00:43:53,770
对于这些单独的合并器视图， 

1015
00:43:53,770 --> 00:43:55,470
只是为了让他们更加突出。 

1016
00:43:55,470 --> 00:43:57,660
而我们可能会将它们放在同一行。 

1017
00:43:57,660 --> 00:44:01,710
尽管偶尔，我们甚至会把这些

1018
00:44:01,710 --> 00:44:04,240
也放在单独的行上。 

1019
00:44:04,240 --> 00:44:07,150
但是我们不会在这里这样做，但是您可以。 

1020
00:44:07,150 --> 00:44:08,960
这是一种风格。 

1021
00:44:08,960 --> 00:44:11,070
但是，您认为您的代码最具可读性

1022
00:44:11,070 --> 00:44:12,270
也是最容易理解的

1023
00:44:13,600 --> 00:44:16,440
因此，我们在这里的卡取得了良好的进展。 

1024
00:44:16,440 --> 00:44:19,730
一件事，在这里很难看到边缘。 

1025
00:44:19,730 --> 00:44:24,130
我们有点想在此边缘周围填充一些内容。 

1026
00:44:24,130 --> 00:44:26,970
我们可以使用另一个View函数进行填充

1027
00:44:26,970 --> 00:44:29,080
称为填充。 

1028
00:44:29,080 --> 00:44:32,120
这里要注意的是，当我在文本周围加上填充时

1029
00:44:32,120 --> 00:44:35,040
哎呀，它弹出了，周围有一些填充物。 

1030
00:44:35,040 --> 00:44:36,730
现在，我可以在这里做同样的事情

1031
00:44:36,730 --> 00:44:40,960
我的笔触RoundedRectangle，因为它是一个视图。 

1032
00:44:40,960 --> 00:44:43,920
填充，哦，很好。 

1033
00:44:43,920 --> 00:44:46,030
您看，它在其中放置了填充。 

1034
00:44:46,030 --> 00:44:48,770
再说一次，我什至可以把填充

1035
00:44:49,940 --> 00:44:52,917
围绕我的整个ZStack。 

1036
00:44:54,953 --> 00:44:56,120
它把填充物放在整个ZStack上

1037
00:44:56,120 --> 00:44:57,260
这可能是我想要的

1038
00:44:57,260 --> 00:44:58,970
因为我不想放填充物

1039
00:44:58,970 --> 00:45:01,470
分别在每个RoundedRectangle上。 

1040
00:45:01,470 --> 00:45:02,880
像RoundedRectangle一样，我们将使用

1041
00:45:02,880 --> 00:45:05,690
最终我的卡背面等等。 

1042
00:45:05,690 --> 00:45:07,980
因此，很高兴能够将它们放在外面。 

1043
00:45:07,980 --> 00:45:11,070
现在，请注意填充之间的细微差别

1044
00:45:11,070 --> 00:45:12,570
和foregroundColor。 

1045
00:45:12,570 --> 00:45:15,120
填充填充ZStack。 

1046
00:45:15,120 --> 00:45:17,400
整个ZStack周围都有填充

1047
00:45:17,400 --> 00:45:19,260
并绘制了ZStack中的所有内容

1048
00:45:19,260 --> 00:45:21,200
在那小小的填充区域。 

1049
00:45:21,200 --> 00:45:23,490
而前景色实际上没有任何意义

1050
00:45:23,490 --> 00:45:25,197
ZStack。 

1051
00:45:25,197 --> 00:45:26,950
ZStack没有颜色。 

1052
00:45:26,950 --> 00:45:28,690
它所做的全部都包含其他视图。 

1053
00:45:28,690 --> 00:45:31,560
因此它被传递到环境中

1054
00:45:31,560 --> 00:45:33,943
里面的所有视图。 

1055
00:45:35,930 --> 00:45:36,870
好吧，让我们看看

1056
00:45:36,870 --> 00:45:38,770
我们一直在这里查看我们的预览。 

1057
00:45:38,770 --> 00:45:41,770
但是，让我们来看看我们的模拟器

1058
00:45:41,770 --> 00:45:43,180
看看这看起来如何。 

1059
00:45:43,180 --> 00:45:45,550
而且，很有意思。 

1060
00:45:45,550 --> 00:45:49,097
它正在工作，但在这里看起来不太好。 

1061
00:45:49,097 --> 00:45:52,240
那是因为我们的模拟器处于黑暗模式。 

1062
00:45:52,240 --> 00:45:55,190
确实，我们希望这种背景是白色的。 

1063
00:45:55,190 --> 00:45:57,570
即使在黑暗模式下，我们也希望它是白色的。 

1064
00:45:57,570 --> 00:46:00,760
我们不希望它成为黑色背景上的黑卡。 

1065
00:46:00,760 --> 00:46:03,290
假设我们希望它是白色的。 

1066
00:46:03,290 --> 00:46:04,910
那我们怎么把那白色？ 

1067
00:46:04,910 --> 00:46:08,090
不幸的是，您无法发送任何功能

1068
00:46:08,090 --> 00:46:11,030
改为说用一种颜色描边的RoundedRectangle 

1069
00:46:11,030 --> 00:46:13,350
然后用另一种颜色填充它。 

1070
00:46:13,350 --> 00:46:16,610
但这没问题，因为我们就在这里的ZStack中。 

1071
00:46:16,610 --> 00:46:19,760
所以我要创建另一个RoundedRectangle， 

1072
00:46:19,760 --> 00:46:23,730
而我将填充而不是中风。 

1073
00:46:23,730 --> 00:46:26,700
记住，这就是背后的原因。 

1074
00:46:26,700 --> 00:46:28,250
然后在这里继续。 

1075
00:46:28,250 --> 00:46:31,570
现在，它将用前景颜色填充

1076
00:46:31,570 --> 00:46:35,140
在这里设置为环境，所以我什至看不到。 

1077
00:46:35,140 --> 00:46:38,310
但幸运的是fill需要一个可选参数

1078
00:46:38,310 --> 00:46:40,250
这是要填充的颜色。 

1079
00:46:40,250 --> 00:46:43,810
并在此覆盖此foregroundColor。 

1080
00:46:43,810 --> 00:46:44,790
所以现在这是白色的。 

1081
00:46:44,790 --> 00:46:48,390
如果单击此处，它将用白色填充。 

1082
00:46:48,390 --> 00:46:52,213
还有那个橙色的边框，很难看清。 

1083
00:46:52,213 --> 00:46:56,230
它只有一点宽，尤其是黑色。 

1084
00:46:56,230 --> 00:46:57,680
真的很难看到。 

1085
00:46:57,680 --> 00:46:59,574
因此，让我们对其进行修复。 

1086
00:46:59,574 --> 00:47:01,530
我告诉你的中风还可以接受其他论点。 

1087
00:47:01,530 --> 00:47:04,320
可以采用的是线宽。 

1088
00:47:04,320 --> 00:47:07,060
因此，使它的线宽为三。 

1089
00:47:07,060 --> 00:47:10,540
同样，我们可以在此处继续以灯光模式查看它。 

1090
00:47:10,540 --> 00:47:11,373
在那里。 

1091
00:47:11,373 --> 00:47:16,096
我们可以在这里运行以在暗模式下进行查看。 

1092
00:47:16,096 --> 00:47:18,810
顺便说一下，模拟器的明暗模式

1093
00:47:18,810 --> 00:47:20,970
也可以在这里控制

1094
00:47:20,970 --> 00:47:22,800
您在这里看到这个小按钮吗？ 

1095
00:47:22,800 --> 00:47:24,200
您看到此界面样式了吗？ 

1096
00:47:24,200 --> 00:47:27,580
您可以将其打开，然后从暗模式转到亮模式。 

1097
00:47:27,580 --> 00:47:29,830
现在，如果您回到模拟器， 

1098
00:47:29,830 --> 00:47:31,480
它处于灯光模式。 

1099
00:47:31,480 --> 00:47:35,373
这确实是一种来回切换的好方法。 

1100
00:47:37,890 --> 00:47:40,620
因此，我们在这里取得了很大进展。 

1101
00:47:40,620 --> 00:47:43,590
我们的小表情符号仍然很小。 

1102
00:47:43,590 --> 00:47:44,810
我要把它放大。 

1103
00:47:44,810 --> 00:47:47,160
我可以用Font做到这一点。 

1104
00:47:47,160 --> 00:47:49,280
字体，Font.largeTitle。 

1105
00:47:50,200 --> 00:47:53,563
现在，我在这里使用一种称为罐头字体的罐头字体。 

1106
00:47:53,563 --> 00:47:56,998
还有其他一些叫做副标题

1107
00:47:56,998 --> 00:47:58,900
和身体等。 

1108
00:47:58,900 --> 00:48:02,253
largeTitle恰好是我可以找到的最大标题。 

1109
00:48:03,100 --> 00:48:04,830
如果我们恢复，您将看到

1110
00:48:04,830 --> 00:48:06,210
它会使我们的表情符号更大。 

1111
00:48:06,210 --> 00:48:08,810
仍然不够大。 

1112
00:48:08,810 --> 00:48:11,460
下周我们将学习如何缩放字体

1113
00:48:11,460 --> 00:48:14,760
大小正好适合我们的卡片

1114
00:48:14,760 --> 00:48:17,580
但是目前至少它会变得更大一些。 

1115
00:48:17,580 --> 00:48:18,940
我这样做的原因之一

1116
00:48:18,940 --> 00:48:21,420
我也想告诉你这个字体， 

1117
00:48:21,420 --> 00:48:24,180
虽然这似乎是纯文本的事情， 

1118
00:48:24,180 --> 00:48:27,400
它实际上可以放在ZStack上

1119
00:48:27,400 --> 00:48:32,080
它将为所有文本设置字体环境。 

1120
00:48:32,080 --> 00:48:35,299
因此，如果我在ZStack中有多个Text， 

1121
00:48:35,299 --> 00:48:38,127
那么它将使用字体，所有字体都使用该字体。 

1122
00:48:38,127 --> 00:48:40,080
您可以轻松想象构建某些东西

1123
00:48:40,080 --> 00:48:40,997
有多段文字

1124
00:48:40,997 --> 00:48:43,350
并且您希望它们都使用相同的字体。 

1125
00:48:43,350 --> 00:48:47,240
因此在ZStack上设置它是一个非常酷的功能

1126
00:48:47,240 --> 00:48:48,203
为此。 

1127
00:48:49,830 --> 00:48:53,500
所以我有点想像这张卡。 

1128
00:48:53,500 --> 00:48:57,370
现在我要多张卡，因为我这里只有一张卡

1129
00:48:57,370 --> 00:48:59,540
而且我很想拥有多张卡。 

1130
00:48:59,540 --> 00:49:01,640
那我将如何获得多张卡？ 

1131
00:49:01,640 --> 00:49:06,090
我将通过返回另一种视图来做到这一点， 

1132
00:49:06,090 --> 00:49:07,393
另一个合并器视图。 

1133
00:49:07,393 --> 00:49:09,536
这称为ForEach。 

1134
00:49:09,536 --> 00:49:12,920
现在，ForEach当然需要参数。 

1135
00:49:12,920 --> 00:49:15,170
第一个参数，它有两个参数。 

1136
00:49:15,170 --> 00:49:20,170
第一个参数就像某种可迭代的事物。 

1137
00:49:20,370 --> 00:49:21,780
我们将在稍后讨论。 

1138
00:49:21,780 --> 00:49:26,500
就像ZStack一样，第二个参数就是内容。 

1139
00:49:26,500 --> 00:49:30,263
内容就是这个ZStack。 

1140
00:49:34,100 --> 00:49:36,050
ForEach将会做什么

1141
00:49:36,050 --> 00:49:39,530
它将迭代这个可迭代的事情。 

1142
00:49:39,530 --> 00:49:41,150
对于这些东西， 

1143
00:49:41,150 --> 00:49:44,020
将要构建这些视图之一。 

1144
00:49:44,020 --> 00:49:48,000
因此，它本质上是制作多个视图的一种方法。 

1145
00:49:48,000 --> 00:49:51,160
View复制器或View迭代器的种类

1146
00:49:51,160 --> 00:49:53,160
如果您想这样想。 

1147
00:49:53,160 --> 00:49:56,980
那么，我们在这里谈论的这件事是什么呢？ 

1148
00:49:56,980 --> 00:49:59,650
好吧，通常这将是一个数组。 

1149
00:49:59,650 --> 00:50:01,370
所以你要给它一些东西

1150
00:50:01,370 --> 00:50:03,320
对于数组中的每个事物， 

1151
00:50:03,320 --> 00:50:05,030
这将创建一个视图。 

1152
00:50:05,030 --> 00:50:06,410
我不会在这里使用数组。 

1153
00:50:06,410 --> 00:50:08,800
我们最终将切换为使用数组

1154
00:50:08,800 --> 00:50:12,780
但我正在使用另一种称为Range的可迭代对象。 

1155
00:50:12,780 --> 00:50:17,430
因此，这是从零到不包括四个的范围。 

1156
00:50:17,430 --> 00:50:20,570
这就是这里的Swift语法的含义。 

1157
00:50:20,570 --> 00:50:25,570
表示从下限到上限的范围， 

1158
00:50:25,970 --> 00:50:27,340
不包括上限。 

1159
00:50:27,340 --> 00:50:31,230
如果您说点-点-点，则它包括上限。 

1160
00:50:31,230 --> 00:50:34,030
但是我不想包含上限。 

1161
00:50:34,030 --> 00:50:37,560
因此，这是零，一，二和三。 

1162
00:50:37,560 --> 00:50:40,923
将在这里创建此ZStack。 

1163
00:50:41,940 --> 00:50:43,660
因此，它是一个中继器。 

1164
00:50:43,660 --> 00:50:45,180
现在，一件事也很酷， 

1165
00:50:45,180 --> 00:50:47,600
因此，在具有内容的地方也是一样。 

1166
00:50:47,600 --> 00:50:49,380
这可能是“视图”列表。 

1167
00:50:49,380 --> 00:50:53,060
这里只有一个View，它是一个ZStack。 

1168
00:50:53,060 --> 00:50:54,910
但是我们可能有很多事情。 

1169
00:50:54,910 --> 00:50:56,960
就像在ZStack中一样，我们有很多事情。 

1170
00:50:56,960 --> 00:50:59,320
ForEach，它的小花括号

1171
00:50:59,320 --> 00:51:01,400
可能有很多东西。 

1172
00:51:01,400 --> 00:51:03,970
ForEach也很酷的一件事

1173
00:51:03,970 --> 00:51:06,200
其实这里有这个小东西吗

1174
00:51:06,200 --> 00:51:11,060
我们将在某个时候谈论这个“中”的含义

1175
00:51:11,060 --> 00:51:13,390
但这本质上是迭代变量。 

1176
00:51:13,390 --> 00:51:16,770
因此，在这种情况下，该索引为零。 

1177
00:51:16,770 --> 00:51:19,320
然后是一，然后是二，然后是三

1178
00:51:19,320 --> 00:51:21,900
因为它使得这四个。 

1179
00:51:21,900 --> 00:51:23,330
现在，关于ForEach的一件事， 

1180
00:51:23,330 --> 00:51:25,360
您会在实际制作的预览中看到

1181
00:51:25,360 --> 00:51:29,580
四个单独的预览。 

1182
00:51:29,580 --> 00:51:33,360
那是因为ForEach不是布局视图。 

1183
00:51:33,360 --> 00:51:34,732
它不像ZStack。 

1184
00:51:34,732 --> 00:51:37,540
ZStack将视图放置在屏幕上

1185
00:51:37,540 --> 00:51:39,960
从背面到正面彼此重叠。 

1186
00:51:39,960 --> 00:51:42,680
ForEach不会这样做，如果您运行， 

1187
00:51:42,680 --> 00:51:43,930
如果我们要在模拟器中运行它， 

1188
00:51:43,930 --> 00:51:45,620
可能会将View放在某处

1189
00:51:45,620 --> 00:51:49,460
因为它显然无法模拟多部iPhone。 

1190
00:51:49,460 --> 00:51:51,760
但实际上预览实际上显示了更多

1191
00:51:51,760 --> 00:51:54,410
创建四个视图的情况。 

1192
00:51:54,410 --> 00:51:56,500
因此，它向您展示了四种视图

1193
00:51:56,500 --> 00:51:57,820
它正在创造。 

1194
00:51:57,820 --> 00:51:59,040
调试真的很酷。 

1195
00:51:59,040 --> 00:52:00,620
就像，“哦，是的，这就是现在。” 

1196
00:52:00,620 --> 00:52:02,410
我们的四个观点是完全一样的

1197
00:52:02,410 --> 00:52:04,760
所以对我们来说没那么有趣。 

1198
00:52:04,760 --> 00:52:06,110
但是我们真正想做的是

1199
00:52:06,110 --> 00:52:08,647
将所有这四个同时显示在屏幕上。 

1200
00:52:08,647 --> 00:52:11,450
为此，我们需要另一个堆栈。 

1201
00:52:11,450 --> 00:52:13,750
现在，我们不想将它们堆叠在一起

1202
00:52:13,750 --> 00:52:16,130
而且我们看不到后面的东西。 

1203
00:52:16,130 --> 00:52:17,470
相反，我们想要一个不同的

1204
00:52:17,470 --> 00:52:19,503
这就是我们要返回的HStack。 

1205
00:52:20,698 --> 00:52:23,683
就像ZStack一样，我们的HStack也具有内容。 

1206
00:52:24,640 --> 00:52:26,960
然后您将内容放入内容中

1207
00:52:26,960 --> 00:52:31,203
你想这样安排。 

1208
00:52:32,200 --> 00:52:36,840
和HStack一样，而不是从头到尾地安排事情， 

1209
00:52:36,840 --> 00:52:38,820
它水平排列东西。 

1210
00:52:38,820 --> 00:52:40,670
这就是H从左到右的意思。 

1211
00:52:40,670 --> 00:52:44,050
因此，从左到右看，它在那里排列。 

1212
00:52:44,050 --> 00:52:49,050
现在，我告诉你，斯威夫特喜欢不打东西

1213
00:52:49,120 --> 00:52:50,690
您不需要输入。 

1214
00:52:50,690 --> 00:52:52,530
那回报我仍然可以删除

1215
00:52:52,530 --> 00:52:53,990
因为信不信由你

1216
00:52:53,990 --> 00:52:56,993
仍然只返回一个视图。 

1217
00:52:57,910 --> 00:53:00,090
被用作这个身体的价值， 

1218
00:53:00,090 --> 00:53:01,280
一些视图，它是一个视图。 

1219
00:53:01,280 --> 00:53:06,280
这是一个由ForEaches组成的HStack，用于填充ZStacks。 

1220
00:53:07,060 --> 00:53:08,720
它具有前景色和字体。 

1221
00:53:08,720 --> 00:53:11,500
那就是返回的那个视图。 

1222
00:53:11,500 --> 00:53:14,540
当然，HStack是组合器，因此它正在组合东西。 

1223
00:53:14,540 --> 00:53:17,950
ForEach是组合器，ZStack是组合器。 

1224
00:53:17,950 --> 00:53:20,820
但是这些都在HStack内部。 

1225
00:53:20,820 --> 00:53:22,600
现在，还要注意HStack 

1226
00:53:22,600 --> 00:53:25,710
当看到ForEach时，因为这可能是一个列表， 

1227
00:53:25,710 --> 00:53:28,890
我们可以说Text（“ hello”） 

1228
00:53:28,890 --> 00:53:30,400
因此它打招呼。 

1229
00:53:30,400 --> 00:53:33,700
然后这个ForEach就像清单

1230
00:53:33,700 --> 00:53:35,740
每个ZStack分别。 

1231
00:53:35,740 --> 00:53:36,870
这就是为什么这样做。 

1232
00:53:36,870 --> 00:53:38,370
因此，每个堆栈都很聪明。 

1233
00:53:38,370 --> 00:53:40,610
它知道里面是否有ForEach 

1234
00:53:40,610 --> 00:53:41,690
然后它想要布局

1235
00:53:41,690 --> 00:53:43,833
每个ForEach事物分别存在。 

1236
00:53:45,050 --> 00:53:48,400
现在，这里要注意的另一件事是间距。 

1237
00:53:48,400 --> 00:53:51,870
这些东西之间有一点空间。 

1238
00:53:51,870 --> 00:53:53,850
这是这里的填充吗？ 

1239
00:53:53,850 --> 00:53:55,910
不，那个填充就是这个填充

1240
00:53:55,910 --> 00:53:57,957
在HStack的外部

1241
00:53:57,957 --> 00:54:02,520
因为填充函数是在HStack本身上调用的。 

1242
00:54:02,520 --> 00:54:06,670
这个间隔实际上是HStack正在做的事情

1243
00:54:06,670 --> 00:54:08,800
它有一个参数可以让您进行设置。 

1244
00:54:08,800 --> 00:54:10,970
所以在这里，我将间距设置为零。 

1245
00:54:10,970 --> 00:54:15,410
或将其设置为50或不指定。 

1246
00:54:15,410 --> 00:54:17,630
很多时候，我们没有指定那些东西

1247
00:54:17,630 --> 00:54:21,330
因为我们希望此间距为标准间距。 

1248
00:54:21,330 --> 00:54:23,430
在所有应用中都一样。 

1249
00:54:23,430 --> 00:54:24,930
在这里填充同样的事情。 

1250
00:54:24,930 --> 00:54:26,940
我们在这里没有指定任何内容，但在填充中

1251
00:54:26,940 --> 00:54:30,170
您实际上甚至可以在顶部填充100。 

1252
00:54:30,170 --> 00:54:34,730
或所有边上的填充都是10。 

1253
00:54:34,730 --> 00:54:38,870
但是通常我们会尽可能地使用标准填充。 

1254
00:54:38,870 --> 00:54:40,733
标准填充和间距。 

1255
00:54:42,180 --> 00:54:46,900
现在，我告诉您，记得我们带走了这份退货。 

1256
00:54:46,900 --> 00:54:49,430
我们可以拿走另一件事。 

1257
00:54:49,430 --> 00:54:54,430
在Swift中，如果函数的最后一个参数

1258
00:54:54,633 --> 00:54:57,310
或某物的创造，所以这里是ForEach。 

1259
00:54:57,310 --> 00:54:58,450
它有两个参数。 

1260
00:54:58,450 --> 00:55:02,640
此后再将其作为第二个参数。 

1261
00:55:02,640 --> 00:55:06,320
如果第二个参数是大括号， 

1262
00:55:06,320 --> 00:55:10,380
信不信由你，你可以摆脱标签

1263
00:55:10,380 --> 00:55:14,500
并将其放在函数调用之外。 

1264
00:55:14,500 --> 00:55:15,720
这就是ForEach。 

1265
00:55:15,720 --> 00:55:18,170
因此基本上就是ForEach的创建。 

1266
00:55:18,170 --> 00:55:19,550
这是它的第二个论点。 

1267
00:55:19,550 --> 00:55:23,833
它浮在括号之外。 

1268
00:55:24,810 --> 00:55:27,420
因此，这似乎有点疯狂。 

1269
00:55:27,420 --> 00:55:30,240
但是实际上，看起来它使我们的代码看起来像什么。 

1270
00:55:30,240 --> 00:55:32,490
我要为所有这些事情做

1271
00:55:32,490 --> 00:55:34,190
因为这只有一个论点。 

1272
00:55:35,537 --> 00:55:37,954
所以我要摆脱它。 

1273
00:55:39,190 --> 00:55:43,440
我将在这里为我的HStack做同样的事情。 

1274
00:55:46,890 --> 00:55:48,570
因此，这看起来要干净得多。 

1275
00:55:48,570 --> 00:55:49,787
您那里没有这些内容。 

1276
00:55:49,787 --> 00:55:53,720
更重要的是，如果您没有争论， 

1277
00:55:53,720 --> 00:55:56,080
在那种情况下，你有一个小花呢家伙

1278
00:55:56,080 --> 00:55:58,963
在那里闲逛，您也可以将其删除。 

1279
00:56:00,450 --> 00:56:04,300
这样就可以大大清理我们的代码。 

1280
00:56:04,300 --> 00:56:06,217
当然，我们正在做这些ZStack 

1281
00:56:06,217 --> 00:56:07,610
这些HStack一直都在

1282
00:56:07,610 --> 00:56:09,920
现在，如果我想重新设置间距，我可以。 

1283
00:56:09,920 --> 00:56:13,050
间距为零，非常好。 

1284
00:56:13,050 --> 00:56:15,130
它仍然是第一个论点。 

1285
00:56:15,130 --> 00:56:19,093
这仍然是HStack的第二个论点。 

1286
00:56:20,508 --> 00:56:22,208
所以有点清理。 

1287
00:56:23,420 --> 00:56:25,960
所以我们的代码看起来已经很干净了

1288
00:56:25,960 --> 00:56:27,700
制作这四张牌。 

1289
00:56:27,700 --> 00:56:30,170
我们可以再清理一点

1290
00:56:30,170 --> 00:56:32,330
通过剔除我们的一些代码。 

1291
00:56:32,330 --> 00:56:35,420
这里的ZStack本质上就是一张卡。 

1292
00:56:35,420 --> 00:56:38,270
如果我刚刚创建了一个新的结构，那会很酷吗

1293
00:56:38,270 --> 00:56:41,980
称为CardView的行为也类似于View？ 

1294
00:56:41,980 --> 00:56:42,940
什么意思

1295
00:56:42,940 --> 00:56:47,280
它必须具有某种View的var主体。 

1296
00:56:47,280 --> 00:56:49,110
在这里，我们只返回一些视图。 

1297
00:56:49,110 --> 00:56:51,530
我要归还ZStack。 

1298
00:56:51,530 --> 00:56:54,573
从那里切下，粘贴到那里。 

1299
00:56:55,500 --> 00:56:56,900
然后在ContentView中， 

1300
00:56:56,900 --> 00:56:58,613
我只是要创建一个CardView。 

1301
00:57:01,240 --> 00:57:03,760
所以这是我们可以使用视图的一种方式

1302
00:57:03,760 --> 00:57:06,830
分解出我们的代码进行封装。 

1303
00:57:06,830 --> 00:57:09,710
使我们的代码看起来更简单，更好。 

1304
00:57:09,710 --> 00:57:10,863
有人在看这个ContentView， 

1305
00:57:10,863 --> 00:57:15,190
真的很容易看出来。 

1306
00:57:15,190 --> 00:57:17,610
同样在这里。 

1307
00:57:17,610 --> 00:57:18,693
简单看。 

1308
00:57:19,920 --> 00:57:22,920
现在，本课我要做的最后一件事

1309
00:57:22,920 --> 00:57:25,430
是做卡的正面和背面。 

1310
00:57:25,430 --> 00:57:29,090
因为现在，我们只显示了卡的正面。 

1311
00:57:29,090 --> 00:57:30,930
我们永远不会显示卡的背面。 

1312
00:57:30,930 --> 00:57:33,300
那么，我们将如何抽回这张卡呢？ 

1313
00:57:33,300 --> 00:57:35,740
好吧，它也是ZStack 

1314
00:57:35,740 --> 00:57:38,500
但它充满了前台颜色。 

1315
00:57:38,500 --> 00:57:40,950
所以我们实际上可以继续

1316
00:57:40,950 --> 00:57:43,240
然后复制并粘贴到这里

1317
00:57:43,240 --> 00:57:46,400
将RoundedRectangle用作背面。 

1318
00:57:46,400 --> 00:57:48,267
现在，我将对此进行评论。 

1319
00:57:48,267 --> 00:57:50,480
当然，我们也不想用白色填充。 

1320
00:57:50,480 --> 00:57:54,930
我们只是想填充我们的环境颜色是什么。 

1321
00:57:54,930 --> 00:57:56,720
它将从这里得到。 

1322
00:57:56,720 --> 00:57:58,520
注意，这个前景色

1323
00:57:58,520 --> 00:58:01,900
不仅适用于HStack中的所有内容

1324
00:58:01,900 --> 00:58:03,900
ForEach将其传递下去

1325
00:58:03,900 --> 00:58:05,450
使其适用于CardView 

1326
00:58:05,450 --> 00:58:07,090
传递下去。 

1327
00:58:07,090 --> 00:58:08,620
这适用于ZStack 

1328
00:58:08,620 --> 00:58:10,120
传递下去

1329
00:58:10,120 --> 00:58:12,890
这样它就适用于所有这些东西。 

1330
00:58:12,890 --> 00:58:14,710
现在，如果我们恢复。 

1331
00:58:14,710 --> 00:58:17,143
我们可以看到卡片背面。 

1332
00:58:18,410 --> 00:58:20,720
看，这是我们卡片的背面。 

1333
00:58:20,720 --> 00:58:23,513
就在这里，刚刚填充的RoundedRectangles。 

1334
00:58:24,450 --> 00:58:27,530
但是，当然，我们确实希望拥有前沿的业务

1335
00:58:27,530 --> 00:58:31,200
和卡片背面某种程度上是有条件的。 

1336
00:58:31,200 --> 00:58:34,900
或者卡朝上或朝下。 

1337
00:58:34,900 --> 00:58:37,910
因此，我们需要一个if-then或其他东西。 

1338
00:58:37,910 --> 00:58:41,130
好吧，这里令人惊奇的是，这个ZStack 

1339
00:58:41,130 --> 00:58:44,760
这允许您在此处放置视图列表

1340
00:58:44,760 --> 00:58:47,540
还可以让您放置ifs。 

1341
00:58:47,540 --> 00:58:49,290
所以你可以放简单的ifs like 

1342
00:58:49,290 --> 00:58:53,080
假设现在是isFaceUp。 

1343
00:58:53,080 --> 00:58:57,000
我们将这三件事放在isFaceUp案例中。 

1344
00:58:57,000 --> 00:59:00,000
然后，如果面朝下， 

1345
00:59:00,000 --> 00:59:02,933
然后我们将其放在此处。 

1346
00:59:03,970 --> 00:59:05,580
所以我们实际上可以放一个if。 

1347
00:59:05,580 --> 00:59:07,550
现在，我们在这里遇到各种错误和警告

1348
00:59:07,550 --> 00:59:10,206
因为我刚刚编造了isFaceUp。 

1349
00:59:10,206 --> 00:59:12,290
没关系

1350
00:59:12,290 --> 00:59:13,470
我只是编造的。 

1351
00:59:13,470 --> 00:59:15,970
我要的是FaceUp吗？ 

1352
00:59:15,970 --> 00:59:18,750
好吧，我只是要一个变种。 

1353
00:59:18,750 --> 00:59:21,563
这在内存中会是正常的。 

1354
00:59:21,563 --> 00:59:24,500
它不会有任何花括号或任何东西。 

1355
00:59:24,500 --> 00:59:28,180
这只是内存中的正常变量。 

1356
00:59:28,180 --> 00:59:30,690
您会看到这里修复了我们所有的代码。 

1357
00:59:30,690 --> 00:59:34,460
CardView是完美的，内部自洽的。 

1358
00:59:34,460 --> 00:59:38,630
意思是说我的isFaceUp var是否为真， 

1359
00:59:38,630 --> 00:59:40,880
然后这样，否则就这样。 

1360
00:59:40,880 --> 00:59:43,310
但这确实在这里引起了错误。 

1361
00:59:43,310 --> 00:59:44,840
这个错误是关于什么的， 

1362
00:59:44,840 --> 00:59:47,210
isFaceUp是否缺少参数？ 

1363
00:59:47,210 --> 00:59:48,790
为什么这么说呢？ 

1364
00:59:48,790 --> 00:59:50,360
好吧，我早先告诉过你。 

1365
00:59:50,360 --> 00:59:53,650
Swift，所有变量，它是强类型的

1366
00:59:53,650 --> 00:59:57,320
并且所有变量都必须具有初始值。 

1367
00:59:57,320 --> 00:59:59,170
所以我们可以设置一个初始值

1368
00:59:59,170 --> 01:00:01,920
只是说这等于假。 

1369
01:00:01,920 --> 01:00:06,053
如果我说这将在这里修复此错误。 

1370
01:00:07,340 --> 01:00:08,840
面朝上是假的，这样做。 

1371
01:00:08,840 --> 01:00:13,313
如果我将此FaceFaceUp更改为true并恢复， 

1372
01:00:15,530 --> 01:00:17,470
现在我们获得面朝上的卡片。 

1373
01:00:17,470 --> 01:00:18,940
所以这是设置它的一种方法。 

1374
01:00:18,940 --> 01:00:21,400
如果合理的话，我们通常会设置它。 

1375
01:00:21,400 --> 01:00:23,150
但是如果我们不在这里设置它， 

1376
01:00:23,150 --> 01:00:24,650
我们没有给它一个默认值， 

1377
01:00:24,650 --> 01:00:26,630
那是我们在这里收到此错误的时间。 

1378
01:00:26,630 --> 01:00:29,390
因为Swift在说这个CardView 

1379
01:00:29,390 --> 01:00:31,310
您正在尝试在此处创建的内容， 

1380
01:00:31,310 --> 01:00:33,430
它具有一个未初始化的变量。 

1381
01:00:33,430 --> 01:00:35,763
因此，您必须对其进行初始化。 

1382
01:00:36,620 --> 01:00:38,110
这是一个很酷的功能。 

1383
01:00:38,110 --> 01:00:41,820
如果您点击该红色错误小按钮， 

1384
01:00:41,820 --> 01:00:44,590
很多时候，您会得到这个小的Fix选项。 

1385
01:00:44,590 --> 01:00:46,950
修复将为您修复错误。 

1386
01:00:46,950 --> 01:00:49,000
现在，它并不总是能解决它

1387
01:00:49,000 --> 01:00:51,990
正是您想要的方式，因此它并非始终有效。 

1388
01:00:51,990 --> 01:00:54,310
而且并不总是有“修复”选项。 

1389
01:00:54,310 --> 01:00:55,460
因为有时无法弄清楚

1390
01:00:55,460 --> 01:00:56,940
如何解决您的问题。 

1391
01:00:56,940 --> 01:00:58,040
但是在这里确实有效。 

1392
01:00:58,040 --> 01:01:02,410
如果我点击“修复”，它实际上会添加一个参数

1393
01:01:02,410 --> 01:01:03,780
创建CardView 

1394
01:01:04,630 --> 01:01:08,030
设置此变量为isFaceUp。 

1395
01:01:08,030 --> 01:01:09,863
所以，如果我在这里说假， 

1396
01:01:10,990 --> 01:01:14,270
它将初始化该变量。 

1397
01:01:14,270 --> 01:01:15,103
让我们继续。 

1398
01:01:18,430 --> 01:01:19,830
在那里。 

1399
01:01:19,830 --> 01:01:21,700
错误，面朝上是错误的。 

1400
01:01:21,700 --> 01:01:22,890
这被初始化为false。 

1401
01:01:22,890 --> 01:01:25,210
所有这些都没有面子。 

1402
01:01:25,210 --> 01:01:29,273
现在，希望这种模式对您来说很熟悉。 

1403
01:01:29,273 --> 01:01:31,953
与此模式相同。 

1404
01:01:32,870 --> 01:01:34,860
在这里，我正在创建一个ZStack。 

1405
01:01:34,860 --> 01:01:36,740
它可能有一些变种。 

1406
01:01:36,740 --> 01:01:38,430
不一定是因为还有其他方法

1407
01:01:38,430 --> 01:01:39,810
传递这些变量。 

1408
01:01:39,810 --> 01:01:42,130
但是它可能有一个名为cornerRadius的变量。 

1409
01:01:42,130 --> 01:01:46,140
因此，这迫使我们进行设置， 

1410
01:01:46,140 --> 01:01:48,390
定义它是因为我们不能拥有未设置的变量。 

1411
01:01:49,460 --> 01:01:51,010
这是同样的事情。 

1412
01:01:52,040 --> 01:01:55,950
好的，就是这个讲座。 

1413
01:01:55,950 --> 01:01:57,080
在下一讲中

1414
01:01:57,080 --> 01:01:59,210
我实际上将从一些幻灯片开始， 

1415
01:01:59,210 --> 01:02:00,620
一些概念性的东西。 

1416
01:02:00,620 --> 01:02:03,000
然后，我们将回到本演示。 

1417
01:02:03,000 --> 01:02:04,830
通常我会告诉你更多

1418
01:02:04,830 --> 01:02:07,220
关于下一场演讲将会发生什么。 

1419
01:02:07,220 --> 01:02:09,380
除了我要发表第二讲

1420
01:02:09,380 --> 01:02:10,910
以及第一堂课。 

1421
01:02:10,910 --> 01:02:12,690
因此，如果您真的想看看第二讲的内容， 

1422
01:02:12,690 --> 01:02:14,113
马上去看吧。 

1423
01:02:15,760 --> 01:02:18,993
-[播音员]有关更多信息，请访问stanford.edu。 

