1
00:00:00,316 --> 00:00:02,899
（宁静的音乐） 

2
00:00:04,940 --> 00:00:06,590
-[旁白]斯坦福大学。 

3
00:00:11,490 --> 00:00:12,510
- 大家好。 

4
00:00:12,510 --> 00:00:16,930
欢迎使用2020年春季的CS193p。 

5
00:00:16,930 --> 00:00:20,534
这是第11课，露天版本。 

6
00:00:20,534 --> 00:00:23,160
在外面庆祝

7
00:00:23,160 --> 00:00:25,960
我们几乎涵盖了SwiftUI的主要主题。 

8
00:00:25,960 --> 00:00:27,820
现在您应该可以起飞了

9
00:00:27,820 --> 00:00:29,090
并完成您的最终项目

10
00:00:29,090 --> 00:00:30,950
完成第六项作业后， 

11
00:00:30,950 --> 00:00:34,080
您现在正处于工作之中。 

12
00:00:34,080 --> 00:00:35,824
我还要再讲一些课

13
00:00:35,824 --> 00:00:38,340
尽管我将在停课一周不上课， 

14
00:00:38,340 --> 00:00:41,060
我也不会在阵亡将士纪念日讲课。 

15
00:00:41,060 --> 00:00:44,154
因此，我认为这会使我们剩下三堂课。 

16
00:00:44,154 --> 00:00:48,540
我会尽量加快这些讲座的速度

17
00:00:48,540 --> 00:00:49,960
因为它们都是话题

18
00:00:49,960 --> 00:00:52,770
您可能想为最终项目工作， 

19
00:00:52,770 --> 00:00:55,220
不需要，但您可能想使用它们。 

20
00:00:55,220 --> 00:00:57,400
如果我等太久才把它们拿出来， 

21
00:00:57,400 --> 00:00:58,900
您将没有时间合并他们

22
00:00:58,900 --> 00:00:59,733
进入您的最终项目。 

23
00:00:59,733 --> 00:01:03,800
因此，我将尽一切可能尽快解决这些问题。 

24
00:01:03,800 --> 00:01:06,810
说到您的最终项目， 

25
00:01:06,810 --> 00:01:09,080
仔细阅读标题。 

26
00:01:09,080 --> 00:01:10,610
如果您对此有任何疑问， 

27
00:01:10,610 --> 00:01:14,420
确保您在课堂上提问，提问， 

28
00:01:14,420 --> 00:01:18,200
我很乐意回答和澄清，等等。 

29
00:01:18,200 --> 00:01:20,480
关于最终项目的建议， 

30
00:01:20,480 --> 00:01:24,230
我真的建议您制定一份详细的项目建议书。 

31
00:01:24,230 --> 00:01:25,630
这是您的第一个可交付成果。 

32
00:01:25,630 --> 00:01:27,360
这是星期一

33
00:01:27,360 --> 00:01:30,050
我们将不承担任何责任

34
00:01:30,050 --> 00:01:32,060
如果你说你要在那个提议中做点什么

35
00:01:32,060 --> 00:01:33,550
而且您最终不会这样做。 

36
00:01:33,550 --> 00:01:36,750
所以最好在那边建议太多

37
00:01:36,750 --> 00:01:38,630
然后再简短一点

38
00:01:38,630 --> 00:01:41,690
比相反的建议还不够， 

39
00:01:41,690 --> 00:01:43,620
你不确定你会做什么

40
00:01:43,620 --> 00:01:44,740
然后你潜入它

41
00:01:44,740 --> 00:01:45,704
你真的没想过

42
00:01:45,704 --> 00:01:47,730
并计划要做什么。 

43
00:01:47,730 --> 00:01:49,227
这是我的第一条建议。 

44
00:01:49,227 --> 00:01:50,747
我的第二条建议

45
00:01:50,747 --> 00:01:52,680
老黑的建议

46
00:01:52,680 --> 00:01:54,740
你们这里所有课程的讲师

47
00:01:54,740 --> 00:01:56,990
这是很早开始的。 

48
00:01:56,990 --> 00:02:00,620
现在，这不仅是提早开始，所以您有更多时间， 

49
00:02:00,620 --> 00:02:02,780
您想早点开始，因为正如我所说， 

50
00:02:02,780 --> 00:02:05,280
甚至在这门课程中说过，我不记得了， 

51
00:02:05,280 --> 00:02:08,770
但是编程就像在做填字游戏。 

52
00:02:08,770 --> 00:02:11,000
即使您真的很擅长填字游戏， 

53
00:02:11,000 --> 00:02:12,720
有时您会开始

54
00:02:12,720 --> 00:02:14,340
而你只是想不通。 

55
00:02:14,340 --> 00:02:15,880
而且您只是确信这是不可能的

56
00:02:15,880 --> 00:02:19,840
我要在拐角处获得最后四个

57
00:02:19,840 --> 00:02:21,640
或类似的东西，这是不可能的。 

58
00:02:21,640 --> 00:02:24,150
然后你去睡觉，第二天醒来

59
00:02:24,150 --> 00:02:25,260
你吃午饭了

60
00:02:25,260 --> 00:02:26,659
然后在下午，突然间， 

61
00:02:26,659 --> 00:02:29,810
哦，是的，我知道39下来是什么。 

62
00:02:29,810 --> 00:02:34,040
一旦下降39，整个事情就就解决了。 

63
00:02:34,040 --> 00:02:36,217
那是因为你的潜意识

64
00:02:36,217 --> 00:02:39,100
有机会去做那个填字游戏。 

65
00:02:39,100 --> 00:02:40,559
你的意识分散

66
00:02:40,559 --> 00:02:42,739
周围发生的很多事情

67
00:02:42,739 --> 00:02:44,369
带宽有限。 

68
00:02:44,369 --> 00:02:47,355
您的潜意识可以坐在那里做饭

69
00:02:47,355 --> 00:02:50,630
并提出最惊人的解决方案。 

70
00:02:50,630 --> 00:02:52,920
因此，让您的潜意识开始工作。 

71
00:02:52,920 --> 00:02:54,250
完成您的最终项目， 

72
00:02:54,250 --> 00:02:56,670
即使一天只有20分钟

73
00:02:56,670 --> 00:02:58,160
与它接触

74
00:02:58,160 --> 00:03:01,547
并提醒您的潜意识。 

75
00:03:01,547 --> 00:03:02,850
你真的有很好的机会

76
00:03:02,850 --> 00:03:05,848
第二天你要下来39，好吗？ 

77
00:03:05,848 --> 00:03:08,110
或其等效编程方式。 

78
00:03:08,110 --> 00:03:09,460
因此，我真的建议您这样做。 

79
00:03:10,380 --> 00:03:13,200
好吧，今天再次进行大型演示， 

80
00:03:13,200 --> 00:03:14,770
涵盖另一个话题

81
00:03:14,770 --> 00:03:16,780
这不是您的最终项目所必需的， 

82
00:03:16,780 --> 00:03:17,980
但这可能是你们大多数人

83
00:03:17,980 --> 00:03:19,343
实际上要使用这个东西

84
00:03:19,343 --> 00:03:20,700
叫做捡拾器

85
00:03:20,700 --> 00:03:22,823
因此，让我们立即进入。 

86
00:03:24,540 --> 00:03:27,400
该演示主要是关于Picker， 

87
00:03:27,400 --> 00:03:30,210
但我们将在新应用程序的环境中进行操作， 

88
00:03:30,210 --> 00:03:32,387
不记住或表情符号艺术

89
00:03:32,387 --> 00:03:34,890
这个应用程式叫做Enroute 

90
00:03:34,890 --> 00:03:36,980
我一会儿要告诉你

91
00:03:36,980 --> 00:03:40,040
也将成为下周演示的基础。 

92
00:03:40,040 --> 00:03:42,640
所以今天我们不仅在学习Picker， 

93
00:03:42,640 --> 00:03:45,120
我们正在学习有关Enroute工作原理的一些知识， 

94
00:03:45,120 --> 00:03:47,840
所以下周当我们做事情时， 

95
00:03:47,840 --> 00:03:50,370
我们将对此有共同的了解。 

96
00:03:50,370 --> 00:03:53,480
今天的另一个区别是表情符号艺术和记忆

97
00:03:53,480 --> 00:03:56,130
我们从头开始了这些应用程序， 

98
00:03:56,130 --> 00:03:59,160
但是我从一个有效的代码开始

99
00:03:59,160 --> 00:03:59,993
已经完成了某些功能， 

100
00:03:59,993 --> 00:04:03,807
我们将为其添加功能。 

101
00:04:03,807 --> 00:04:05,410
我这样做是因为

102
00:04:05,410 --> 00:04:08,640
该应用程序从互联网获取一些信息

103
00:04:08,640 --> 00:04:10,530
所以执行此操作的代码

104
00:04:10,530 --> 00:04:13,404
确实不在范围之内

105
00:04:13,404 --> 00:04:15,180
这个班级的

106
00:04:15,180 --> 00:04:17,360
当然欢迎您看一下， 

107
00:04:17,360 --> 00:04:19,460
看看您是否了解它，它在做什么。 

108
00:04:19,460 --> 00:04:22,770
它不是那么复杂，并且几乎都是演示软件， 

109
00:04:22,770 --> 00:04:24,843
只是我在周末放在一起的东西

110
00:04:24,843 --> 00:04:26,722
对于这个演示。 

111
00:04:26,722 --> 00:04:29,330
但是我真的不想详细介绍这一点。 

112
00:04:29,330 --> 00:04:31,550
相反，我想关注一些功能

113
00:04:31,550 --> 00:04:34,640
确实可以帮助您完成最终项目

114
00:04:34,640 --> 00:04:36,333
像今天一样，皮克

115
00:04:37,400 --> 00:04:39,920
因此，让我们回顾一下名为Enroute的应用程序。 

116
00:04:39,920 --> 00:04:42,470
我要运行它，以便您可以看到它的外观。 

117
00:04:43,607 --> 00:04:48,120
路由实质上使用API 

118
00:04:48,120 --> 00:04:49,470
可以在互联网上找到

119
00:04:49,470 --> 00:04:51,340
来自一家名为FlightAware的公司， 

120
00:04:51,340 --> 00:04:53,160
您会看到它实际上正在加载

121
00:04:53,160 --> 00:04:54,990
一些航班信息。 

122
00:04:54,990 --> 00:04:58,610
在这种情况下，它正在加载空中航班

123
00:04:58,610 --> 00:05:02,390
前往旧金山国际KSFO。 

124
00:05:02,390 --> 00:05:05,630
那是那里的小机场代码。 

125
00:05:05,630 --> 00:05:08,380
您会看到它正在告诉我们这次SkyWest航班

126
00:05:08,380 --> 00:05:10,863
今天是11:42到达，即两分钟， 

127
00:05:10,863 --> 00:05:12,432
它来自洛杉矶。 

128
00:05:12,432 --> 00:05:14,320
告诉我们所有这些航班， 

129
00:05:14,320 --> 00:05:19,320
不同的航空公司，不同的始发机场等。 

130
00:05:19,320 --> 00:05:23,020
今天，我们与Picker的目标是要添加一些UI。 

131
00:05:23,020 --> 00:05:25,190
我要在这里的角落放一个小按钮

132
00:05:25,190 --> 00:05:26,117
称为过滤器

133
00:05:26,117 --> 00:05:28,003
它会弹出一个模态表

134
00:05:28,003 --> 00:05:31,430
让我们过滤这些结果

135
00:05:31,430 --> 00:05:34,240
例如，它来自哪里

136
00:05:34,240 --> 00:05:37,840
或哪个航空公司，或者是否在空中， 

137
00:05:37,840 --> 00:05:40,470
因为有飞往旧金山的航班

138
00:05:40,470 --> 00:05:42,850
预定在某些时间到达

139
00:05:42,850 --> 00:05:44,520
但也许他们还没有起飞。 

140
00:05:44,520 --> 00:05:46,920
他们可能被安排在以后起飞， 

141
00:05:46,920 --> 00:05:48,960
否则可能会延迟或发生其他情况。 

142
00:05:48,960 --> 00:05:50,680
我目前没有显示任何这些。 

143
00:05:50,680 --> 00:05:53,590
您在这里看到的所有这些航班都在空中， 

144
00:05:53,590 --> 00:05:56,230
实际上在此刻飞往旧金山。 

145
00:05:56,230 --> 00:05:58,070
这是来自FlightAware的真实数据。 

146
00:05:58,070 --> 00:06:02,020
FlightAware不是免费的API。 

147
00:06:02,020 --> 00:06:03,580
非常便宜。 

148
00:06:03,580 --> 00:06:05,535
所以，嘿，如果你有几美元， 

149
00:06:05,535 --> 00:06:07,761
您可以前往FlightAware 

150
00:06:07,761 --> 00:06:09,530
并注册并获取您自己的密钥。 

151
00:06:09,530 --> 00:06:11,640
因此，当您运行此演示代码时， 

152
00:06:11,640 --> 00:06:15,450
您可以像我刚到这里一样获得实时数据。 

153
00:06:15,450 --> 00:06:19,100
或者我也要提供一些模拟数据

154
00:06:19,100 --> 00:06:20,020
这样你们

155
00:06:20,020 --> 00:06:21,830
谁不想去FlightAware并注册

156
00:06:21,830 --> 00:06:23,540
您将获得一些模拟数据

157
00:06:23,540 --> 00:06:25,630
基本上从周末开始。 

158
00:06:25,630 --> 00:06:26,958
它只有几个机场， 

159
00:06:26,958 --> 00:06:30,160
我认为，旧金山和拉斯维加斯

160
00:06:30,160 --> 00:06:32,830
但它至少会让您看到代码

161
00:06:32,830 --> 00:06:35,940
并让您的Picker正常工作。 

162
00:06:35,940 --> 00:06:39,500
让我们谈谈如何构建Enroute， 

163
00:06:39,500 --> 00:06:40,930
这个应用程式的运作方式。 

164
00:06:40,930 --> 00:06:42,880
因此，您在这里看到的此视图

165
00:06:42,880 --> 00:06:46,660
该航班清单只是一个视图。 

166
00:06:46,660 --> 00:06:49,200
这是我们唯一拥有的View文件

167
00:06:49,200 --> 00:06:50,280
在整个应用程序中， 

168
00:06:50,280 --> 00:06:54,220
这个FlightsEnrouteView.swift。 

169
00:06:54,220 --> 00:06:55,550
因此，让我们来看一下。 

170
00:06:55,550 --> 00:06:59,210
您可以看到它实际上是一个非常简单的小视图， 

171
00:06:59,210 --> 00:07:00,484
这里真的没有太多。 

172
00:07:00,484 --> 00:07:03,500
在顶层，有这个FlightsEnrouteView。 

173
00:07:03,500 --> 00:07:05,200
这只是一个NavigationView。 

174
00:07:05,200 --> 00:07:07,557
您确实注意到我们在这里的应用程序

175
00:07:07,557 --> 00:07:10,340
绝对在NavigationView中

176
00:07:10,340 --> 00:07:12,530
即使我们不单击这些并导航， 

177
00:07:12,530 --> 00:07:15,130
也许有一天，我们会，但是现在不。 

178
00:07:15,130 --> 00:07:17,210
您仍然获得NavigationView的标题

179
00:07:17,210 --> 00:07:19,200
如果我们在这里有一些按钮， 

180
00:07:19,200 --> 00:07:21,510
就像我们要把那个过滤器按钮放在那里

181
00:07:21,510 --> 00:07:23,210
我们正在受益

182
00:07:23,210 --> 00:07:24,710
是这里的NavigationView 

183
00:07:24,710 --> 00:07:26,650
然后在该导航内就是这个FlightList。 

184
00:07:26,650 --> 00:07:29,790
此FlightList就是此视图。 

185
00:07:29,790 --> 00:07:32,036
另一个非常简单的小视图。 

186
00:07:32,036 --> 00:07:34,261
它所做的就是有一个列表

187
00:07:34,261 --> 00:07:36,821
在所有航班中都是如此

188
00:07:36,821 --> 00:07:39,610
它使用此FlightListEntry视图

189
00:07:39,610 --> 00:07:43,880
在这里展示飞行中的每件事。 

190
00:07:43,880 --> 00:07:46,040
这是FlightListEntry 

191
00:07:46,040 --> 00:07:49,830
在每一行中向您显示所有这些东西。 

192
00:07:49,830 --> 00:07:51,430
因此，让我们看一下FlightListEntry， 

193
00:07:51,430 --> 00:07:53,100
这就是这里的视图。 

194
00:07:53,100 --> 00:07:55,270
这也是简单的小视图。 

195
00:07:55,270 --> 00:07:58,276
这只是一个带有航班名称的VStack， 

196
00:07:58,276 --> 00:08:03,276
像美联航245一样，它何时到达以及它来自何处。 

197
00:08:03,620 --> 00:08:04,453
就是这样。 

198
00:08:04,453 --> 00:08:05,672
这就是FlightListEntry的全部。 

199
00:08:05,672 --> 00:08:07,540
这里发生的一切

200
00:08:07,540 --> 00:08:10,070
是所有这些东西计算字符串的地方， 

201
00:08:10,070 --> 00:08:12,490
名称，到达和起源。 

202
00:08:12,490 --> 00:08:14,357
现在，关于FlightListEntry的一件有趣的事

203
00:08:14,357 --> 00:08:18,040
它在这里有两个ViewModels吗？ 

204
00:08:18,040 --> 00:08:19,891
这些ViewModel分别代表

205
00:08:19,891 --> 00:08:23,240
所有机场或所有航空公司

206
00:08:23,240 --> 00:08:25,300
我的应用知道的

207
00:08:25,300 --> 00:08:26,870
因此，当我使用我的应用程序时， 

208
00:08:26,870 --> 00:08:29,922
它发现了越来越多的机场和航空公司， 

209
00:08:29,922 --> 00:08:32,260
并询问FlightAware关于它们的信息。 

210
00:08:32,260 --> 00:08:34,760
他们叫什么名字，他们在哪里

211
00:08:34,760 --> 00:08:36,290
之类的。 

212
00:08:36,290 --> 00:08:38,197
这些信息都回来了。 

213
00:08:38,197 --> 00:08:42,870
这些只是ObservableObjects 

214
00:08:42,870 --> 00:08:44,340
当信息改变时， 

215
00:08:44,340 --> 00:08:46,640
他们这样做，他们的objectWillChange.send（） 

216
00:08:46,640 --> 00:08:49,460
他们会更新并导致类似这样的内容重绘

217
00:08:49,460 --> 00:08:53,340
加上航空公司名称的正确信息， 

218
00:08:53,340 --> 00:08:55,840
或机场名称。 

219
00:08:55,840 --> 00:08:58,200
这就是FlightListEntry中所有要做的事情。 

220
00:08:58,200 --> 00:09:00,052
因此，这就像您已经习惯了

221
00:09:00,052 --> 00:09:02,680
一个ViewModel，有两个ViewModel。 

222
00:09:02,680 --> 00:09:05,180
一个视图具有多个ViewModels很好

223
00:09:05,180 --> 00:09:06,720
正如我们下周看到的那样。 

224
00:09:06,720 --> 00:09:07,884
它只需要任何飞行。 

225
00:09:07,884 --> 00:09:09,150
这些FAFlight之一

226
00:09:10,430 --> 00:09:14,120
这个FAFlight从FlightAware返回。 

227
00:09:14,120 --> 00:09:15,140
我们可以看一下。 

228
00:09:15,140 --> 00:09:17,010
这是这里的FlightAware的所有代码。 

229
00:09:17,010 --> 00:09:18,165
您可以稍后再看。 

230
00:09:18,165 --> 00:09:19,489
但是FAFlight只是有东西

231
00:09:19,489 --> 00:09:21,260
喜欢航班的身份

232
00:09:21,260 --> 00:09:22,920
以及正在使用的飞机

233
00:09:22,920 --> 00:09:26,670
目的地城市和起点城市， 

234
00:09:26,670 --> 00:09:27,960
有一些小功能。 

235
00:09:27,960 --> 00:09:31,150
请注意，我已将FAFlight设为可编码和可哈希化

236
00:09:31,150 --> 00:09:33,090
和可识别的可比

237
00:09:33,090 --> 00:09:34,646
和CustomStringConvertible。 

238
00:09:34,646 --> 00:09:36,750
因此，我做了很多事情。 

239
00:09:36,750 --> 00:09:39,040
你知道这些东西是什么。 

240
00:09:39,040 --> 00:09:40,580
可比的是一个有趣的。 

241
00:09:40,580 --> 00:09:43,390
这是此处的可比较协议。 

242
00:09:43,390 --> 00:09:45,520
它只是让您比较两件事

243
00:09:45,520 --> 00:09:46,890
看他们是否少于。 

244
00:09:46,890 --> 00:09:48,540
这是一个很好的实现。 

245
00:09:48,540 --> 00:09:51,610
我在比较到达日期

246
00:09:51,610 --> 00:09:54,570
这就是我们通常想要对航班进行排序的方式。 

247
00:09:54,570 --> 00:09:55,520
一件事真的很好

248
00:09:55,520 --> 00:09:56,970
关于实施可比

249
00:09:56,970 --> 00:09:59,220
是Array方法已排序

250
00:09:59,220 --> 00:10:02,560
将在这里使用一系列FAFlight 

251
00:10:02,560 --> 00:10:03,678
没有任何争论。 

252
00:10:03,678 --> 00:10:07,810
只是要使用Comparable比较航班。 

253
00:10:07,810 --> 00:10:10,260
然后是另外一个，CustomStringConvertible。 

254
00:10:10,260 --> 00:10:12,160
也是一个非常有趣的实现。 

255
00:10:12,160 --> 00:10:14,710
这就是这个var描述。 

256
00:10:14,710 --> 00:10:17,640
如果您在此处实现CustomStringConvertible 

257
00:10:17,640 --> 00:10:20,130
然后您提供此var描述， 

258
00:10:20,130 --> 00:10:22,184
那你可以说会发生什么

259
00:10:22,184 --> 00:10:24,956
当这个物体，一个飞行物体， 

260
00:10:24,956 --> 00:10:28,440
放入带有反斜杠的字符串中，用括号括起来

261
00:10:28,440 --> 00:10:30,360
右括号，对不对？ 

262
00:10:30,360 --> 00:10:33,830
通常情况下，它显示了Swift生成的一些内容， 

263
00:10:33,830 --> 00:10:35,146
但是你可以说些什么

264
00:10:35,146 --> 00:10:38,356
对您来说更容易理解。 

265
00:10:38,356 --> 00:10:41,840
在这里，我只是用标识符来标识我的航班

266
00:10:41,840 --> 00:10:44,802
及其出发和到达信息等。 

267
00:10:44,802 --> 00:10:48,783
这样，如果我打印其中一个FAFlight，它看起来会更好。 

268
00:10:50,230 --> 00:10:51,340
这就是我们的FAFlight。 

269
00:10:51,340 --> 00:10:53,770
本质上就是画出来的

270
00:10:53,770 --> 00:10:56,330
在每个FlightList条目中。 

271
00:10:56,330 --> 00:10:58,850
如果我们在这里备份到FlightList， 

272
00:10:58,850 --> 00:11:01,350
所以这是这里的整个列表。 

273
00:11:01,350 --> 00:11:04,300
这是整个列表的视图

274
00:11:04,300 --> 00:11:05,525
包括所有这些东西， 

275
00:11:05,525 --> 00:11:08,240
它也有一个ViewModel，FlightFetcher， 

276
00:11:08,240 --> 00:11:09,500
这是另一回事。 

277
00:11:09,500 --> 00:11:11,300
现在，FlightFetcher是一个非常简单的ViewModel。 

278
00:11:11,300 --> 00:11:12,766
让我们来看看它。 

279
00:11:12,766 --> 00:11:16,068
从本质上讲，它需要一个FlightSearch， 

280
00:11:16,068 --> 00:11:20,030
这是要显示的航班列表的搜索参数。 

281
00:11:20,030 --> 00:11:21,820
而这个FlightSearch 

282
00:11:21,820 --> 00:11:24,339
这里是一个简单的小结构

283
00:11:24,339 --> 00:11:27,640
只是目的地机场，始发机场， 

284
00:11:27,640 --> 00:11:29,290
航空公司，TheAir。 

285
00:11:29,290 --> 00:11:30,870
如果您设置这些东西， 

286
00:11:30,870 --> 00:11:32,850
然后它会显示在列表中的唯一内容

287
00:11:32,850 --> 00:11:35,010
就是与此匹配的东西。 

288
00:11:35,010 --> 00:11:37,350
当然目的地会像KSFO。 

289
00:11:37,350 --> 00:11:39,390
因此，该列表显示了KSFO的情况。 

290
00:11:39,390 --> 00:11:41,906
如果我指定了出发地或航空公司， 

291
00:11:41,906 --> 00:11:45,940
那只会告诉我从那个地方去SFO的航班

292
00:11:45,940 --> 00:11:48,540
或与那家航空公司一起飞行。 

293
00:11:48,540 --> 00:11:50,429
而InTheAir就是说

294
00:11:50,429 --> 00:11:52,690
是否只显示航班

295
00:11:52,690 --> 00:11:53,870
是否在空中。 

296
00:11:53,870 --> 00:11:55,210
所以这个小结构

297
00:11:55,210 --> 00:11:58,410
基本上定义了我们正在执行的搜索。 

298
00:11:58,410 --> 00:12:01,144
因此，FlightFetcher，此ViewModel和ObservableObject 

299
00:12:01,144 --> 00:12:03,010
采取其中一个FlightSearches 

300
00:12:03,010 --> 00:12:05,640
您可以随时更改FlightSearch。 

301
00:12:05,640 --> 00:12:08,340
它使您可以设置此变量

302
00:12:08,340 --> 00:12:09,173
只要它改变， 

303
00:12:09,173 --> 00:12:11,883
它进入FlightAware并开始获取航班。 

304
00:12:11,883 --> 00:12:13,340
它立即获取

305
00:12:13,340 --> 00:12:14,630
然后它继续获取它

306
00:12:14,630 --> 00:12:18,010
每隔一定时间，可配置30秒

307
00:12:18,010 --> 00:12:19,190
你想干什么。 

308
00:12:19,190 --> 00:12:20,402
然后，当信息返回时， 

309
00:12:20,402 --> 00:12:24,410
它只是将其弹出到这个FAFlight数组中， 

310
00:12:24,410 --> 00:12:26,637
我们看过的那些FAFlight东西， 

311
00:12:26,637 --> 00:12:29,150
它只是向您显示最新结果

312
00:12:29,150 --> 00:12:30,650
它是@Published。 

313
00:12:30,650 --> 00:12:32,627
因此，当然，每当有更多结果出现时， 

314
00:12:32,627 --> 00:12:35,269
这个东西做它的objectWillChange.send（）， 

315
00:12:35,269 --> 00:12:39,160
还有我们这里的FlightList这样的视图

316
00:12:39,160 --> 00:12:41,140
要重绘自己。 

317
00:12:41,140 --> 00:12:43,556
您可以看到我有这个小计算变量

318
00:12:43,556 --> 00:12:45,390
在我的航班的FlightList中， 

319
00:12:45,390 --> 00:12:46,680
这是FAFlight的数组。 

320
00:12:46,680 --> 00:12:49,160
那只是我的ViewModel的最新版本。 

321
00:12:49,160 --> 00:12:52,060
它为我提供了ViewModel的最新航班。 

322
00:12:52,060 --> 00:12:53,550
这就是我能够做到这一点的方法。 

323
00:12:53,550 --> 00:12:55,274
所以我只是在乘飞机。 

324
00:12:55,274 --> 00:12:58,590
请注意，我正在使用他们的身份，航班的身份， 

325
00:12:58,590 --> 00:13:03,590
例如SWK456将是某个航班的标识符

326
00:13:04,780 --> 00:13:06,900
我用它来经历

327
00:13:06,900 --> 00:13:09,000
并将这些FlightList条目放在一起。 

328
00:13:10,180 --> 00:13:13,460
好吧，所以超级简单的小视图。 

329
00:13:13,460 --> 00:13:16,640
这里了解不多。 

330
00:13:16,640 --> 00:13:19,560
该程序的大部分内容都在这里

331
00:13:19,560 --> 00:13:21,660
在此FlightAware代码中

332
00:13:21,660 --> 00:13:22,680
正在抓取。 

333
00:13:22,680 --> 00:13:25,427
同样，您可以根据需要查看一下。 

334
00:13:25,427 --> 00:13:28,560
我们甚至根本不在代码中查看任何内容， 

335
00:13:28,560 --> 00:13:29,830
除了此FAFlight。 

336
00:13:29,830 --> 00:13:31,680
我们显然在看航班

337
00:13:31,680 --> 00:13:33,023
查看他们的信息。 

338
00:13:34,530 --> 00:13:37,260
机场ViewModel，这就是所有机场ViewModel， 

339
00:13:37,260 --> 00:13:41,100
请注意，它是ViewModel的共享实例。 

340
00:13:41,100 --> 00:13:43,387
共享一个ViewModel很好

341
00:13:43,387 --> 00:13:44,220
被许多观点

342
00:13:44,220 --> 00:13:46,820
他们都看着所有的机场。 

343
00:13:46,820 --> 00:13:48,710
所以我们可以在这里共享

344
00:13:48,710 --> 00:13:51,707
它可以为您提供它所知道的所有机场的代码， 

345
00:13:51,707 --> 00:13:54,280
然后您也可以在其上使用下标

346
00:13:54,280 --> 00:13:56,090
送给某些机场

347
00:13:56,090 --> 00:13:57,840
获取返回的信息。 

348
00:13:57,840 --> 00:14:00,750
该机场信息在这里和FlightAware 

349
00:14:00,750 --> 00:14:03,200
这就是从FlightAware返回的内容。 

350
00:14:03,200 --> 00:14:04,980
就像机场的名字一样

351
00:14:04,980 --> 00:14:07,840
以及它所在的位置。 

352
00:14:07,840 --> 00:14:09,147
还有类似的航空公司

353
00:14:09,147 --> 00:14:11,110
只是另一个ObservableObject。 

354
00:14:11,110 --> 00:14:12,230
让您获取所有航空公司信息。 

355
00:14:12,230 --> 00:14:15,852
所以我们在这里只使用这几个模型

356
00:14:15,852 --> 00:14:17,710
当我们想了解信息时

357
00:14:17,710 --> 00:14:19,870
关于机场和航空公司的信息，这很少见。 

358
00:14:19,870 --> 00:14:21,186
就像我们在这里做。 

359
00:14:21,186 --> 00:14:22,489
当然，在我们的FlightListEntry中， 

360
00:14:22,489 --> 00:14:25,430
我们想找出始发机场。 

361
00:14:25,430 --> 00:14:29,187
我们在这里使用所有这些机场来找出那是什么

362
00:14:29,187 --> 00:14:31,260
还有我们乘坐的航空公司

363
00:14:31,260 --> 00:14:33,850
显然，我们将在这里得到它的名字

364
00:14:33,850 --> 00:14:37,270
以我们在这里的航班的名义， 

365
00:14:37,270 --> 00:14:40,700
像美联航2828，美国航空2248。 

366
00:14:40,700 --> 00:14:42,390
我们想输入航空公司的名称。 

367
00:14:42,390 --> 00:14:43,690
因此，我们也可以这样做。 

368
00:14:45,340 --> 00:14:49,007
好的，现在就知道了关于Enroute的全部内容。 

369
00:14:49,007 --> 00:14:50,748
您知道Enroute的工作原理。 

370
00:14:50,748 --> 00:14:55,550
而我们今天要做的就是添加一些过滤器用户界面

371
00:14:55,550 --> 00:14:58,420
这样我们就可以过滤此列表。 

372
00:14:58,420 --> 00:15:00,460
我们需要一个选择器来完成

373
00:15:00,460 --> 00:15:03,530
因为我们要选择机场，选择航空公司， 

374
00:15:03,530 --> 00:15:04,363
像这样的东西。 

375
00:15:04,363 --> 00:15:06,013
Picker对此非常有用。 

376
00:15:06,013 --> 00:15:07,583
这也是一个很好的机会

377
00:15:07,583 --> 00:15:12,060
回顾模态表，我们如何放置模态表。 

378
00:15:12,060 --> 00:15:14,100
因此，首先让我们输入代码

379
00:15:14,100 --> 00:15:16,430
在我们的基本途中查看此处

380
00:15:16,430 --> 00:15:18,460
添加了一个小的过滤器按钮

381
00:15:18,460 --> 00:15:20,744
到它的右上角

382
00:15:20,744 --> 00:15:22,777
然后使用该过滤器按钮

383
00:15:22,777 --> 00:15:24,670
将显示此模式表。 

384
00:15:24,670 --> 00:15:25,930
这就是所有评论。 

385
00:15:25,930 --> 00:15:27,280
我们已经知道如何做到这一点。 

386
00:15:27,280 --> 00:15:31,990
我要将该过滤器按钮添加为navigationBarItem。 

387
00:15:31,990 --> 00:15:34,750
我实际上要把它放在尾端。 

388
00:15:34,750 --> 00:15:35,930
我将其称为过滤器。 

389
00:15:35,930 --> 00:15:37,800
那将是我的按钮的名称。 

390
00:15:37,800 --> 00:15:41,360
只是这里会有些计算变量

391
00:15:41,360 --> 00:15:42,405
那是一些观点。 

392
00:15:42,405 --> 00:15:46,803
我们将返回一个上面带有过滤器的Button。 

393
00:15:46,803 --> 00:15:50,410
在这里，当单击按钮时， 

394
00:15:50,410 --> 00:15:53,030
我们将要设置一些布尔变量

395
00:15:53,030 --> 00:15:55,410
如showFilter = true。 

396
00:15:55,410 --> 00:15:58,210
只是想对此有一点点状态。 

397
00:15:58,210 --> 00:16:02,600
私有var showFilter开始时为false。 

398
00:16:02,600 --> 00:16:04,430
当我们将此布尔值设置为true时， 

399
00:16:04,430 --> 00:16:06,610
我们要准备一个模态表。 

400
00:16:06,610 --> 00:16:09,130
所以我们可以说.sheet对吗？ 

401
00:16:09,130 --> 00:16:12,430
而且我们知道.sheet需要这个， 

402
00:16:12,430 --> 00:16:17,430
这是一个绑定，请记住此showFilter 

403
00:16:17,920 --> 00:16:20,830
这样每当我们设置这个布尔时， 

404
00:16:20,830 --> 00:16:22,620
这将出现， 

405
00:16:22,620 --> 00:16:25,520
而且还可以在任何时候解散床单， 

406
00:16:25,520 --> 00:16:28,053
工作表会将其设置为false。 

407
00:16:29,580 --> 00:16:32,560
现在，让我们在其上放置一个文本“过滤器”。 

408
00:16:32,560 --> 00:16:33,393
模态表

409
00:16:33,393 --> 00:16:35,950
我们只是要在上面说“过滤器”一词

410
00:16:35,950 --> 00:16:38,780
只是为了确保我们的用户界面正常工作。 

411
00:16:38,780 --> 00:16:39,850
因此，让我们来看一下。 

412
00:16:39,850 --> 00:16:42,020
希望这应该添加此过滤器按钮。 

413
00:16:42,020 --> 00:16:42,989
那里在角落里。 

414
00:16:42,989 --> 00:16:44,857
我们点击了过滤器。 （干杯） 

415
00:16:44,857 --> 00:16:45,950
你有过滤器。 

416
00:16:45,950 --> 00:16:49,120
这就是我们要在UI中添加一些选择器的地方

417
00:16:49,120 --> 00:16:51,730
选择目的地机场，选择始发机场， 

418
00:16:51,730 --> 00:16:52,912
选择航空公司。 

419
00:16:52,912 --> 00:16:55,200
我们要把它们都放在这里。 

420
00:16:55,200 --> 00:16:56,969
然后，当我们消除这一点时， 

421
00:16:56,969 --> 00:16:59,680
它会更新整个事情

422
00:16:59,680 --> 00:17:03,743
向我们展示那些航空公司或起源，等等。 

423
00:17:05,570 --> 00:17:06,403
我们该怎么做？ 

424
00:17:06,403 --> 00:17:10,660
我们显然需要一些UI，而不是Text（“ Filter”）。 

425
00:17:10,660 --> 00:17:14,920
我们希望它类似于FilterFlights， 

426
00:17:14,920 --> 00:17:15,796
我要称呼它

427
00:17:15,796 --> 00:17:20,796
并且必须在这里带我们的小FlightSearch。 

428
00:17:22,170 --> 00:17:24,573
好吧，请记住，这个FlightSearch 

429
00:17:25,540 --> 00:17:28,940
在“航路视图”中显示为“州”， 

430
00:17:28,940 --> 00:17:31,120
这就是说我们正在寻找的东西。 

431
00:17:31,120 --> 00:17:32,178
因为我们将其传递给FlightList 

432
00:17:32,178 --> 00:17:35,320
说，嘿，FlightList先生在这里， 

433
00:17:35,320 --> 00:17:36,942
请只向我展示一下。 

434
00:17:36,942 --> 00:17:39,620
所以我要过滤航班

435
00:17:39,620 --> 00:17:43,530
通过本质上编辑此结构，更改此结构。 

436
00:17:43,530 --> 00:17:46,130
当我更改此结构后， 

437
00:17:46,130 --> 00:17:47,593
这是这里的var， 

438
00:17:48,680 --> 00:17:49,960
它会重绘

439
00:17:49,960 --> 00:17:51,360
这会导致FlightList 

440
00:17:51,360 --> 00:17:53,024
通过新的FlightSearch 

441
00:17:53,024 --> 00:17:56,930
而这一切都会自我更新。 

442
00:17:56,930 --> 00:17:57,911
因此，我们绝对需要这样做。 

443
00:17:57,911 --> 00:18:01,350
然后，当然，因为这是一个呈现的东西

444
00:18:01,350 --> 00:18:05,743
我也将把isPresented传递给它

445
00:18:05,743 --> 00:18:06,912
通过showFilter， 

446
00:18:06,912 --> 00:18:10,888
这将允许该视图，该模式表视图

447
00:18:10,888 --> 00:18:13,760
才能解散自己。 

448
00:18:13,760 --> 00:18:15,820
再次因为不是忠实粉丝

449
00:18:15,820 --> 00:18:18,340
向下滑动即可解散

450
00:18:18,340 --> 00:18:20,880
是消除事物的唯一方法。 

451
00:18:20,880 --> 00:18:22,400
如果完成按钮，那就太好了

452
00:18:22,400 --> 00:18:24,343
然后您会看到我们需要完成和取消

453
00:18:24,343 --> 00:18:25,423
为此。 

454
00:18:26,310 --> 00:18:28,170
因此，让我们创建此视图，对吗？ 

455
00:18:28,170 --> 00:18:29,240
我只是编造的。 

456
00:18:29,240 --> 00:18:31,800
因此，我们必须实际实现此FilterFlights， 

457
00:18:31,800 --> 00:18:32,850
那是一个观点。 

458
00:18:32,850 --> 00:18:35,033
所以我要制作一个新的SwiftUI视图， 

459
00:18:36,530 --> 00:18:39,240
我将其称为FilterFlights， 

460
00:18:39,240 --> 00:18:41,030
确保在正确的位置。 

461
00:18:41,030 --> 00:18:42,860
是的，我注意到你们中有些人仍然有问题

462
00:18:42,860 --> 00:18:44,830
你把东西放在蓝色的地方。 

463
00:18:44,830 --> 00:18:47,212
我们想要黄色的东西。 

464
00:18:47,212 --> 00:18:48,644
这是FilterFlight。 

465
00:18:48,644 --> 00:18:50,440
它说：“你好，世界”。 

466
00:18:50,440 --> 00:18:51,350
现在我们知道我们的FilterFlights 

467
00:18:51,350 --> 00:18:55,190
这里有几个参数，这两个绑定， 

468
00:18:55,190 --> 00:18:58,440
因此，让我们立即将这两个绑定放在首位。 

469
00:18:58,440 --> 00:19:02,138
而且我们知道如何将Bindings @Binding传递给var。 

470
00:19:02,138 --> 00:19:04,543
我们叫一个FlightSearch 

471
00:19:07,174 --> 00:19:11,570
那是对FlightSearch结构的绑定。 

472
00:19:11,570 --> 00:19:14,763
然后我们有了Binding var isPresented， 

473
00:19:14,763 --> 00:19:17,310
这是对布尔的约束。 

474
00:19:18,240 --> 00:19:21,012
因此，现在此FilterFlight已与之挂钩。 

475
00:19:21,012 --> 00:19:23,900
顺便说一句，我要删除我的预览

476
00:19:23,900 --> 00:19:25,030
现在我真的不想

477
00:19:25,030 --> 00:19:27,520
不得不尝试在我的预览中传递绑定

478
00:19:27,520 --> 00:19:29,170
正如我们所见可以做到的。 

479
00:19:29,170 --> 00:19:31,098
我们可以在这里传递常量，等等。 

480
00:19:31,098 --> 00:19:33,417
但是我们现在暂时忽略

481
00:19:33,417 --> 00:19:35,410
并使这个演示更快一点

482
00:19:35,410 --> 00:19:38,470
因为我们真的是想在这里谈论Pickers。 

483
00:19:38,470 --> 00:19:41,630
我们已将此FlightSearch传递给我们。 

484
00:19:41,630 --> 00:19:43,130
让我们确保它确实在工作

485
00:19:43,130 --> 00:19:46,480
在此处输入我们的文字，说“过滤航班

486
00:19:46,480 --> 00:19:51,113
到我们的\（flightSearch.destination）”。 

487
00:19:52,220 --> 00:19:56,240
因此，如果我们正确绑定此FlightSearch 

488
00:19:56,240 --> 00:19:57,740
回到我们的FlightSearch状态

489
00:19:58,789 --> 00:20:01,940
在我们的“途中视图”中

490
00:20:01,940 --> 00:20:02,860
然后当打印出来时

491
00:20:02,860 --> 00:20:06,233
在这种情况下，应打印KSFO。 

492
00:20:09,300 --> 00:20:11,597
是的，很抱歉，FilterFlights flightSearch。 

493
00:20:13,500 --> 00:20:14,990
把名字放在这里， 

494
00:20:14,990 --> 00:20:19,650
因为这就是此Binding var的名称。 

495
00:20:19,650 --> 00:20:20,930
因此，让我们运行它。 

496
00:20:20,930 --> 00:20:24,050
看看我们的过滤器现在是否对KSFO说出FilterFlight。 

497
00:20:24,050 --> 00:20:26,151
希望它准备好了，过滤。 

498
00:20:26,151 --> 00:20:26,984
（干杯） 

499
00:20:26,984 --> 00:20:27,817
FilterFlight到KSFO。 

500
00:20:27,817 --> 00:20:31,030
因此，我们正在绑定我们的FlightSearch 

501
00:20:31,030 --> 00:20:32,860
再回到我们的路线。 

502
00:20:32,860 --> 00:20:35,171
现在我们真的准备好在这里继续

503
00:20:35,171 --> 00:20:39,670
使用一些选择器和东西来构建它。 

504
00:20:39,670 --> 00:20:42,540
当我进入这里开始改变事物时

505
00:20:42,540 --> 00:20:44,650
就像我说改变目的地。 

506
00:20:44,650 --> 00:20:47,690
如果我在此处更改目标SFO 

507
00:20:47,690 --> 00:20:50,510
到其他地方，拉斯维加斯或洛杉矶国际机场

508
00:20:50,510 --> 00:20:51,664
或纽瓦克或某个地方， 

509
00:20:51,664 --> 00:20:55,550
这将导致整个此处的内容重新提取。 

510
00:20:55,550 --> 00:20:58,157
我的FlightAware获取将必须获取一个全新的东西。 

511
00:20:58,157 --> 00:21:01,400
所以我不确定在这里选择它时

512
00:21:01,400 --> 00:21:04,170
在我的选择器中或我想要的任何后面

513
00:21:04,170 --> 00:21:05,930
这个东西不断更新。 

514
00:21:05,930 --> 00:21:09,300
如果我们进行FilterFlight，那将会发生的事情， 

515
00:21:09,300 --> 00:21:11,540
就像我们的PaletteEditor一样。 

516
00:21:11,540 --> 00:21:14,375
如果我们还记得Emoji Art中的PaletteEditor， 

517
00:21:14,375 --> 00:21:17,170
当我们更改名称或添加表情符号时， 

518
00:21:17,170 --> 00:21:19,973
实际上是在我们的文档中更改了调色板。 

519
00:21:19,973 --> 00:21:22,340
那是现场编辑。 

520
00:21:22,340 --> 00:21:27,340
我们的模态表正在编辑它正在实时编辑的东西。 

521
00:21:27,500 --> 00:21:28,426
因此，它正在改变现场。 

522
00:21:28,426 --> 00:21:30,270
我不认为我们要在这里。 

523
00:21:30,270 --> 00:21:33,170
在这里，我认为我们想要“完成”“取消”。 

524
00:21:33,170 --> 00:21:34,422
我们在提示中谈到了这一点

525
00:21:34,422 --> 00:21:37,210
以及家庭作业。 

526
00:21:37,210 --> 00:21:39,030
有时您想进行现场编辑， 

527
00:21:39,030 --> 00:21:40,947
有时您想要“完成”“取消”。 

528
00:21:40,947 --> 00:21:42,490
我想在这里您要“完成”“取消” 

529
00:21:42,490 --> 00:21:46,280
因为您可能会随心所欲地游玩

530
00:21:46,280 --> 00:21:49,470
然后，一旦您决定好了，“完成”，现在我们将进行提取。 

531
00:21:49,470 --> 00:21:52,370
我们不想浪费金钱和互联网资源

532
00:21:52,370 --> 00:21:55,480
通过获取我们刚刚选择的东西

533
00:21:55,480 --> 00:21:57,840
在决定我们想要什么的路上。 

534
00:21:57,840 --> 00:21:59,730
所以我们要做“完成”“取消”的事情。 

535
00:21:59,730 --> 00:22:02,120
因此，让我们在此处输入“完成”“取消”。 

536
00:22:02,120 --> 00:22:03,550
好的，我想输入“完成”和“取消”。 

537
00:22:03,550 --> 00:22:06,480
现在我们在表情符号艺术中点击了“完成”按钮

538
00:22:06,480 --> 00:22:08,448
在这里创建我们自己的小标题。 

539
00:22:08,448 --> 00:22:11,317
我要实际起草NavigationView 

540
00:22:11,317 --> 00:22:13,640
因为我们知道在NavigationView中

541
00:22:13,640 --> 00:22:14,473
它在这里放了一个标题

542
00:22:14,473 --> 00:22:17,471
它有两个按钮的空间，例如“完成”，“取消”。 

543
00:22:17,471 --> 00:22:19,350
所以我要把这整个东西

544
00:22:19,350 --> 00:22:21,387
在NavigationView中，这样我就可以得到这些。 

545
00:22:21,387 --> 00:22:23,810
你会看到我需要这整个东西

546
00:22:23,810 --> 00:22:25,790
仍然处于NavigationView中。 

547
00:22:25,790 --> 00:22:30,280
所以这里只是一点预见

548
00:22:30,280 --> 00:22:34,050
但是在标题中获得Buttons并不是一个坏方法

549
00:22:34,050 --> 00:22:34,980
就是把东西放到NavigationView中， 

550
00:22:34,980 --> 00:22:37,910
即使您不打算导航， 

551
00:22:37,910 --> 00:22:39,520
我真的不打算导航， 

552
00:22:39,520 --> 00:22:42,260
但是你会看到我最终需要导航

553
00:22:42,260 --> 00:22:43,483
在此模式表中。 

554
00:22:44,450 --> 00:22:46,360
因此，我们将“完成”“取消”放入其中。 

555
00:22:46,360 --> 00:22:47,370
真的很容易。 

556
00:22:47,370 --> 00:22:50,037
我只是要说.navigationBarItems。 

557
00:22:51,560 --> 00:22:55,552
我要放在最前面，“取消”按钮

558
00:22:55,552 --> 00:22:59,110
后面是“完成”按钮。 

559
00:22:59,110 --> 00:23:00,940
让我们继续在这里加上标题。 

560
00:23:00,940 --> 00:23:05,940
navigationBarTitle，并将其称为“筛选航班”工作表。 

561
00:23:08,590 --> 00:23:09,423
那就好

562
00:23:09,423 --> 00:23:10,800
因此，我们需要“取消”和“完成”。 

563
00:23:10,800 --> 00:23:11,890
这些只是vars。 

564
00:23:11,890 --> 00:23:14,710
因此取消是一些视图。 

565
00:23:14,710 --> 00:23:17,819
它是一个“取消”按钮。 

566
00:23:17,819 --> 00:23:21,292
当按下时

567
00:23:21,292 --> 00:23:26,292
将我们的isPresented设置为false。 

568
00:23:26,410 --> 00:23:29,970
这又是一次，我们将isPresented作为绑定传递

569
00:23:29,970 --> 00:23:31,390
这样我们才能解散自己

570
00:23:31,390 --> 00:23:33,680
当然取消要这样做， 

571
00:23:33,680 --> 00:23:36,180
完成了，非常相似，对吧？ 

572
00:23:36,180 --> 00:23:37,013
完成了

573
00:23:37,013 --> 00:23:38,289
它说“完成”。 

574
00:23:38,289 --> 00:23:41,170
它也会取消，但就在这里， 

575
00:23:41,170 --> 00:23:45,430
必须进行实际更改

576
00:23:45,430 --> 00:23:48,870
因为“完成”表示我已经完成，就去做， 

577
00:23:48,870 --> 00:23:50,880
做提取和所有的东西。 

578
00:23:50,880 --> 00:23:54,210
“取消”是指取消我并且不进行更改。 

579
00:23:54,210 --> 00:23:55,970
所以我们必须谈论我们将如何做到这一点

580
00:23:55,970 --> 00:23:57,370
一会儿。 

581
00:23:57,370 --> 00:24:00,050
好吧，所以我们有了导航栏的内容， 

582
00:24:00,050 --> 00:24:04,234
但是我们当然需要将其放在NavigationView中。 

583
00:24:04,234 --> 00:24:05,483
我认为这会起作用。 

584
00:24:07,160 --> 00:24:07,993
好了

585
00:24:07,993 --> 00:24:08,826
走吧

586
00:24:11,370 --> 00:24:12,540
我们去了，过滤器。 

587
00:24:12,540 --> 00:24:13,570
（干杯） 

588
00:24:13,570 --> 00:24:14,403
在那里。 

589
00:24:14,403 --> 00:24:15,940
我们有前往SFO的FilterFlight。 

590
00:24:15,940 --> 00:24:17,550
我们进入了NavigationView， 

591
00:24:17,550 --> 00:24:18,990
我们有取消并完成。 

592
00:24:18,990 --> 00:24:20,442
我们可以取消那很好。 

593
00:24:20,442 --> 00:24:23,050
我们也可以回到这里并点击“完成”。 

594
00:24:23,050 --> 00:24:23,991
那也一样。 

595
00:24:23,991 --> 00:24:26,425
但是当然我们不做任何实际的编辑

596
00:24:26,425 --> 00:24:30,570
这就是我们的FlightSearch结构的全部内容。 

597
00:24:30,570 --> 00:24:32,163
我们要编辑此结构。 

598
00:24:34,030 --> 00:24:37,003
我们将如何开展“完成”“取消”业务？ 

599
00:24:37,003 --> 00:24:40,262
一种简单的“完成”“取消”方法

600
00:24:40,262 --> 00:24:44,010
在这里拥有自己的私人国家

601
00:24:44,950 --> 00:24:47,940
这是您要构建的内容的草稿。 

602
00:24:47,940 --> 00:24:50,439
因此，我们正在尝试编辑FlightSearch 

603
00:24:50,439 --> 00:24:53,120
我们将为其创建草稿。 

604
00:24:53,120 --> 00:24:56,600
我们将整个UI修改此草稿

605
00:24:56,600 --> 00:24:57,700
然后最后

606
00:24:57,700 --> 00:24:59,620
当需要进行实际更改时， 

607
00:24:59,620 --> 00:25:04,620
我们将说self.flightSearch = self.draft。 

608
00:25:06,200 --> 00:25:08,970
换句话说，我们将复制到Binding中， 

609
00:25:08,970 --> 00:25:12,022
边界值，这就是我们的草稿值。 

610
00:25:12,022 --> 00:25:14,034
FlightSearch是一个结构。 

611
00:25:14,034 --> 00:25:16,400
您在这里看到的是一个结构。 

612
00:25:16,400 --> 00:25:20,060
所以当我们说等于它的副本时，对不对？ 

613
00:25:20,060 --> 00:25:20,893
结构被复制。 

614
00:25:20,893 --> 00:25:23,360
所以它将复制此草稿中的内容

615
00:25:23,360 --> 00:25:25,363
返回此航班，在这里搜索。 

616
00:25:26,360 --> 00:25:28,100
这样就可以解决问题。 

617
00:25:28,100 --> 00:25:29,540
怎么办呢？ 

618
00:25:29,540 --> 00:25:31,886
因为我们本质上想说像

619
00:25:31,886 --> 00:25:35,390
将此设置为flightSearch，好吗？ 

620
00:25:35,390 --> 00:25:37,460
我希望我的草稿开始

621
00:25:37,460 --> 00:25:39,570
无论此Binding的这个值是多少。 

622
00:25:39,570 --> 00:25:41,760
但是我们当然知道我们做不到

623
00:25:41,760 --> 00:25:44,650
因为我们现在处于初始化阶段， 

624
00:25:44,650 --> 00:25:46,510
而且这还没有初始化

625
00:25:46,510 --> 00:25:48,570
它正在传递给我们

626
00:25:48,570 --> 00:25:50,230
所以我们不能这样做吗？ 

627
00:25:50,230 --> 00:25:52,460
不能在属性初始化程序中使用。 

628
00:25:52,460 --> 00:25:54,390
那么我们如何设置这样的东西？ 

629
00:25:54,390 --> 00:25:55,960
我们需要一个init。 

630
00:25:56,980 --> 00:25:58,770
如果我们要进行初始化

631
00:25:58,770 --> 00:26:00,370
它需要有相同的论点

632
00:26:00,370 --> 00:26:02,660
这个东西在这里。 

633
00:26:02,660 --> 00:26:05,440
所以我们需要flightSearch和isPresented 

634
00:26:05,440 --> 00:26:06,370
作为我们初始化的参数。 

635
00:26:06,370 --> 00:26:10,370
有趣的是，因为这些是绑定。 

636
00:26:10,370 --> 00:26:11,506
那我们该怎么办

637
00:26:11,506 --> 00:26:14,847
这是我们的init的FlightSearch参数吗？ 

638
00:26:14,847 --> 00:26:18,270
它需要是一个绑定，对吗？ 

639
00:26:18,270 --> 00:26:19,776
不知何故，这里需要绑定。 

640
00:26:19,776 --> 00:26:22,340
我们没有在这里传递FlightSearch。 

641
00:26:22,340 --> 00:26:24,367
实际上，我们正在传递一个绑定。 

642
00:26:24,367 --> 00:26:26,708
好吧，还记得第九讲

643
00:26:26,708 --> 00:26:29,010
我们讨论了这些东西是什么。 

644
00:26:29,010 --> 00:26:31,210
这些创建了结构，好吗？ 

645
00:26:31,210 --> 00:26:33,420
这些属性包装器如@Binding 

646
00:26:33,420 --> 00:26:35,810
和@State，它们创建结构。 

647
00:26:35,810 --> 00:26:38,790
这将创建一个Binding结构。 

648
00:26:38,790 --> 00:26:42,980
这样我们就可以访问该实际结构

649
00:26:42,980 --> 00:26:45,330
使用此工具的下划线版本。 

650
00:26:45,330 --> 00:26:47,950
请记住，还有非下划线版本。 

651
00:26:47,950 --> 00:26:51,000
这是该结构的包装值， 

652
00:26:51,000 --> 00:26:53,230
然后是美元的版本。 

653
00:26:53,230 --> 00:26:56,010
那就是这个结构的预期价值。 

654
00:26:56,010 --> 00:26:57,924
好了，我们在初始化。 

655
00:26:57,924 --> 00:27:01,930
所以我们真的不能使用投影和包装的值

656
00:27:01,930 --> 00:27:04,940
因为这需要初始化，对吗？ 

657
00:27:04,940 --> 00:27:07,300
由于我们处于初始化状态，因此尚未初始化。 

658
00:27:07,300 --> 00:27:08,950
我们正在初始化这些。 

659
00:27:08,950 --> 00:27:11,060
那就是我们应该在init中做的事情。 

660
00:27:11,060 --> 00:27:12,291
这就是初始化的全部内容。 

661
00:27:12,291 --> 00:27:16,520
因此，我们实际上要设置此结构。 

662
00:27:16,520 --> 00:27:18,843
我们要说_flightSearch 

663
00:27:20,090 --> 00:27:22,270
等于一些结构。 

664
00:27:22,270 --> 00:27:24,890
因此，我们在这里需要一个Binding结构。 

665
00:27:24,890 --> 00:27:28,234
因此，我们将强制将Binding结构发送给我们。 

666
00:27:28,234 --> 00:27:33,210
而且绑定这个结构是一个通用的，它不在乎

667
00:27:33,210 --> 00:27:36,250
这是它绑定到的事物的类型。 

668
00:27:36,250 --> 00:27:38,946
因此，我们在此处绑定到FlightSearch。 

669
00:27:38,946 --> 00:27:41,919
所以这里的参数是绑定到FlightSearch 

670
00:27:41,919 --> 00:27:43,826
现在我可以说_flightSearch， 

671
00:27:43,826 --> 00:27:46,788
这是实际的结构，绑定结构

672
00:27:46,788 --> 00:27:50,910
等于传递给我们的那个Binding结构。 

673
00:27:50,910 --> 00:27:54,340
这就是您可以进行初始化的方式

674
00:27:54,340 --> 00:27:57,860
您需要设置的一些变量是绑定。 

675
00:27:57,860 --> 00:28:00,000
我只声明参数的类型

676
00:28:00,000 --> 00:28:02,630
绑定到var的类型

677
00:28:02,630 --> 00:28:06,120
然后使用下划线在此处设置实际结构。 

678
00:28:06,120 --> 00:28:10,200
我们可以在这里使用isPresented做同样的事情。 

679
00:28:10,200 --> 00:28:12,690
那是对布尔的约束。 

680
00:28:12,690 --> 00:28:16,559
所以我们也可以在这里说_isPresented 

681
00:28:16,559 --> 00:28:21,060
等于isPresented，此函数的参数。 

682
00:28:21,060 --> 00:28:22,120
那草案呢？ 

683
00:28:22,120 --> 00:28:23,330
我们如何设定草稿？ 

684
00:28:23,330 --> 00:28:25,159
我们有点想说self.draft 

685
00:28:25,159 --> 00:28:27,441
等于这个flightSearch。 

686
00:28:27,441 --> 00:28:29,602
这就是我们想要做的， 

687
00:28:29,602 --> 00:28:31,340
但是我们不能真正做到这一点。 

688
00:28:31,340 --> 00:28:34,538
这两个变量不是同一类型。 

689
00:28:34,538 --> 00:28:38,660
这是对FlightSearch的绑定， 

690
00:28:38,660 --> 00:28:39,740
这就是它的类型

691
00:28:39,740 --> 00:28:42,780
这就是它的包装价值， 

692
00:28:42,780 --> 00:28:44,410
这是一个FlightSearch。 

693
00:28:44,410 --> 00:28:45,243
所以这就是为什么

694
00:28:45,243 --> 00:28:46,750
您无法将绑定分配给FlightSearch 

695
00:28:46,750 --> 00:28:49,690
到FlightSearch，对不对？ 

696
00:28:49,690 --> 00:28:53,604
该FlightSearch与该草稿的类型不同

697
00:28:53,604 --> 00:28:57,810
因为我们在这里做包装值草案。 

698
00:28:57,810 --> 00:28:59,770
所以我们要初始化这个状态

699
00:28:59,770 --> 00:29:02,110
就像我们上次学会做的一样

700
00:29:02,110 --> 00:29:06,700
通过发送其等于状态的_draft 

701
00:29:06,700 --> 00:29:09,310
具有一些初始包装值。 

702
00:29:09,310 --> 00:29:11,070
包装值是多少？ 

703
00:29:11,070 --> 00:29:16,070
好吧，有趣的是，这不是航班搜索

704
00:29:16,440 --> 00:29:19,450
因为这里的flightSearch是此Binding。 

705
00:29:19,450 --> 00:29:23,440
这是flightSearch的包装值，对吧？ 

706
00:29:23,440 --> 00:29:27,320
绑定包装值是它绑定的东西。 

707
00:29:27,320 --> 00:29:29,160
所以flightSearch的包装值

708
00:29:29,160 --> 00:29:32,150
是它绑定到的FlightSearch。 

709
00:29:32,150 --> 00:29:35,009
所以我在这里创建草稿状态

710
00:29:35,009 --> 00:29:37,160
初始化其结构

711
00:29:37,160 --> 00:29:39,800
通过创建一个结构，一个状态结构， 

712
00:29:39,800 --> 00:29:41,075
包装值与

713
00:29:41,075 --> 00:29:43,860
flightSearch的包装值。 

714
00:29:43,860 --> 00:29:46,500
这就是为什么我在第9讲上花了这么多时间的原因

715
00:29:46,500 --> 00:29:48,910
回顾一下这些属性包装器的真正含义

716
00:29:48,910 --> 00:29:52,063
希望您能理解这样的代码。 

717
00:29:53,200 --> 00:29:55,749
我们已经从FlightSearch中复制了该草稿。 

718
00:29:55,749 --> 00:29:58,640
让我们通过身体仔细检查一下。 

719
00:29:58,640 --> 00:30:00,932
与其显示我们的flightSearch的目的地， 

720
00:30:00,932 --> 00:30:04,420
让我们来展示草稿的目的地。 

721
00:30:04,420 --> 00:30:06,909
因此，如果此副本正确发生， 

722
00:30:06,909 --> 00:30:10,220
那么此草稿将正确显示。 

723
00:30:10,220 --> 00:30:11,270
因此，让我们看一下。 

724
00:30:12,800 --> 00:30:14,190
好吧，过滤，就在这里。 

725
00:30:14,190 --> 00:30:15,840
哦，请过滤飞往SFO的航班。 

726
00:30:15,840 --> 00:30:18,020
那是我们的出发地，非常好。 

727
00:30:18,020 --> 00:30:21,412
因此，它显然复制了我们的flightSearch。 

728
00:30:21,412 --> 00:30:23,482
所以现在我们几乎完成了。 

729
00:30:23,482 --> 00:30:26,080
我们在这里需要做的所有事情

730
00:30:26,080 --> 00:30:29,330
改变了我们在这里的用户界面，而不仅仅是一个TextField， 

731
00:30:29,330 --> 00:30:31,350
成为一堆捡拾器和东西

732
00:30:31,350 --> 00:30:33,350
正在编辑此草稿。 

733
00:30:33,350 --> 00:30:35,720
我们会自动将草稿复制回去

734
00:30:35,720 --> 00:30:37,010
如果我们点击“完成”按钮， 

735
00:30:37,010 --> 00:30:38,390
如果点击“取消”，我们将不做任何事情， 

736
00:30:38,390 --> 00:30:39,841
因此草稿将被忽略， 

737
00:30:39,841 --> 00:30:43,920
但这使我们在这里真正易于实现。 

738
00:30:43,920 --> 00:30:45,520
因此，让我们做第一个Picker。 

739
00:30:45,520 --> 00:30:47,740
做目的地草稿。 

740
00:30:47,740 --> 00:30:51,040
让我们添加一个选择器，让我们选择一个新的目的地

741
00:30:51,040 --> 00:30:52,853
为我们的搜索。 

742
00:30:53,850 --> 00:30:56,400
Picker有一些构造函数， 

743
00:30:56,400 --> 00:30:58,039
但是我们几乎总是要使用

744
00:30:58,039 --> 00:31:00,510
这第二个就在这里

745
00:31:00,510 --> 00:31:03,730
它带有一个LocalizedStringKey的标题

746
00:31:03,730 --> 00:31:04,606
或标题。 

747
00:31:04,606 --> 00:31:07,345
您可以使用文本。 

748
00:31:07,345 --> 00:31:09,210
那就是这里的那个

749
00:31:09,210 --> 00:31:12,120
让您为标题指定标签， 

750
00:31:12,120 --> 00:31:13,840
但这在Picker中很常见

751
00:31:13,840 --> 00:31:15,550
使标题只是一个字符串。 

752
00:31:15,550 --> 00:31:16,940
因此，让我们继续进行此操作。 

753
00:31:16,940 --> 00:31:19,150
这个标题，我叫“目的地” 

754
00:31:19,150 --> 00:31:21,752
因为我在这里设置目的地机场。 

755
00:31:21,752 --> 00:31:24,280
这是Picker的第二个参数， 

756
00:31:24,280 --> 00:31:25,500
非常重要的一个

757
00:31:25,500 --> 00:31:27,643
这是对事物的约束

758
00:31:27,643 --> 00:31:30,290
您想使用选择器进行更改。 

759
00:31:30,290 --> 00:31:35,290
因此，对于我们来说，我们想更改草案的目的地。 

760
00:31:35,980 --> 00:31:38,550
这就是Picker想要做的

761
00:31:38,550 --> 00:31:40,240
选择一个新的目的地

762
00:31:40,240 --> 00:31:42,683
在我们的FlightSearch草案中。 

763
00:31:43,520 --> 00:31:45,890
然后这最后一个论点的内容

764
00:31:45,890 --> 00:31:50,890
是将在我们的选择器中显示的视图的列表。 

765
00:31:51,800 --> 00:31:54,183
Picker有趣的一件事是

766
00:31:54,183 --> 00:31:57,180
您将提供视图列表。 

767
00:31:57,180 --> 00:32:00,330
这就是为什么在Picker中我们几乎总是要进行一次ForEach。 

768
00:32:00,330 --> 00:32:05,330
这是我们知道的提供视图列表的最简单方法。 

769
00:32:06,010 --> 00:32:07,040
这是视图列表。 

770
00:32:07,040 --> 00:32:11,210
这个选择器本质上是在这些视图之间进行选择。 

771
00:32:11,210 --> 00:32:13,430
我们将向您展示如何确定

772
00:32:13,430 --> 00:32:14,880
当您选择其中一个视图时， 

773
00:32:14,880 --> 00:32:18,750
更新选择内容的内容。 

774
00:32:18,750 --> 00:32:21,010
因此，让我们先获取视图。 

775
00:32:21,010 --> 00:32:22,397
再说一次，我们要做一次ForEach。 

776
00:32:22,397 --> 00:32:24,810
现在，我希望能够选择一个机场。 

777
00:32:24,810 --> 00:32:27,910
所以我需要我所有的机场代码。 

778
00:32:27,910 --> 00:32:30,700
所以我要使用allAirports.codes。 

779
00:32:30,700 --> 00:32:32,145
一会儿我们将看到如何做， 

780
00:32:32,145 --> 00:32:35,150
这是String，所以我要做.self。 

781
00:32:35,150 --> 00:32:37,124
毕竟这是ForEach 

782
00:32:37,124 --> 00:32:40,620
而这ForEach，它会说在机场。 

783
00:32:40,620 --> 00:32:43,113
在这里，我们只打印机场。 

784
00:32:44,355 --> 00:32:46,855
这些是诸如KSFO之类的机场代码。 

785
00:32:47,810 --> 00:32:50,206
现在我们如何获得allAirports的东西？ 

786
00:32:50,206 --> 00:32:52,050
我们要有一个ViewModel， 

787
00:32:52,050 --> 00:32:54,470
我在这里使用的相同ViewModel 

788
00:32:54,470 --> 00:32:57,430
在FlightListEntry中获取所有机场， 

789
00:32:57,430 --> 00:32:59,087
这个小的ObservedObject， 

790
00:32:59,087 --> 00:33:02,010
我要复制并粘贴到这里， 

791
00:33:02,010 --> 00:33:06,590
它将成为该视图的ViewModel的一部分。 

792
00:33:06,590 --> 00:33:09,900
而这个var提供了所有代码

793
00:33:09,900 --> 00:33:14,227
该ViewModel曾经见过的所有机场。 

794
00:33:14,227 --> 00:33:15,743
现在我们还没有完成。 

795
00:33:15,743 --> 00:33:18,553
这是一堆意见

796
00:33:18,553 --> 00:33:19,830
将会出现在Picker中。 

797
00:33:19,830 --> 00:33:21,460
因此，选择器将能够拥有

798
00:33:21,460 --> 00:33:23,070
每个代码的视图， 

799
00:33:23,070 --> 00:33:27,470
但是我们如何将该选择与该视图匹配？ 

800
00:33:27,470 --> 00:33:29,500
我们用点标记

801
00:33:29,500 --> 00:33:32,150
我要在机场加上标签

802
00:33:32,150 --> 00:33:35,610
因此，只要在此选择器中单击该视图， 

803
00:33:35,610 --> 00:33:37,770
我们将在短短一秒钟内看到Picker的外观， 

804
00:33:37,770 --> 00:33:40,270
每当您选择此视图时， 

805
00:33:40,270 --> 00:33:44,700
它会采用这个标记并将其放入此变量中。 

806
00:33:44,700 --> 00:33:47,350
再一次，它有一个绑定到这个变量， 

807
00:33:47,350 --> 00:33:49,530
所以就把它放在那里

808
00:33:49,530 --> 00:33:51,460
拣选机真正重要的是

809
00:33:51,460 --> 00:33:54,984
是这个标签必须具有完全相同的类型

810
00:33:54,984 --> 00:33:57,930
因为此绑定绑定到。 

811
00:33:57,930 --> 00:34:00,170
否则，这没有任何意义。 

812
00:34:00,170 --> 00:34:01,820
因此，幸运的是， 

813
00:34:01,820 --> 00:34:03,730
该机场代码只是一个字符串。 

814
00:34:03,730 --> 00:34:05,780
我们在这里的目的地

815
00:34:06,650 --> 00:34:08,820
是机场代码String。 

816
00:34:08,820 --> 00:34:11,416
所以这个String是完全一样的类型

817
00:34:11,416 --> 00:34:14,083
这些机场代码，即字符串。 

818
00:34:15,100 --> 00:34:16,650
让我们看看它是什么样子。 

819
00:34:18,447 --> 00:34:19,899
好吧，这是我们的航班。 

820
00:34:19,899 --> 00:34:21,380
（干杯） 

821
00:34:21,380 --> 00:34:25,390
哦，这是Picker乡亲。 

822
00:34:25,390 --> 00:34:26,480
好吧，这是一个轮子。 

823
00:34:26,480 --> 00:34:29,486
您可以四处走走，选择另一种松驰的东西， 

824
00:34:29,486 --> 00:34:31,998
拉斯维加斯，就在那，纽瓦克。 

825
00:34:31,998 --> 00:34:34,573
但这真是丑陋。 

826
00:34:34,573 --> 00:34:35,620
行？ （咯咯笑） 

827
00:34:35,620 --> 00:34:37,750
首先浮起

828
00:34:37,750 --> 00:34:39,640
在太空中

829
00:34:39,640 --> 00:34:41,170
还有目的地

830
00:34:41,170 --> 00:34:43,350
这个标题不太适合那里。 

831
00:34:43,350 --> 00:34:46,200
因此，这确实非常糟糕。 

832
00:34:46,200 --> 00:34:48,590
SwiftUI正在尽力而为

833
00:34:48,590 --> 00:34:52,890
考虑到您要求它显示的环境

834
00:34:52,890 --> 00:34:55,390
确实是我们的错

835
00:34:55,390 --> 00:34:57,410
因为当我们做这样的事情时， 

836
00:34:57,410 --> 00:35:02,143
我们知道我们真正想要的环境是一种形式

837
00:35:02,143 --> 00:35:04,370
就像我们对调色板编辑器所做的一样。 

838
00:35:04,370 --> 00:35:07,100
我们将所有字段都放在一个表单中， 

839
00:35:07,100 --> 00:35:09,080
我们想在这里做完全一样的事情。 

840
00:35:09,080 --> 00:35:09,913
有一些很有趣的东西

841
00:35:09,913 --> 00:35:14,260
当我们将其放入表单时，将会发生这种情况。 

842
00:35:14,260 --> 00:35:16,010
现在应该可以了，好吗？ 

843
00:35:16,010 --> 00:35:17,950
我们在这里选择拉斯维加斯。 

844
00:35:17,950 --> 00:35:19,090
我要点击完成。 

845
00:35:19,090 --> 00:35:22,440
它应该重新获取拉斯维加斯，并且确实如此。 

846
00:35:22,440 --> 00:35:25,285
因此，它实际上是在编辑它，所以那里没有错。 

847
00:35:25,285 --> 00:35:28,682
只是现在的外观太糟糕了。 

848
00:35:28,682 --> 00:35:30,420
因此，让我们将其放入表单中。 

849
00:35:30,420 --> 00:35:33,750
观看将其放入表单时会发生什么。 

850
00:35:33,750 --> 00:35:35,300
我真的没有做任何改变， 

851
00:35:35,300 --> 00:35:39,140
除了将这个选择器放在表单中

852
00:35:39,140 --> 00:35:39,973
并点击运行。 

853
00:35:45,130 --> 00:35:50,010
过滤器，哦，外观完全不同。 

854
00:35:50,010 --> 00:35:52,980
该选择器已完全适应

855
00:35:52,980 --> 00:35:54,926
它以某种形式存在。 

856
00:35:54,926 --> 00:35:58,950
这是SwiftUI的基本方面。 

857
00:35:58,950 --> 00:36:03,740
它使控件适应它们所处的环境。 

858
00:36:03,740 --> 00:36:05,900
我之前在Button中提到了这一点。 

859
00:36:05,900 --> 00:36:09,290
为什么我们使用Button而不是Text 

860
00:36:09,290 --> 00:36:11,660
在onTapGesture上吗？ 

861
00:36:11,660 --> 00:36:12,493
好吧，我们使用一个按钮

862
00:36:12,493 --> 00:36:15,270
因为Button知道它是否在Apple Watch上

863
00:36:15,270 --> 00:36:19,740
或Apple TV，但不只是跨平台的， 

864
00:36:19,740 --> 00:36:21,120
它在平台内。 

865
00:36:21,120 --> 00:36:23,500
如果您有一个选择器并且它处于表格形式， 

866
00:36:23,500 --> 00:36:26,290
它知道可以在这里使用这种非常酷的形式， 

867
00:36:26,290 --> 00:36:29,797
标题和值并排放置

868
00:36:29,797 --> 00:36:31,400
而且不需要轮子

869
00:36:31,400 --> 00:36:34,253
因为当我单击此按钮时，请注意会发生什么。 

870
00:36:35,530 --> 00:36:39,967
它导航到所有机场代码的列表。 

871
00:36:39,967 --> 00:36:44,967
我可以在这里选择，在圣地亚哥，圣地亚哥， 

872
00:36:45,210 --> 00:36:48,250
这是一种更好的方法。 

873
00:36:48,250 --> 00:36:49,930
现在，关于适应的一件事

874
00:36:49,930 --> 00:36:51,730
但是，对于您的环境， 

875
00:36:51,730 --> 00:36:53,650
你要小心一点

876
00:36:53,650 --> 00:36:56,890
它之所以能够适应是因为它知道它在表单中。 

877
00:36:56,890 --> 00:36:58,273
它不一定适应

878
00:36:58,273 --> 00:37:00,780
因为它知道它在NavigationView中， 

879
00:37:00,780 --> 00:37:02,359
即使这种适应

880
00:37:02,359 --> 00:37:04,820
需要一个NavigationView，对吗？ 

881
00:37:04,820 --> 00:37:07,950
当我单击此处时，我正在导航到该视图

882
00:37:07,950 --> 00:37:11,770
这对我们来说是很棒的建设。 

883
00:37:11,770 --> 00:37:14,750
如果我拿走这个NavigationView， 

884
00:37:14,750 --> 00:37:19,423
让我们对此进行评论，然后回头看看会发生什么。 

885
00:37:20,270 --> 00:37:23,340
它仍然会适应这里的形式， 

886
00:37:23,340 --> 00:37:24,710
但我无法点击它。 

887
00:37:24,710 --> 00:37:26,940
我在触摸它，这里什么也没发生

888
00:37:26,940 --> 00:37:30,550
因为我不在NavigationView中，所以它无法导航。 

889
00:37:30,550 --> 00:37:33,590
现在，如果我真的不想在NavigationView中使用它， 

890
00:37:33,590 --> 00:37:35,140
我这样做是因为我想要“完成”和“取消”， 

891
00:37:35,140 --> 00:37:36,121
但是如果我不想要

892
00:37:36,121 --> 00:37:38,975
我可以使它回到一个轮子。 

893
00:37:38,975 --> 00:37:42,950
因此，此处的选择器具有.pickerStyle， 

894
00:37:42,950 --> 00:37:45,920
你可以说，我希望它是WheelPickerStyle（）， 

895
00:37:47,000 --> 00:37:50,040
无论背景如何

896
00:37:50,040 --> 00:37:52,420
所以现在我们回去，我们仍然处于表单状态， 

897
00:37:52,420 --> 00:37:57,420
但是我们已经有了这种轮式或再次查看。 

898
00:37:57,450 --> 00:37:58,677
看起来还是不好。 

899
00:37:58,677 --> 00:38:00,923
现在让我们回到使用NavigationView 

900
00:38:00,923 --> 00:38:03,553
看起来肯定好多了。 

901
00:38:11,440 --> 00:38:16,363
让我们尝试了解此Picker在此处构建的内容。 

902
00:38:16,363 --> 00:38:21,363
显然，这是构建的列表，好吗？ 

903
00:38:21,490 --> 00:38:25,960
列表，大写L，此ForEach中所有视图的列表。 

904
00:38:25,960 --> 00:38:27,730
您会看到制作这些文本的ForEach， 

905
00:38:27,730 --> 00:38:30,280
这些只是这里的文本。 

906
00:38:30,280 --> 00:38:31,670
这就是这里的全部。 

907
00:38:31,670 --> 00:38:32,785
但有一件有趣的事要注意

908
00:38:32,785 --> 00:38:37,785
就是回到这里，这也是这些文本之一。 

909
00:38:38,150 --> 00:38:43,150
这是文本的标签与我们绑定的对象匹配。 

910
00:38:43,280 --> 00:38:45,030
因此，该视图实际上出现了两次。 

911
00:38:45,030 --> 00:38:49,240
它出现在这里，它出现在这里

912
00:38:49,240 --> 00:38:50,750
下来在哪里？ 

913
00:38:50,750 --> 00:38:52,890
在这里带一个复选标记。 

914
00:38:52,890 --> 00:38:55,350
这样在两个地方都可以使用View。 

915
00:38:55,350 --> 00:38:56,950
您必须了解，当您在制作Picker时， 

916
00:38:56,950 --> 00:38:58,130
您选择的此视图， 

917
00:38:58,130 --> 00:38:59,480
您实际上是在选择视图。 

918
00:38:59,480 --> 00:39:01,815
现在，“视图”就是这里显示的内容

919
00:39:01,815 --> 00:39:05,900
并通过此标签向您报告。 

920
00:39:05,900 --> 00:39:09,270
所以我们已经将它用于目的地

921
00:39:09,270 --> 00:39:11,090
并确保它仍在工作。 

922
00:39:11,090 --> 00:39:13,290
在这里更改外观

923
00:39:13,290 --> 00:39:16,743
但让我们将目的地更改为波士顿。 

924
00:39:18,221 --> 00:39:19,054
（干杯） 

925
00:39:19,054 --> 00:39:20,203
飞往波士顿。 

926
00:39:21,670 --> 00:39:22,938
好吧，所以我们已经开始工作了。 

927
00:39:22,938 --> 00:39:25,660
现在，让我们添加另一件事

928
00:39:25,660 --> 00:39:28,100
除了在这里选择目的地

929
00:39:28,100 --> 00:39:30,040
让我们选择我们的始发机场。 

930
00:39:30,040 --> 00:39:33,180
因此，我们仅显示从LAX到SFO的航班

931
00:39:33,180 --> 00:39:34,590
或类似的东西。 

932
00:39:34,590 --> 00:39:37,433
我们可以在这里使用几乎完全相同的代码来做到这一点。 

933
00:39:38,560 --> 00:39:40,320
这不是我们的目的地。 

934
00:39:40,320 --> 00:39:43,130
我们在这里做我们的起源

935
00:39:43,130 --> 00:39:46,080
选择是我们的本源。 

936
00:39:46,080 --> 00:39:46,913
否则是一样的

937
00:39:46,913 --> 00:39:49,110
我们正在寻找所有机场代码，等等。 

938
00:39:49,110 --> 00:39:50,460
因此，让我们看一下是否可行。 

939
00:39:52,760 --> 00:39:54,500
就在这里，他们来参加SFO， 

940
00:39:54,500 --> 00:39:57,190
我们过滤目的地

941
00:39:57,190 --> 00:40:00,073
看起来效果很好，起源。 

942
00:40:01,460 --> 00:40:02,520
好的，这是空白。 

943
00:40:02,520 --> 00:40:06,430
也许还可以，因为我们还没有起源。 

944
00:40:06,430 --> 00:40:08,330
我们没有选择起源，而是零。 

945
00:40:08,330 --> 00:40:09,640
好吧，我们进去。 

946
00:40:09,640 --> 00:40:10,473
这是我们的选择。 

947
00:40:10,473 --> 00:40:12,000
让我们选择丹佛。 

948
00:40:12,000 --> 00:40:14,650
哦，不，它没有用。 

949
00:40:14,650 --> 00:40:17,300
为什么我不能在这里选择始发机场？ 

950
00:40:17,300 --> 00:40:18,464
它保持空白。 

951
00:40:18,464 --> 00:40:19,760
它实际上是在搜索吗？ 

952
00:40:19,760 --> 00:40:22,324
不，它仍然向我显示这里的所有机场。 

953
00:40:22,324 --> 00:40:24,593
那么为什么这不起作用呢？ 

954
00:40:25,550 --> 00:40:26,780
好吧，这是很平常的事情。 

955
00:40:26,780 --> 00:40:28,777
人们第一次使用Pickers时

956
00:40:28,777 --> 00:40:33,150
他们想念这种微妙的微妙之处。 

957
00:40:33,150 --> 00:40:36,983
我告诉你这个变种

958
00:40:38,160 --> 00:40:42,636
必须与此标签完全相同的类型。 

959
00:40:42,636 --> 00:40:45,040
这个var是什么类型？ 

960
00:40:45,040 --> 00:40:46,403
草稿的由来？ 

961
00:40:47,400 --> 00:40:50,850
此可选字符串。 

962
00:40:50,850 --> 00:40:54,340
哦，可选字符串。 

963
00:40:54,340 --> 00:40:55,980
那是什么类型呢？ 

964
00:40:55,980 --> 00:40:57,280
哦，那是一个琴弦， 

965
00:40:57,280 --> 00:40:59,530
因为这是字符串的ForEach。 

966
00:40:59,530 --> 00:41:02,016
这是一个字符串，这是一个可选字符串， 

967
00:41:02,016 --> 00:41:03,820
那是行不通的。 

968
00:41:03,820 --> 00:41:05,390
它们不是完全相同的类型。 

969
00:41:05,390 --> 00:41:08,010
它们必须是完全相同的类型。 

970
00:41:08,010 --> 00:41:11,710
现在，这实际上是一个棘手的修复

971
00:41:11,710 --> 00:41:16,330
就是在这里对我们的ForEach闭包进行论证， 

972
00:41:16,330 --> 00:41:20,113
是一个可选的字符串。 

973
00:41:21,010 --> 00:41:23,297
因此请记住，这等于无效。 

974
00:41:23,297 --> 00:41:26,450
但是我们只是使用Swift推论

975
00:41:26,450 --> 00:41:28,590
不必指定这些东西。 

976
00:41:28,590 --> 00:41:31,560
但是在这里我要指定它并使其成为这种类型。 

977
00:41:31,560 --> 00:41:34,720
现在为什么不打破ForEach？ 

978
00:41:34,720 --> 00:41:38,930
因为ForEach只想让您关闭它

979
00:41:38,930 --> 00:41:43,150
您可以将其传递给它，它将起作用。 

980
00:41:43,150 --> 00:41:45,700
当然，您可以将String传递给闭包

981
00:41:45,700 --> 00:41:47,483
需要一个可选的字符串。 

982
00:41:48,460 --> 00:41:51,078
现在这改变了这里的机场

983
00:41:51,078 --> 00:41:53,190
成为可选字符串。 

984
00:41:53,190 --> 00:41:55,640
所以现在这个标签是一个可选的字符串

985
00:41:55,640 --> 00:41:57,220
这是一个可选字符串。 

986
00:41:57,220 --> 00:41:58,480
这样就解决了我们的问题

987
00:41:58,480 --> 00:42:00,250
这些不是同一类型。 

988
00:42:00,250 --> 00:42:02,650
但是，有点让我们失望了

989
00:42:02,650 --> 00:42:06,910
因为它说这里的机场现在是可选的， 

990
00:42:06,910 --> 00:42:09,220
因此我们必须在此处解开该Optional。 

991
00:42:09,220 --> 00:42:13,650
因此，我将使用默认内容将其解包

992
00:42:13,650 --> 00:42:14,700
当机场为零时。 

993
00:42:14,700 --> 00:42:16,730
当机场为零时，我们想要什么？ 

994
00:42:16,730 --> 00:42:21,510
我们希望它说“任何”机场或“未选择”机场

995
00:42:21,510 --> 00:42:22,713
或类似的东西。 

996
00:42:23,640 --> 00:42:25,363
因此，让我们看一下是否可行。 

997
00:42:28,960 --> 00:42:30,270
到我们这里的过滤器。 

998
00:42:30,270 --> 00:42:31,790
好吧，起源，还是空白。 

999
00:42:31,790 --> 00:42:34,490
所以那仍然是不对的，这是不对的。 

1000
00:42:34,490 --> 00:42:35,740
去这里

1001
00:42:35,740 --> 00:42:36,573
好的，这很好。 

1002
00:42:36,573 --> 00:42:39,050
我看不到“任何”机场的选择， 

1003
00:42:39,050 --> 00:42:40,889
但是让我们尝试像丹佛这样的东西。 

1004
00:42:40,889 --> 00:42:43,500
哦，至少现在可以了。 

1005
00:42:43,500 --> 00:42:47,250
当我在这里挑选东西时，达拉斯正在运作， 

1006
00:42:47,250 --> 00:42:49,590
但这是因为我们进行了匹配。 

1007
00:42:49,590 --> 00:42:54,590
但是我没有办法回到原点“任何”，对吗？ 

1008
00:42:54,600 --> 00:42:56,750
我不能将此设置回零。 

1009
00:42:56,750 --> 00:43:01,328
为什么不能在此处将原点设置为零？ 

1010
00:43:01,328 --> 00:43:04,860
答案是，此视图列表

1011
00:43:04,860 --> 00:43:08,200
是从这里的封闭件制成的

1012
00:43:08,200 --> 00:43:11,004
现在，它是所有机场代码中的一个。 

1013
00:43:11,004 --> 00:43:14,420
没有机场代码为零。 

1014
00:43:14,420 --> 00:43:16,900
所以既然那里没有零， 

1015
00:43:16,900 --> 00:43:18,584
此列表中没有零。 

1016
00:43:18,584 --> 00:43:20,955
因此，如果我们想选择“任何”， 

1017
00:43:20,955 --> 00:43:24,089
我们必须在此列表中添加零。 

1018
00:43:24,089 --> 00:43:27,840
但这不只是ForEach。 

1019
00:43:27,840 --> 00:43:31,930
我们可以去这里说Text（“ Any”）， 

1020
00:43:31,930 --> 00:43:35,790
它的标签为nil，我们添加了另一个View。 

1021
00:43:35,790 --> 00:43:37,700
因此，所有这些ForEach， 

1022
00:43:37,700 --> 00:43:39,913
但是在这里开始时还有另外一个。 

1023
00:43:39,913 --> 00:43:41,726
现在这不太有效

1024
00:43:41,726 --> 00:43:46,726
因为Swift无法推断出该nil表示String的nil。 

1025
00:43:47,899 --> 00:43:50,970
这就是无法推断出通用参数“ V”的原因。 

1026
00:43:50,970 --> 00:43:54,750
如果我们去看看标签，我们可以看看标签， 

1027
00:43:54,750 --> 00:43:57,730
让我们看看我们是否将标签标记为零，可能看起来像。 

1028
00:43:57,730 --> 00:44:00,047
是的，这里是标签的文档

1029
00:44:00,047 --> 00:44:02,470
您会看到该标签无需理会。 

1030
00:44:02,470 --> 00:44:05,296
标记并不关心您将其作为标记的类型， 

1031
00:44:05,296 --> 00:44:06,150
它所需要的

1032
00:44:06,150 --> 00:44:09,840
就是这里有些哈希值。 

1033
00:44:09,840 --> 00:44:11,300
但是如果你只是说零， 

1034
00:44:11,300 --> 00:44:13,710
那就没有足够的信息

1035
00:44:13,710 --> 00:44:15,860
知道我们在说什么， 

1036
00:44:15,860 --> 00:44:17,610
因为这可能是任何事情。 

1037
00:44:17,610 --> 00:44:20,990
那么，我们如何指定要nil的String呢？ 

1038
00:44:20,990 --> 00:44:24,880
有一种很酷的方法，String Optional。 

1039
00:44:24,880 --> 00:44:28,900
请记住，这是一个枚举，我们可以使用大小写.none。 

1040
00:44:28,900 --> 00:44:31,017
是的，我们也可以使用.some of String， 

1041
00:44:31,017 --> 00:44:32,650
但我们将使用.none。 

1042
00:44:32,650 --> 00:44:36,400
因此，这是对可选字符串说nil的一种方法。 

1043
00:44:36,400 --> 00:44:40,200
这是一个棘手的小方法。 

1044
00:44:40,200 --> 00:44:42,200
所以现在我们添加了额外的内容。 

1045
00:44:42,200 --> 00:44:43,617
当我们回到过滤器时， 

1046
00:44:43,617 --> 00:44:46,723
我们应该看到另一行显示“ Any”。 

1047
00:44:47,674 --> 00:44:49,677
甚至还有“视图”在这里。 

1048
00:44:49,677 --> 00:44:50,510
（干杯） 

1049
00:44:50,510 --> 00:44:51,640
那里有任何一排。 

1050
00:44:51,640 --> 00:44:54,980
所以我们可以去这里博伊西，然后回来， 

1051
00:44:54,980 --> 00:44:56,730
回到任何地方，我们都在。 

1052
00:44:56,730 --> 00:44:59,577
如果我们说完成，（欢呼）它仍然显示任何内容。 

1053
00:44:59,577 --> 00:45:02,360
如果我们走到这里去原点， 

1054
00:45:02,360 --> 00:45:05,750
让我们做吧，我不知道，丹佛，也许。 

1055
00:45:05,750 --> 00:45:07,643
所以看看我们是否能找到航班。 

1056
00:45:09,061 --> 00:45:09,894
（干杯） 

1057
00:45:09,894 --> 00:45:11,220
那里是今天从丹佛出发的航班

1058
00:45:11,220 --> 00:45:15,093
在大约半小时内到达1:00，好吗？ 

1059
00:45:16,090 --> 00:45:19,960
所以这就是当你没有零钱时发生的事情

1060
00:45:19,960 --> 00:45:22,850
或Optional值，您可以选择nil， 

1061
00:45:22,850 --> 00:45:25,480
您需要为此添加一些额外的视图

1062
00:45:25,480 --> 00:45:27,390
因为选择器正在选择视图。 

1063
00:45:27,390 --> 00:45:30,010
它选择这些视图之一。 

1064
00:45:30,010 --> 00:45:33,250
因此，您必须拥有所需的每个选项的视图。 

1065
00:45:33,250 --> 00:45:35,770
现在让我们与航空公司做同样的事情。 

1066
00:45:35,770 --> 00:45:37,359
我们可以按航空公司过滤。 

1067
00:45:37,359 --> 00:45:38,671
所以我要把“航空公司”放在这里。 

1068
00:45:38,671 --> 00:45:40,160
为了让我的生活更轻松

1069
00:45:40,160 --> 00:45:44,360
我要用航空公司代替机场

1070
00:45:44,360 --> 00:45:47,212
因为这几乎是同一件事， 

1071
00:45:47,212 --> 00:45:49,500
粘贴，粘贴，粘贴， 

1072
00:45:49,500 --> 00:45:52,830
我将需要在此处添加另一个ViewModel， 

1073
00:45:52,830 --> 00:45:54,373
我所有的航空公司

1074
00:45:57,129 --> 00:45:57,962
航空公司， 

1075
00:45:59,918 --> 00:46:00,751
航空公司， 

1076
00:46:01,940 --> 00:46:03,130
好吧，现在我有了一个ViewModel 

1077
00:46:03,130 --> 00:46:04,990
对于我所有的航空公司和机场， 

1078
00:46:04,990 --> 00:46:06,340
所以我可以通过航空公司来做到这一点。 

1079
00:46:06,340 --> 00:46:08,340
而这家航空公司

1080
00:46:08,340 --> 00:46:11,833
当然是我们的FlightSearch草案中的航空公司。 

1081
00:46:15,557 --> 00:46:17,793
是的，我们这里过滤器，起源， 

1082
00:46:18,650 --> 00:46:20,620
是的，我们可以选择起源，那很好。 

1083
00:46:20,620 --> 00:46:23,440
航空公司，任何一家航空公司或美国联合航空公司。 

1084
00:46:23,440 --> 00:46:25,940
因此，让我们看看美联航飞往SFO的航班。 

1085
00:46:25,940 --> 00:46:27,433
很好，就在那里。 

1086
00:46:29,010 --> 00:46:31,163
我们可以回到任意位置并点击“完成” 

1087
00:46:32,314 --> 00:46:34,633
获取航班的完整列表。 

1088
00:46:35,660 --> 00:46:37,650
现在，我想做的另一件事是

1089
00:46:37,650 --> 00:46:40,560
这些航班代码我很了解吗， 

1090
00:46:40,560 --> 00:46:43,785
如您所知，但很多人不知道

1091
00:46:43,785 --> 00:46:46,158
这些是什么？ 

1092
00:46:46,158 --> 00:46:48,130
什么是KORD？ 

1093
00:46:48,130 --> 00:46:49,463
那是什么呀？ 

1094
00:46:50,570 --> 00:46:55,480
我们希望这些名称比KSFO和KORD更好。 

1095
00:46:55,480 --> 00:46:57,997
我们想成为实际机场的名称， 

1096
00:46:57,997 --> 00:46:59,119
我们也可以做到。 

1097
00:46:59,119 --> 00:47:01,626
这些ViewModel在这里， 

1098
00:47:01,626 --> 00:47:03,170
allAirports和allAirlines 

1099
00:47:03,170 --> 00:47:05,540
可以为我们提供很多更好的信息。 

1100
00:47:05,540 --> 00:47:07,970
因此，在这里，不仅要输入机场代码， 

1101
00:47:07,970 --> 00:47:10,510
我仍将标签标记为机场代码， 

1102
00:47:10,510 --> 00:47:12,650
但与其显示机场代码， 

1103
00:47:12,650 --> 00:47:17,383
我要用我的self.allAirports， 

1104
00:47:19,660 --> 00:47:21,091
这里的这个机场

1105
00:47:21,091 --> 00:47:22,844
那可能是零， 

1106
00:47:22,844 --> 00:47:25,005
他们可能会查找它却找不到它， 

1107
00:47:25,005 --> 00:47:27,750
所以我在这里去可选链

1108
00:47:27,750 --> 00:47:30,730
并使用我称为其friendlyName的名称。 

1109
00:47:30,730 --> 00:47:31,660
如果没有设置， 

1110
00:47:31,660 --> 00:47:34,970
然后我们只使用机场代码。 

1111
00:47:34,970 --> 00:47:37,430
所以这只是得到一个友好的名字

1112
00:47:37,430 --> 00:47:40,529
从这个ViewModel到这里的所有机场ViewModel， 

1113
00:47:40,529 --> 00:47:43,590
这个机场的友好名称。 

1114
00:47:43,590 --> 00:47:47,587
我们可以在这里为这个机场做同样的事情， 

1115
00:47:47,587 --> 00:47:49,850
我们可以为航空公司做类似的事情， 

1116
00:47:49,850 --> 00:47:51,193
allAirlines。 

1117
00:47:55,428 --> 00:47:58,261
因此，它具有友好的名称功能。 

1118
00:48:01,480 --> 00:48:03,390
我们将转到过滤器。 

1119
00:48:03,390 --> 00:48:06,010
好的，目的地，不再是KSFO。 

1120
00:48:06,010 --> 00:48:07,687
加利福尼亚旧金山。 

1121
00:48:07,687 --> 00:48:08,590
（干杯） 

1122
00:48:08,590 --> 00:48:10,630
这些都是这些机场的友好名称。 

1123
00:48:10,630 --> 00:48:11,610
航空公司呢？ 

1124
00:48:11,610 --> 00:48:13,323
是的，我们得到了友好的名字。 

1125
00:48:18,640 --> 00:48:21,933
因此，让我们再添加一件事，不是选择器，而是切换。 

1126
00:48:24,540 --> 00:48:27,830
Toggle将Binding绑定到将要切换的东西。 

1127
00:48:27,830 --> 00:48:30,920
在这种情况下，我想切换草稿的inTheAir 

1128
00:48:32,275 --> 00:48:34,938
而且还带有标签

1129
00:48:34,938 --> 00:48:37,830
对我们来说这只是一个简单的文本

1130
00:48:37,830 --> 00:48:40,949
上面写着“只在途中”。 

1131
00:48:40,949 --> 00:48:43,250
所以这个Toggle要切换

1132
00:48:43,250 --> 00:48:45,330
我们是否正在显示正在飞行的航班

1133
00:48:45,330 --> 00:48:47,770
或地面上某处的航班。 

1134
00:48:47,770 --> 00:48:48,770
看一看。 

1135
00:48:52,970 --> 00:48:53,910
我们只有途中。 

1136
00:48:53,910 --> 00:48:55,931
所以我要关闭此功能，然后返回至完成。 

1137
00:48:55,931 --> 00:48:56,764
（干杯） 

1138
00:48:56,764 --> 00:48:59,220
我们有更多的航班在这里，尚未出发， 

1139
00:48:59,220 --> 00:49:00,840
原定于稍后到达的航班， 

1140
00:49:00,840 --> 00:49:02,530
但还没出发

1141
00:49:02,530 --> 00:49:05,810
（鼠标单击） 

1142
00:49:05,810 --> 00:49:07,460
好吧，这就是我真正想要的

1143
00:49:07,460 --> 00:49:11,190
今天将在Picker上进行介绍。 

1144
00:49:11,190 --> 00:49:12,650
希望这可以帮助您

1145
00:49:12,650 --> 00:49:14,750
在最终项目中使用Pickers。 

1146
00:49:14,750 --> 00:49:15,712
我猜你们大多数人

1147
00:49:15,712 --> 00:49:18,479
将在您的最终项目中的UI中找到某个位置

1148
00:49:18,479 --> 00:49:19,913
你要去做捡拾器的地方

1149
00:49:19,913 --> 00:49:22,263
现在您知道该怎么做了。 

1150
00:49:23,190 --> 00:49:26,413
-[旁白]有关更多信息，请访问stanford.edu。 

